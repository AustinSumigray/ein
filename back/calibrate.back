(
  0.0 "tableReconstructWithZTotalZ" store
  1 sceneSetFixationMode

  200 "tableReconstructStreamTakeSceneSamples" store
  0 sceneSetDepthPatchHalfWidth

  201 sceneSetAngularApertureRows 201 sceneSetAngularApertureCols



  quarterImpulse
  waitUntilAtCurrentPosition

  /* do binning from this height for good sample size */
  1 changeToHeight 
  currentPose "tableUpdateSpiralPos" store

  0 "tableChrThisHeight" store
  3 "tableChrEndHeight" store

  (
    tableChrThisHeight tableChrEndHeight < 
    tableChrThisHeight tableChrEndHeight = or 
  ) (
    tableChrThisHeight changeToHeight 

    /*
    sceneInit 
    */
    slfgRebase

    sceneClearObservedMap
    clearStreamBuffers

    tableUpdateSpinCoreNoClean

    quarterImpulse
    tableUpdateSpiralPos moveEeToPoseWord
    tableChrThisHeight changeToHeight 
    waitUntilAtCurrentPosition

    /* finds the current height difference */
    /*
    tableReconstructWithZTopZ 0.388 divide 0.002 times  "slfgRebaseCellWidth" store slfgRebase
    */ 

    0.001 "slfgRebaseCellWidth" store slfgRebaseTable

    /* this actually needs to happen after movement so position is still correct for FIXATION calibrators */
    tableReconstructWithZ
    tableUpdateMaps

    /*
    tableChrThisHeight sceneSetHeightReticleFromVariance
    */
    slide ( scenePushPixelOfMinVariance  1 sP )

      tableChrThisHeight 1 +
    "tableChrThisHeight" store
    
    /*
    pauseStackExecution
    */
  ) while 
  
  calibrateHeightReticlesSetAll

  0 sceneSetFixationMode
  tableReconstructWithZTotalZDefault "tableReconstructWithZTotalZ" store
) "calibrateHeightReticles" store

(
  tableChrEndHeight "tableChrThisHeight" store
  (
    tableChrThisHeight 0 > 
    tableChrThisHeight 0 = or 
  ) (
      tableChrThisHeight 
	swap 
      slip
    sceneSetHeightReticleFromPixel

      tableChrThisHeight 1 -
    "tableChrThisHeight" store
  ) while 
) "calibrateHeightReticlesSetAll" store

(
  0.0 "tableReconstructWithZTotalZ" store
  201 sceneSetAngularApertureRows 201 sceneSetAngularApertureCols

  1 sceneSetFixationMode
  quarterImpulse
  waitUntilAtCurrentPosition

  /* do binning from this height for good sample size */
  1 changeToHeight 
  currentPose "tableUpdateSpiralPos" store

  0 changeToHeight 
  0.01 setGridSize ( zDown ) 12 replicateWord
  waitUntilAtCurrentPosition

  sceneInit 
  sceneClearObservedMap
  clearStreamBuffers

  0.001 "slfgRebaseCellWidth" store slfgRebaseTable

  tableUpdateZoomCoreNoClean

  quarterImpulse
  tableUpdateSpiralPos moveEeToPoseWord
  waitUntilAtCurrentPosition

  /* this actually needs to happen after movement so position is still correct for FIXATION calibrators */
  tableReconstructFromStream
  tableUpdateMaps

  /*
  sceneSetVanishingPointFromVariance
  */

  
  0 sceneSetFixationMode
  tableReconstructWithZTotalZDefault "tableReconstructWithZTotalZ" store
) "calibrateVanishingPointReticle" store

(
  0.0 "tableReconstructWithZTotalZ" store
  0.03 "thisGridSize" store

  sceneClearDepthStack

  /* two types of averaging, variance over depth stack and again by averaging coordinatewise estimates */

  waitUntilAtCurrentPosition
  calibrateVanishingPointReticle
  scenePushOntoDepthStack
  scenePushPixelOfMinVariance

  thisGridSize setGridSize 
  xUp yUp
  calibrateVanishingPointReticle
  scenePushOntoDepthStack
  scenePushPixelOfMinVariance

  thisGridSize setGridSize 
  xDown xDown
  calibrateVanishingPointReticle
  scenePushOntoDepthStack
  scenePushPixelOfMinVariance

  thisGridSize setGridSize 
  yDown yDown
  calibrateVanishingPointReticle
  scenePushOntoDepthStack
  scenePushPixelOfMinVariance

  thisGridSize setGridSize 
  xUp xUp
  calibrateVanishingPointReticle
  scenePushOntoDepthStack
  scenePushPixelOfMinVariance

  thisGridSize setGridSize 
  xDown yUp
  waitUntilAtCurrentPosition

  /* average the coordinates that were on the stack */
  printStacks

  0 "vanishingXTotal" store
  0 "vanishingYTotal" store
  0 "vanishingNumSamples" store
  (
      vanishingXTotal +
    "vanishingXTotal" store

      vanishingYTotal +
    "vanishingYTotal" store

      vanishingNumSamples 1 +
    "vanishingNumSamples" store
  ) 5 replicateWord

    vanishingXTotal vanishingNumSamples divide  
  "vanishingXAve" store

    vanishingYTotal vanishingNumSamples divide  
  "vanishingYAve" store

  vanishingYAve vanishingXAve sceneSetVanishingPointFromPixel

  /* 
  scenePushPixelOfMinStackVariance sceneSetVanishingPointFromPixel
  */ 


  tableReconstructWithZTotalZDefault "tableReconstructWithZTotalZ" store
) "calibrateVanishingPointReticleMultiSample" store

0.2 "magCalDelta" store
10 "magCalSteps" store
0.00 "magCalMinVarImprovement" store
( cameraGetIdxMagX ) "magCalGetter" store
( cameraSetIdxMagX ) "magCalSetter" store
(
  0 cameraSetCalibrationMode

  magCalGetter "magCalInitial" store

    magCalSteps
    2.0
  / 
  -1.0 *
  magCalDelta *
  magCalInitial +
  "magCalLo" store

    magCalSteps
    2.0
  / 
  magCalDelta *
  magCalInitial +
  "magCalHi" store

  magCalLo "magCalThis" store

  /*
  sceneClearDepthStack
  */

  1000000000000000 "magCalMinVar" store
  -1 "magCalMinVarMag" store
  0 "magCalNumWins" store

  0.001 "slfgRebaseCellWidth" store slfgRebaseTable

  ( 
    magCalThis magCalHi < 
    magCalThis magCalHi = or
  ) (
    magCalThis magCalSetter 

	  currentPose
	eePosePZ
	currentTableZ
      +
    "tableReconstructWithZTopZ" store 
    tableReconstructWithZ

    /*
    tableUpdateMaps
    */

	scenePushAverageCrCbSigmaSquared 
      dup 
      magCalMinVar magCalMinVarImprovement - 
    < (
      "magCalMinVar" store
      magCalThis "magCalMinVarMag" store
      "This WAS INDEED a new winner." print
	magCalNumWins 1 +
      "magCalNumWins" store
    ) (
      "This was not a new winner." print
      pop
    ) ifte

    " just tried magnification " magCalThis + print

    /*
    scenePushOntoDepthStack
    pauseStackExecution
    */

      magCalThis magCalDelta + 
    "magCalThis" store
  ) while

  " The winner was " magCalMinVarMag " with a variance of " magCalMinVar + + + print

  magCalNumWins 1 > (
    "We won more than once so setting the new value." print
    magCalMinVarMag magCalSetter 
  ) (
    "We only won " magCalNumWins " times but we are SETTING THE VALUE ANYWAY." + + print
    magCalMinVarMag magCalSetter 
  ) ifte


) "tableMagCalibrationGridSearcher" store

0 "tableChrStartHeight" store
3 "tableChrEndHeight" store
0.0 "tableChrExtraZ" store
(
  0 cameraSetCalibrationMode
  351 sceneSetAngularApertureRows 551 sceneSetAngularApertureCols

  0 sceneSetFixationMode
  quarterImpulse
  waitUntilAtCurrentPosition

  1 changeToHeight 
  currentPose "tableUpdateSpiralPos" store

  tableChrStartHeight "tableChrThisHeight" store

  (
    tableChrThisHeight tableChrEndHeight < 
    tableChrThisHeight tableChrEndHeight = or 
  ) (
    tableChrThisHeight changeToHeight 

        currentPose 
	  currentPose 
	  eePosePZ tableChrExtraZ
	+ 
      setEEPosePZ 
    moveEeToPoseWord waitUntilAtCurrentPosition comeToStop

    sceneInit 
    sceneClearObservedMap
    clearStreamBuffers
    waitUntilAtCurrentPosition

    tableUpdateMagCoreNoClean

    quarterImpulse
    tableUpdateSpiralPos moveEeToPoseWord

    /* necessary for mag changes to take effect properly */
    tableChrThisHeight changeToHeight 
    waitUntilAtCurrentPosition

    tableMagCalibrationGridSearcher

      tableChrThisHeight 1 +
    "tableChrThisHeight" store
    
    /*
    pauseStackExecution
    */
  ) while 

/* this one takes images and optimizes each height only on its images */
  
) "calibrateOnBundleOneDimension" store

(
  0 cameraSetCalibrationMode
  351 sceneSetAngularApertureRows 351 sceneSetAngularApertureCols

  0 sceneSetFixationMode
  quarterImpulse
  waitUntilAtCurrentPosition

  1 changeToHeight 
  currentPose "tableUpdateSpiralPos" store

  tableChrStartHeight "tableChrThisHeight" store

  (
    tableChrThisHeight tableChrEndHeight < 
    tableChrThisHeight tableChrEndHeight = or 
  ) (
    tableChrThisHeight changeToHeight 

        currentPose 
	  currentPose 
	  eePosePZ tableChrExtraZ
	+ 
      setEEPosePZ 
    moveEeToPoseWord waitUntilAtCurrentPosition comeToStop

    sceneInit 
    sceneClearObservedMap
    clearStreamBuffers
    waitUntilAtCurrentPosition

    tableUpdateMagCoreNoClean
    endStackCollapseNoop


      tableChrThisHeight 1 +
    "tableChrThisHeight" store
    
  ) while 

  quarterImpulse
  tableUpdateSpiralPos moveEeToPoseWord
  waitUntilAtCurrentPosition

  tableChrStartHeight "tableChrThisHeight" store
  (
    tableChrThisHeight tableChrEndHeight < 
    tableChrThisHeight tableChrEndHeight = or 
  ) (
    tableChrThisHeight changeToHeight 
      tableChrThisHeight 1 +
    "tableChrThisHeight" store

    tableMagCalibrationGridSearcher
    
  ) while 

  /*
  pauseStackExecution
  */
  
/* this one takes images at all 4 heights then optimizes each height with images at all 4 heights */
) "calibrateOnBundleOneDimensionJointHeights" store

(
  0.0 "tableReconstructWithZTotalZ" store

  /*
  depth dependent magnification 
  don't bias different heights by the others,
   address each height separately
  */

  /* 
  */

  
  1.375 "magCalBase" store
  64 "magCalSteps" store
  0.04 "magCalDelta" store

  0 changeToHeight
  magCalBase cameraSetIdxMagY 
  magCalBase cameraSetIdxMagX 

  1 changeToHeight
  magCalBase cameraSetIdxMagY 
  magCalBase cameraSetIdxMagX 

  2 changeToHeight
  magCalBase cameraSetIdxMagY 
  magCalBase cameraSetIdxMagX 

  3 changeToHeight
  magCalBase cameraSetIdxMagY 
  magCalBase cameraSetIdxMagX 


  0 cameraSetCalibrationMode

  100 "tableReconstructStreamTakeSceneSamples" store
  0 "tableChrStartHeight" store
  1 "tableChrEndHeight" store
  0.0 "tableChrExtraZ" store

  ( cameraGetIdxMagX ) "magCalGetter" store
  ( cameraSetIdxMagX ) "magCalSetter" store
  calibrateOnBundleOneDimension

  ( cameraGetIdxMagY ) "magCalGetter" store
  ( cameraSetIdxMagY ) "magCalSetter" store
  calibrateOnBundleOneDimension


  /*
  */


  /* 
  although we don't use heights 3 and 4 explicitly, setting them to the value of height 1 helps the quadratic
  fit better if we don't feel like collecting them explicitly
  */
  1 changeToHeight cameraGetIdxMagY dup 2 changeToHeight cameraSetIdxMagY 3 changeToHeight cameraSetIdxMagY
  1 changeToHeight cameraGetIdxMagX dup 2 changeToHeight cameraSetIdxMagX 3 changeToHeight cameraSetIdxMagX
  cameraFitHyperbolic 2 cameraSetCalibrationMode

  tableReconstructWithZTotalZDefault "tableReconstructWithZTotalZ" store
) "calibrateMagnification" store

(
  /*
  gripper projections
  these parameters interact through the pixelToGlobal function so they might need
    to address data at all heights jointly.

  variance reduction was successful during joint optimization but it lost metric
    calibration somehow in the process. maybe a strange interaction between
    the amount of space over which the average is happening due to the projection's
    changes and the variance due to focus.

  separate case not fully chased because calibration from spinning was adequate.

  later observation: this likely failed because images should be taken at all heights
    and jointly optimized, but the code at the time did not support it
  */

  200 "tableReconstructStreamTakeSceneSamples" store

  0 "tableChrStartHeight" store
  3 "tableChrEndHeight" store

  1 "magCalDelta" store
  16 "magCalSteps" store
  ( cameraGetCurrentHeightReticleX ) "magCalGetter" store
  ( cameraSetCurrentHeightReticleX ) "magCalSetter" store
  calibrateOnBundleOneDimensionJointHeights

  1 "magCalDelta" store
  16 "magCalSteps" store
  ( cameraGetCurrentHeightReticleY ) "magCalGetter" store
  ( cameraSetCurrentHeightReticleY ) "magCalSetter" store
  calibrateOnBundleOneDimensionJointHeights

) "calibrateBundleHeight" store

(
  initializeAndFocusOnNewClass

  calibrateHeightReticles
  calibrateMagnification
) 
"Calibrate the RGB camera; start from a position near the table as we set the table height first.  Make sure you've set up the magic circle with magic paper" 
"calibrateRGBCameraIntrinsics" define

(
  setTable
    currentPose
  setGripperMaskWithMotion
  moveEeToPoseWord

  calibrateRGBCameraIntrinsics

  /*
  calibrateVanishingPointReticleMultiSample
  */
) 
"When you are confident with calibrateRGBCameraIntrinsics, this is a good all-in-one." 
"calibrateDeluxe" define






(
  0.0022 "magCalBase" store
  28 "magCalSteps" store
  0.00005 "magCalDelta" store

  magCalBase setCameraMuX 
  magCalBase setCameraMuY

  1 changeToHeight
  magCalBase cameraSetIdxMagX 

  0 cameraSetCalibrationMode

  100 "tableReconstructStreamTakeSceneSamples" store
  1 "tableChrStartHeight" store
  1 "tableChrEndHeight" store
  0.0 "tableChrExtraZ" store

  ( cameraMuX ) "magCalGetter" store
  ( setCameraMuX ) "magCalSetter" store
  calibrateOnBundleOneDimension

  ( cameraMuY ) "magCalGetter" store
  ( setCameraMuY ) "magCalSetter" store
  calibrateOnBundleOneDimension

) 
"Find magnification for new calibration."
"calibrateFullMus" define

(
  0.0000008 "magCalBase" store
  16 "magCalSteps" store
  0.0000001 "magCalDelta" store

  magCalBase setCameraKappaX 
  magCalBase setCameraKappaY

  1 changeToHeight
  magCalBase cameraSetIdxMagX 

  0 cameraSetCalibrationMode

  100 "tableReconstructStreamTakeSceneSamples" store
  1 "tableChrStartHeight" store
  1 "tableChrEndHeight" store
  0.0 "tableChrExtraZ" store

/*
  ( cameraKappaX ) "magCalGetter" store
  ( setCameraKappaX ) "magCalSetter" store
  calibrateOnBundleOneDimension
*/

  ( cameraKappaY ) "magCalGetter" store
  ( setCameraKappaY ) "magCalSetter" store
  calibrateOnBundleOneDimension

) 
"Find distortion for new calibration."
"calibrateFullKappas" define

(
  /*

  make a map with the first camera
  set block filter size appropriately
  * add a detection in the middle of the workspace
	* push pose of cblock in this, the first map 
  create a temporary calibrator block (cblock) class
  grab the most certainly discrepant cblock region as the model
  switch to the second camera
  make a (the) second map and localize the cblock
	* push pose of cblock in second map
      obtain relative transformation between the two cblock poses
      push the second camera offset
    apply the relative transformation to the pushed camera offset
  set the camera offset to the transformed value

  */
    
  cameraWristConfig
  tableReconstructStreamTakeScene

  0.010 "tableBlockMaxGraspThickness" store
  0.0 "tableBlockGripperThrow" store
  0.010 "tableBlockTargetContactWidth" store
  tableSwapToBlocks
  
  sceneClearPredictedObjects
  0 0 0 sceneAddPredictedFocusedObject 
    0 scenePushSceneObjectPose
  "ccOffPredition1" store

  0.01 "sceneGrabDiscrepantCropAsClassDefaultThresh" store
  sceneGrabDiscrepantCropAsClassDefaultThresh sceneGrabDiscrepantCropAsClass

  incrementCamera
  cameraK2QHDConfig

  0.0 sceneSetScoreThresh
  10000000 sceneSetDiscrepancySearchDepth 

  sceneClearPredictedObjects
  scenePredictBestObject tableUpdateMaps
    0 scenePushSceneObjectPose
  "ccOffPredition2" store
  tableReconstructStreamTakeScene

    ccOffPredition1 ccOffPredition2 eePoseGetPoseRelativeTo
  "ccOffRelativeTransform" store

    handCameraOffset ccOffRelativeTransform eePoseApplyRelativePoseTo
  "ccOffNewCameraPose" store

  ccOffNewCameraPose setHandCameraOffset
) 
"Find the offset of the next (second) camera from the current (first) camera and use this to set the offset of the next camera." 
"calibrateNextCameraOffset" define

(
  0 setCameraR00 1 setCameraR01 -1 setCameraR10 0 setCameraR11
  0.03815 0.01144 0.01589 0 0 0 1 createEEPose setHandCameraOffset
  0.0024 setCameraMuX 0.00245 setCameraMuY
  0.0 setCameraKappaX 0.0000002 setCameraKappaY
  640 setCameraCenterX
  400 setCameraCenterY
  320 setCameraCropUpperLeftCornerX 
  200 setCameraCropUpperLeftCornerY 
) "cameraWristConfig" store

(
  1 setCameraR00 0 setCameraR01 0 setCameraR10 1 setCameraR11
  0.03815 0.01144 0.01589 0 0 0 1 createEEPose setHandCameraOffset
  0.0019 setCameraMuX 0.00195 setCameraMuY
  0.0 setCameraKappaX 0.0000002 setCameraKappaY
  480 setCameraCenterX
  270 setCameraCenterY
  0 setCameraCropUpperLeftCornerX 
  0 setCameraCropUpperLeftCornerY 
/*
960
540
*/
) "cameraK2QHDConfig" store

(
  1 setCameraR00 0 setCameraR01 0 setCameraR10 1 setCameraR11
  0.03815 0.01144 0.01589 0 0 0 1 createEEPose setHandCameraOffset
  0.0019 setCameraMuX 0.00195 setCameraMuY
  0.0 setCameraKappaX 0.0000002 setCameraKappaY
  250 setCameraCenterX
  250 setCameraCenterY
  0 setCameraCropUpperLeftCornerX 
  0 setCameraCropUpperLeftCornerY 
/*
960
540
*/
) "cameraK2IRConfig" store


