!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
A	cephes/gamma.c	/^static double A[] = {$/;"	v	file:
A	cephes/gamma.c	/^static unsigned short A[] = {$/;"	v	file:
A	cephes/i0.c	/^static double A[] = {$/;"	v	file:
A	cephes/i0.c	/^static unsigned short A[] = {$/;"	v	file:
A	cephes/i1.c	/^static double A[] = {$/;"	v	file:
A	cephes/i1.c	/^static unsigned short A[] = {$/;"	v	file:
A	cephes/k0.c	/^static double A[] = {$/;"	v	file:
A	cephes/k0.c	/^static unsigned short A[] = {$/;"	v	file:
A	cephes/k1.c	/^static double A[] = {$/;"	v	file:
A	cephes/k1.c	/^static unsigned short A[] = {$/;"	v	file:
A	cephes/psi.c	/^static double A[] = {$/;"	v	file:
A	cephes/psi.c	/^static unsigned short A[] = {$/;"	v	file:
A	cephes/spence.c	/^static double A[8] = {$/;"	v	file:
A	cephes/spence.c	/^static unsigned short A[32] = {$/;"	v	file:
A	cephes/zeta.c	/^static double A[] = {$/;"	v	file:
A	cephes/zetac.c	/^static double A[11] = {$/;"	v	file:
A	cephes/zetac.c	/^static unsigned short A[44] = {$/;"	v	file:
ABSERR	cephes/sincos.c	118;"	d	file:
ACC11	cephes/sincos.c	109;"	d	file:
ACC17	cephes/sincos.c	110;"	d	file:
ACC5	cephes/sincos.c	108;"	d	file:
AD	cephes/airy.c	/^static double AD[8] = {$/;"	v	file:
AD	cephes/airy.c	/^static unsigned short AD[32] = {$/;"	v	file:
AD	cephes/dawsn.c	/^static double AD[11] = {$/;"	v	file:
AD	cephes/dawsn.c	/^static unsigned short AD[44] = {$/;"	v	file:
AFD	cephes/airy.c	/^static double AFD[9] = {$/;"	v	file:
AFD	cephes/airy.c	/^static unsigned short AFD[36] = {$/;"	v	file:
AFN	cephes/airy.c	/^static double AFN[9] = {$/;"	v	file:
AFN	cephes/airy.c	/^static unsigned short AFN[36] = {$/;"	v	file:
AGD	cephes/airy.c	/^static double AGD[10] = {$/;"	v	file:
AGD	cephes/airy.c	/^static unsigned short AGD[40] = {$/;"	v	file:
AGN	cephes/airy.c	/^static double AGN[11] = {$/;"	v	file:
AGN	cephes/airy.c	/^static unsigned short AGN[44] = {$/;"	v	file:
AIBO_INDICATOR_ACCESSORS	ein_aibo.cpp	1595;"	d	file:
AIBO_POSE_ACCESSOR	ein_aibo.cpp	1362;"	d	file:
AIBO_POSE_DELTAS	ein_aibo.cpp	1413;"	d	file:
AIBO_POSE_DELTAS_GAIN	ein_aibo.cpp	1451;"	d	file:
AIBO_SENSOR_ACCESSORS	ein_aibo.cpp	1642;"	d	file:
AN	cephes/airy.c	/^static double AN[8] = {$/;"	v	file:
AN	cephes/airy.c	/^static unsigned short AN[32] = {$/;"	v	file:
AN	cephes/dawsn.c	/^static double AN[10] = {$/;"	v	file:
AN	cephes/dawsn.c	/^static unsigned short AN[40] = {$/;"	v	file:
ANALYTIC_PRIOR	ein_util.h	/^  ANALYTIC_PRIOR$/;"	e	enum:__anon40
ANGLES	config.h	/^  ANGLES = 1,$/;"	e	enum:__anon28
ANIMATION_OFF	config.h	/^	ANIMATION_OFF = 0,$/;"	e	enum:__anon34
ANIMATION_ON	config.h	/^	ANIMATION_ON = 1 $/;"	e	enum:__anon34
ANSIC	cephes/mconf.h	157;"	d
APD	cephes/airy.c	/^static double APD[8] = {$/;"	v	file:
APD	cephes/airy.c	/^static unsigned short APD[32] = {$/;"	v	file:
APFD	cephes/airy.c	/^static double APFD[9] = {$/;"	v	file:
APFD	cephes/airy.c	/^static unsigned short APFD[36] = {$/;"	v	file:
APFN	cephes/airy.c	/^static double APFN[9] = {$/;"	v	file:
APFN	cephes/airy.c	/^static unsigned short APFN[36] = {$/;"	v	file:
APGD	cephes/airy.c	/^static double APGD[11] = {$/;"	v	file:
APGD	cephes/airy.c	/^static unsigned short APGD[40] = {$/;"	v	file:
APGN	cephes/airy.c	/^static double APGN[11] = {$/;"	v	file:
APGN	cephes/airy.c	/^static unsigned short APGN[44] = {$/;"	v	file:
APN	cephes/airy.c	/^static double APN[8] = {$/;"	v	file:
APN	cephes/airy.c	/^static unsigned short APN[32] = {$/;"	v	file:
APPENDMODE	opencl/oclNbody/inc/shrUtils.h	/^    APPENDMODE = 4, \/\/ bit to set "file append" mode instead of "replace mode" on open$/;"	e	enum:LOGMODES
ARE_GENERIC_HEIGHT_LEARNING	ein.cpp	/^int ARE_GENERIC_HEIGHT_LEARNING(MachineState * ms) {$/;"	f
ARE_GENERIC_PICK_LEARNING	ein.cpp	/^int ARE_GENERIC_PICK_LEARNING(MachineState * ms) {$/;"	f
ARGCHECK	opencl/oclNbody/inc/shrUtils.h	132;"	d
ARMED	config.h	/^  ARMED = 0,$/;"	e	enum:__anon11
ARMWIDGET_H	qtgui/armwidget.h	2;"	d
ARM_POSE_DELTAS	ein_movement.cpp	2037;"	d	file:
ASYMP_FACTOR	cephes/beta.c	70;"	d	file:
AddParam	opencl/oclNbody/inc/param.h	/^          void AddParam(ParamBase *param)$/;"	f	class:ParamList
AddSolution	ikfast/ikfast.h	/^    virtual size_t AddSolution(const std::vector<IkSingleDOFSolutionBase<T> >& vinfos, const std::vector<int>& vfree)$/;"	f	class:ikfast::IkSolutionList
AiboPoseWord	word.h	/^  AiboPoseWord(EinAiboJoints _pose) {$/;"	f	class:AiboPoseWord
AiboPoseWord	word.h	/^class AiboPoseWord: public Word$/;"	c
AllocateNBodyArrays	opencl/oclNbody/src/oclBodySystemOpenclLaunch.cpp	/^    void AllocateNBodyArrays(cl_context cxGPUContext, cl_mem* vel, int numBodies, int dFlag)$/;"	f
AnimationState	config.h	/^struct AnimationState {$/;"	s
ArgsMap	opencl/oclNbody/inc/cmd_arg_reader.h	/^    typedef std::map< std::string, ValType >          ArgsMap;$/;"	t	class:CmdArgReader
ArgsMapIter	opencl/oclNbody/inc/cmd_arg_reader.h	/^    typedef ArgsMap::iterator                         ArgsMapIter;$/;"	t	class:CmdArgReader
ArmPoseWord	word.h	/^  ArmPoseWord(armPose _pose) {$/;"	f	class:ArmPoseWord
ArmPoseWord	word.h	/^class ArmPoseWord: public Word$/;"	c
ArmWidget	qtgui/armwidget.cpp	/^ArmWidget::ArmWidget(QWidget * parent, MachineState * _ms) : QWidget(parent),$/;"	f	class:ArmWidget
ArmWidget	qtgui/armwidget.h	/^class ArmWidget : public QWidget$/;"	c
B	cephes/gamma.c	/^static double B[] = {$/;"	v	file:
B	cephes/gamma.c	/^static unsigned short B[] = {$/;"	v	file:
B	cephes/i0.c	/^static double B[] = {$/;"	v	file:
B	cephes/i0.c	/^static unsigned short B[] = {$/;"	v	file:
B	cephes/i1.c	/^static double B[] = {$/;"	v	file:
B	cephes/i1.c	/^static unsigned short B[] = {$/;"	v	file:
B	cephes/k0.c	/^static double B[] = {$/;"	v	file:
B	cephes/k0.c	/^static unsigned short B[] = {$/;"	v	file:
B	cephes/k1.c	/^static double B[] = {$/;"	v	file:
B	cephes/k1.c	/^static unsigned short B[] = {$/;"	v	file:
B	cephes/spence.c	/^static double B[8] = {$/;"	v	file:
B	cephes/spence.c	/^static unsigned short B[32] = {$/;"	v	file:
B	cephes/zetac.c	/^static double B[10] = {$/;"	v	file:
B	cephes/zetac.c	/^static unsigned short B[40] = {$/;"	v	file:
BACKGROUND	gaussian_map.h	/^  BACKGROUND = 0,$/;"	e	enum:__anon36
BD	cephes/dawsn.c	/^static double BD[10] = {$/;"	v	file:
BD	cephes/dawsn.c	/^static unsigned short BD[40] = {$/;"	v	file:
BD16	cephes/airy.c	/^static double BD16[5] = {$/;"	v	file:
BD16	cephes/airy.c	/^static unsigned short BD16[20] = {$/;"	v	file:
BIG	cephes/expn.c	54;"	d	file:
BIG	cephes/jv.c	65;"	d	file:
BILIN_MAPCELL	gaussian_map.cpp	453;"	d	file:
BLOCKED	config.h	/^  BLOCKED = 1,$/;"	e	enum:__anon11
BN	cephes/dawsn.c	/^static double BN[11] = {$/;"	v	file:
BN	cephes/dawsn.c	/^static unsigned short BN[44] = {$/;"	v	file:
BN16	cephes/airy.c	/^static double BN16[5] = {$/;"	v	file:
BN16	cephes/airy.c	/^static unsigned short BN16[20] = {$/;"	v	file:
BODYSYSTEM_POSITION	opencl/oclNbody/inc/oclBodySystem.h	/^            BODYSYSTEM_POSITION,$/;"	e	enum:BodySystem::BodyArray
BODYSYSTEM_VELOCITY	opencl/oclNbody/inc/oclBodySystem.h	/^            BODYSYSTEM_VELOCITY,$/;"	e	enum:BodySystem::BodyArray
BOOST_ASSERT	cephes/scipy_iv.c	335;"	d	file:
BOOST_ASSERT	cephes/scipy_iv.c	337;"	d	file:
BPPD	cephes/airy.c	/^static double BPPD[5] = {$/;"	v	file:
BPPD	cephes/airy.c	/^static unsigned short BPPD[20] = {$/;"	v	file:
BPPN	cephes/airy.c	/^static double BPPN[5] = {$/;"	v	file:
BPPN	cephes/airy.c	/^static unsigned short BPPN[20] = {$/;"	v	file:
BUILDIR	cephes/Makefile	/^BUILDIR=$(ROOTDIR)$/;"	m
BodyArray	opencl/oclNbody/inc/oclBodySystem.h	/^        enum BodyArray $/;"	g	class:BodySystem
BodySystem	opencl/oclNbody/inc/oclBodySystem.h	/^        BodySystem() {} \/\/ default constructor$/;"	f	class:BodySystem
BodySystem	opencl/oclNbody/inc/oclBodySystem.h	/^        BodySystem(int numBodies) : m_numBodies(numBodies), m_bInitialized(false) {}$/;"	f	class:BodySystem
BodySystem	opencl/oclNbody/inc/oclBodySystem.h	/^    class BodySystem$/;"	c
BodySystemCPU	opencl/oclNbody/inc/oclBodySystemCpu.h	/^            BodySystemCPU() {} \/\/ default constructor$/;"	f	class:BodySystemCPU
BodySystemCPU	opencl/oclNbody/inc/oclBodySystemCpu.h	/^    class BodySystemCPU : public BodySystem$/;"	c
BodySystemCPU	opencl/oclNbody/src/oclBodySystemCpu.cpp	/^BodySystemCPU::BodySystemCPU(int numBodies)$/;"	f	class:BodySystemCPU
BodySystemOpenCL	opencl/oclNbody/inc/oclBodySystemOpencl.h	/^        BodySystemOpenCL() {}$/;"	f	class:BodySystemOpenCL
BodySystemOpenCL	opencl/oclNbody/inc/oclBodySystemOpencl.h	/^class BodySystemOpenCL : public BodySystem$/;"	c
BodySystemOpenCL	opencl/oclNbody/src/oclBodySystemOpencl.cpp	/^BodySystemOpenCL::BodySystemOpenCL(int numBodies, cl_device_id dev, cl_context ctx, cl_command_queue cmdq, $/;"	f	class:BodySystemOpenCL
BoxMemory	config.h	/^struct BoxMemory {$/;"	s
C	cephes/gamma.c	/^static double C[] = {$/;"	v	file:
C	cephes/gamma.c	/^static unsigned short C[] = {$/;"	v	file:
C1	cephes/ellpk.c	/^static double C1 = 1.3862943611198906188E0;	\/* log(4) *\/$/;"	v	file:
C1	cephes/ellpk.c	100;"	d	file:
C1	cephes/ellpk.c	133;"	d	file:
C1	cephes/ellpk.c	169;"	d	file:
C1	cephes/shichi.c	/^static double C1[] = {$/;"	v	file:
C1	cephes/shichi.c	/^static unsigned short C1[] = {$/;"	v	file:
C2	cephes/shichi.c	/^static double C2[] = {$/;"	v	file:
C2	cephes/shichi.c	/^static unsigned short C2[] = {$/;"	v	file:
CAMCAL_HYPERBOLIC	config.h	/^  CAMCAL_HYPERBOLIC = 2$/;"	e	enum:__anon31
CAMCAL_LINBOUNDED	config.h	/^  CAMCAL_LINBOUNDED = 0,$/;"	e	enum:__anon31
CAMCAL_QUADRATIC	config.h	/^  CAMCAL_QUADRATIC = 1,$/;"	e	enum:__anon31
CAPTURELINEEDIT_H	qtgui/capturelineedit.h	2;"	d
CBCR_HISTOGRAM	config.h	/^  CBCR_HISTOGRAM = 6$/;"	e	enum:__anon16
CBRT2	cephes/cbrt.c	/^static double CBRT2 = 1.2599210498948731647672;$/;"	v	file:
CBRT2I	cephes/cbrt.c	/^static double CBRT2I = 0.79370052598409973737585;$/;"	v	file:
CBRT4	cephes/cbrt.c	/^static double CBRT4 = 1.5874010519681994747517;$/;"	v	file:
CBRT4I	cephes/cbrt.c	/^static double CBRT4I = 0.62996052494743658238361;$/;"	v	file:
CC	cephes/Makefile	/^CC = $(CCC) $/;"	m
CCC	cephes/Makefile	/^CCC=gcc$/;"	m
CCFILES	opencl/oclNbody/Makefile	/^CCFILES		:= oclBodySystemCpu.cpp oclBodySystemOpencl.cpp oclBodySystemOpenclLaunch.cpp oclRenderParticles.cpp oclNbody.cpp oclNbodyGold.cpp paramgl.cpp param.cpp shrUtils.cpp cmd_arg_reader.cpp oclUtils.cpp$/;"	m
CD	cephes/dawsn.c	/^static double CD[5] = {$/;"	v	file:
CD	cephes/dawsn.c	/^static unsigned short CD[20] = {$/;"	v	file:
CD	cephes/sici.c	/^static double CD[] = {$/;"	v	file:
CD	cephes/sici.c	/^static unsigned short CD[] = {$/;"	v	file:
CELLREF_EQUALS_VEC3	gaussian_map.cpp	673;"	d	file:
CENTERED	config.h	/^  CENTERED = 1$/;"	e	enum:__anon24
CENTROID_LOCK	config.h	/^  CENTROID_LOCK = 1,$/;"	e	enum:__anon33
CEPHES_DEBUG	cephes/jv.c	51;"	d	file:
CEPHES_MCONF_H	cephes/mconf.h	66;"	d
CEPHES_NAMES_H	cephes/cephes_names.h	2;"	d
CF1_ik	cephes/scipy_iv.c	/^static int CF1_ik(double v, double x, double *fv)$/;"	f	file:
CF2_ik	cephes/scipy_iv.c	/^static int CF2_ik(double v, double x, double *Kv, double *Kv1)$/;"	f	file:
CFLAGS	cephes/Makefile	/^CFLAGS=$(OPT)$/;"	m
CLAMP	opencl/oclNbody/inc/shrUtils.h	110;"	d
CLEARANCE_DO_NOT_PURSUE	config.h	/^  CLEARANCE_DO_NOT_PURSUE = 0,$/;"	e	enum:__anon10
CLEARANCE_PURSUE	config.h	/^  CLEARANCE_PURSUE = 1,$/;"	e	enum:__anon10
CLEARANCE_SEARCH	config.h	/^  CLEARANCE_SEARCH = 2$/;"	e	enum:__anon10
CLOSELOG	opencl/oclNbody/inc/shrUtils.h	/^    CLOSELOG   = 32  \/\/ bit to close log file, if open, after any requested file write$/;"	e	enum:LOGMODES
CL_DEVICE_COMPUTE_CAPABILITY_MAJOR_NV	opencl/oclNbody/inc/oclUtils.h	38;"	d
CL_DEVICE_COMPUTE_CAPABILITY_MINOR_NV	opencl/oclNbody/inc/oclUtils.h	39;"	d
CL_DEVICE_GPU_OVERLAP_NV	opencl/oclNbody/inc/oclUtils.h	42;"	d
CL_DEVICE_INTEGRATED_MEMORY_NV	opencl/oclNbody/inc/oclUtils.h	44;"	d
CL_DEVICE_KERNEL_EXEC_TIMEOUT_NV	opencl/oclNbody/inc/oclUtils.h	43;"	d
CL_DEVICE_OPENCL_C_VERSION	opencl/oclNbody/src/oclUtils.cpp	136;"	d	file:
CL_DEVICE_REGISTERS_PER_BLOCK_NV	opencl/oclNbody/inc/oclUtils.h	40;"	d
CL_DEVICE_WARP_SIZE_NV	opencl/oclNbody/inc/oclUtils.h	41;"	d
CN	cephes/dawsn.c	/^static double CN[5] = {$/;"	v	file:
CN	cephes/dawsn.c	/^static unsigned short CN[20] = {$/;"	v	file:
CN	cephes/sici.c	/^static double CN[] = {$/;"	v	file:
CN	cephes/sici.c	/^static unsigned short CN[] = {$/;"	v	file:
CODE	ein_words.h	33;"	d
CONFIG_GETTER_DOUBLE	ein_words.h	220;"	d
CONFIG_GETTER_INT	ein_words.h	191;"	d
CONFIG_GETTER_POSE	ein_words.h	256;"	d
CONFIG_GETTER_STRING	ein_words.h	238;"	d
CONFIG_SETTER_DOUBLE	ein_words.h	228;"	d
CONFIG_SETTER_ENUM	ein_words.h	210;"	d
CONFIG_SETTER_INT	ein_words.h	199;"	d
CONFIG_SETTER_POSE	ein_words.h	264;"	d
CONFIG_SETTER_STRING	ein_words.h	246;"	d
CONSOLE	word.h	581;"	d
CONSOLE_ERROR	word.h	588;"	d
CONSUME_EEPOSE	ein_words.h	43;"	d
CRANE	config.h	/^  CRANE = 3,$/;"	e	enum:__anon15
CV_MODE_NORMAL	qtgui/window_QT.h	/^enum { CV_MODE_NORMAL = 0, CV_MODE_OPENGL = 1 };$/;"	e	enum:__anon1
CV_MODE_OPENGL	qtgui/window_QT.h	/^enum { CV_MODE_NORMAL = 0, CV_MODE_OPENGL = 1 };$/;"	e	enum:__anon1
CaptureLineEdit	qtgui/capturelineedit.h	/^class CaptureLineEdit : public QLineEdit$/;"	c
Cleanup	opencl/ein_opencl.cpp	/^void Cleanup(int iExitCode)$/;"	f
Cleanup	opencl/oclNbody/src/oclNbody.cpp	/^void Cleanup(int iExitCode)$/;"	f
Clear	ikfast/ikfast.h	/^    virtual void Clear() {$/;"	f	class:ikfast::IkSolutionList
CmdArgReader	opencl/oclNbody/inc/cmd_arg_reader.h	/^class CmdArgReader $/;"	c
CmdArgReader	opencl/oclNbody/src/cmd_arg_reader.cpp	/^CmdArgReader::CmdArgReader() :$/;"	f	class:CmdArgReader
CollisionDetection	config.h	/^struct CollisionDetection {$/;"	s
CommentWord	word.h	/^  CommentWord(string _s) {$/;"	f	class:CommentWord
CommentWord	word.h	/^class CommentWord: public Word$/;"	c
CompareResults	opencl/oclNbody/src/oclNbody.cpp	/^bool CompareResults(int numBodies)$/;"	f
CompoundWord	word.h	/^  CompoundWord() {$/;"	f	class:CompoundWord
CompoundWord	word.h	/^  CompoundWord(string description) {$/;"	f	class:CompoundWord
CompoundWord	word.h	/^class CompoundWord : public Word {$/;"	c
ComputeFk	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {$/;"	f	namespace:IKFAST_NAMESPACE
ComputeFk	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {$/;"	f	namespace:IKFAST_NAMESPACE
ComputeFkFn	ikfast/ikfast.h	/^    typedef void (*ComputeFkFn)(const T*, T*, T*);$/;"	t	class:ikfast::IkFastFunctions
ComputeIk	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {$/;"	f	namespace:IKFAST_NAMESPACE
ComputeIk	ikfast/baxter_left_arm_ikfast_solver.cpp	/^bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {$/;"	f	class:IKFAST_NAMESPACE::IKSolver
ComputeIk	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {$/;"	f	namespace:IKFAST_NAMESPACE
ComputeIk	ikfast/baxter_right_arm_ikfast_solver.cpp	/^bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {$/;"	f	class:IKFAST_NAMESPACE::IKSolver
ComputeIkFn	ikfast/ikfast.h	/^    typedef bool (*ComputeIkFn)(const T*, const T*, const T*, IkSolutionListBase<T>&);$/;"	t	class:ikfast::IkFastFunctions
ComputePerfStats	opencl/oclNbody/src/oclNbody.cpp	/^void ComputePerfStats(double &dGigaInteractionsPerSecond, double &dGigaFlops, double dSeconds, int iterations)$/;"	f
ConstArgsMapIter	opencl/oclNbody/inc/cmd_arg_reader.h	/^    typedef ArgsMap::const_iterator                   ConstArgsMapIter;$/;"	t	class:CmdArgReader
ConvertSMVer2Cores	opencl/oclNbody/inc/shrUtils.h	/^inline int ConvertSMVer2Cores(int major, int minor)$/;"	f
CopyArrayFromDevice	opencl/oclNbody/src/oclBodySystemOpenclLaunch.cpp	/^    void CopyArrayFromDevice(cl_command_queue cqCommandQueue, float *host, cl_mem device, cl_mem pboCL, int numBodies, bool bDouble)$/;"	f
CopyArrayToDevice	opencl/oclNbody/src/oclBodySystemOpenclLaunch.cpp	/^    void CopyArrayToDevice(cl_command_queue cqCommandQueue, cl_mem device, const float* host, int numBodies, bool bDouble)$/;"	f
CreateProgramAndKernel	opencl/oclNbody/src/oclBodySystemOpenclLaunch.cpp	/^    int CreateProgramAndKernel(cl_context cxGPUContext, cl_device_id* cdDevices, const char *kernel_name, cl_kernel *kernel, bool bDouble)$/;"	f
D1	distributions.c	775;"	d	file:
D1	distributions.c	829;"	d	file:
D2	distributions.c	776;"	d	file:
D2	distributions.c	830;"	d	file:
DEBUG	cephes/struve.c	38;"	d	file:
DEFAULTLOGFILE	opencl/oclNbody/inc/shrUtils.h	86;"	d
DEMOTIME	opencl/oclNbody/src/oclNbody.cpp	120;"	d	file:
DENORMAL	cephes/mconf.h	150;"	d
DESCRIPTION	qtgui/stackmodel.cpp	/^  DESCRIPTION = 2,$/;"	e	enum:__anon5	file:
DISCREPANCY_DOT	config.h	/^  DISCREPANCY_DOT = 1,$/;"	e	enum:__anon9
DISCREPANCY_NOISY_OR	config.h	/^  DISCREPANCY_NOISY_OR = 2,$/;"	e	enum:__anon9
DISCREPANCY_POINT	config.h	/^  DISCREPANCY_POINT = 0,$/;"	e	enum:__anon9
DOG_READ_VAR	ein_aibo.cpp	106;"	d	file:
DOG_SEND_INDICATOR_VAR	ein_aibo.cpp	1107;"	d	file:
DOG_SEND_JOINT_DGAIN_VAR	ein_aibo.cpp	1106;"	d	file:
DOG_SEND_JOINT_IGAIN_VAR	ein_aibo.cpp	1105;"	d	file:
DOG_SEND_JOINT_PGAIN_VAR	ein_aibo.cpp	1104;"	d	file:
DOG_SEND_JOINT_VAR	ein_aibo.cpp	1103;"	d	file:
DOMAIN	cephes/mconf.h	92;"	d
DR1	cephes/j0.c	/^static double DR1 = 5.78318596294678452118E0;$/;"	v	file:
DR1	cephes/j0.c	379;"	d	file:
DR1	cephes/j0.c	388;"	d	file:
DR1	cephes/j0.c	397;"	d	file:
DR2	cephes/j0.c	/^static double DR2 = 3.04712623436620863991E1;$/;"	v	file:
DR2	cephes/j0.c	382;"	d	file:
DR2	cephes/j0.c	391;"	d	file:
DR2	cephes/j0.c	400;"	d	file:
DZ1	cephes/j1.c	/^static unsigned short DZ1[] = { 0041152, 0164532, 0006114, 0010540 };$/;"	v	file:
DZ1	cephes/j1.c	/^static unsigned short DZ1[] = { 0x402d, 0x5d2b, 0x4189, 0x822c };$/;"	v	file:
DZ1	cephes/j1.c	/^static unsigned short DZ1[] = { 0x822c, 0x4189, 0x5d2b, 0x402d };$/;"	v	file:
DZ2	cephes/j1.c	/^static unsigned short DZ2[] = { 0041504, 0157663, 0001625, 0020621 };$/;"	v	file:
DZ2	cephes/j1.c	/^static unsigned short DZ2[] = { 0x4048, 0x9bf6, 0x6072, 0xa432 };$/;"	v	file:
DZ2	cephes/j1.c	/^static unsigned short DZ2[] = { 0xa432, 0x6072, 0x9bf6, 0x4048 };$/;"	v	file:
Decrement	opencl/oclNbody/inc/param.h	/^          void Decrement()$/;"	f	class:Param
Decrement	opencl/oclNbody/inc/param.h	/^          void Decrement()$/;"	f	class:ParamList
DefaultEinViewPort	qtgui/window_QT.cpp	/^DefaultEinViewPort::DefaultEinViewPort(QWidget* arg, int keep_ratio) : QGraphicsView(arg)$/;"	f	class:DefaultEinViewPort
DefaultEinViewPort	qtgui/window_QT.h	/^class DefaultEinViewPort : public QGraphicsView, public EinViewPort$/;"	c
DeleteNBodyArrays	opencl/oclNbody/src/oclBodySystemOpenclLaunch.cpp	/^    void DeleteNBodyArrays(cl_mem vel[2])$/;"	f
DisplayGL	opencl/oclNbody/src/oclNbody.cpp	/^void DisplayGL()$/;"	f
DisplayMode	opencl/oclNbody/inc/oclRenderParticles.h	/^            enum DisplayMode$/;"	g	class:ParticleRenderer
DoubleWord	word.h	/^  DoubleWord(double _n) {$/;"	f	class:DoubleWord
DoubleWord	word.h	/^class DoubleWord: public Word$/;"	c
EDOM	cephes/mconf.h	101;"	d
EEPOSITION	config.h	/^  EEPOSITION = 0,$/;"	e	enum:__anon28
EINWINDOW_H	qtgui/einwindow.h	2;"	d
EIN_EVENT_FLAG_ALTKEY	qtgui/window_QT.h	/^    EIN_EVENT_FLAG_ALTKEY    =32$/;"	e	enum:__anon3
EIN_EVENT_FLAG_CTRLKEY	qtgui/window_QT.h	/^    EIN_EVENT_FLAG_CTRLKEY   =8,$/;"	e	enum:__anon3
EIN_EVENT_FLAG_LBUTTON	qtgui/window_QT.h	/^    EIN_EVENT_FLAG_LBUTTON   =1,$/;"	e	enum:__anon3
EIN_EVENT_FLAG_MBUTTON	qtgui/window_QT.h	/^    EIN_EVENT_FLAG_MBUTTON   =4,$/;"	e	enum:__anon3
EIN_EVENT_FLAG_RBUTTON	qtgui/window_QT.h	/^    EIN_EVENT_FLAG_RBUTTON   =2,$/;"	e	enum:__anon3
EIN_EVENT_FLAG_SHIFTKEY	qtgui/window_QT.h	/^    EIN_EVENT_FLAG_SHIFTKEY  =16,$/;"	e	enum:__anon3
EIN_EVENT_LBUTTONDBLCLK	qtgui/window_QT.h	/^    EIN_EVENT_LBUTTONDBLCLK  =7,$/;"	e	enum:__anon2
EIN_EVENT_LBUTTONDOWN	qtgui/window_QT.h	/^    EIN_EVENT_LBUTTONDOWN    =1,$/;"	e	enum:__anon2
EIN_EVENT_LBUTTONUP	qtgui/window_QT.h	/^    EIN_EVENT_LBUTTONUP      =4,$/;"	e	enum:__anon2
EIN_EVENT_MBUTTONDBLCLK	qtgui/window_QT.h	/^    EIN_EVENT_MBUTTONDBLCLK  =9,$/;"	e	enum:__anon2
EIN_EVENT_MBUTTONDOWN	qtgui/window_QT.h	/^    EIN_EVENT_MBUTTONDOWN    =3,$/;"	e	enum:__anon2
EIN_EVENT_MBUTTONUP	qtgui/window_QT.h	/^    EIN_EVENT_MBUTTONUP      =6,$/;"	e	enum:__anon2
EIN_EVENT_MOUSEHWHEEL	qtgui/window_QT.h	/^    EIN_EVENT_MOUSEHWHEEL    =11$/;"	e	enum:__anon2
EIN_EVENT_MOUSEMOVE	qtgui/window_QT.h	/^    EIN_EVENT_MOUSEMOVE      =0,$/;"	e	enum:__anon2
EIN_EVENT_MOUSEWHEEL	qtgui/window_QT.h	/^    EIN_EVENT_MOUSEWHEEL     =10,$/;"	e	enum:__anon2
EIN_EVENT_RBUTTONDBLCLK	qtgui/window_QT.h	/^    EIN_EVENT_RBUTTONDBLCLK  =8,$/;"	e	enum:__anon2
EIN_EVENT_RBUTTONDOWN	qtgui/window_QT.h	/^    EIN_EVENT_RBUTTONDOWN    =2,$/;"	e	enum:__anon2
EIN_EVENT_RBUTTONUP	qtgui/window_QT.h	/^    EIN_EVENT_RBUTTONUP      =5,$/;"	e	enum:__anon2
EIN_GUI_EXPANDED	qtgui/window_QT.h	/^    EIN_GUI_EXPANDED         = 0x00000000, \/\/status bar and tool bar$/;"	e	enum:__anon4
EIN_GUI_NORMAL	qtgui/window_QT.h	/^    EIN_GUI_NORMAL           = 0x00000010, \/\/old fashious way$/;"	e	enum:__anon4
EIN_WINDOW_AUTOSIZE	qtgui/window_QT.h	/^    EIN_WINDOW_AUTOSIZE     = 0x00000001, \/\/the user cannot resize the window, the size is constrainted by the image displayed$/;"	e	enum:__anon4
EIN_WINDOW_FREERATIO	qtgui/window_QT.h	/^    EIN_WINDOW_FREERATIO    = 0x00000100,\/\/the image expends as much as it can (no ratio constraint)$/;"	e	enum:__anon4
EIN_WINDOW_FULLSCREEN	qtgui/window_QT.h	/^    EIN_WINDOW_FULLSCREEN   = 1,\/\/change the window to fullscreen$/;"	e	enum:__anon4
EIN_WINDOW_KEEPRATIO	qtgui/window_QT.h	/^    EIN_WINDOW_KEEPRATIO    = 0x00000000\/\/the ration image is respected.$/;"	e	enum:__anon4
EIN_WINDOW_NORMAL	qtgui/window_QT.h	/^    EIN_WINDOW_NORMAL       = 0x00000000, \/\/the user can resize the window (no constraint)  \/ also use to switch a fullscreen window to a normal size$/;"	e	enum:__anon4
EIN_WINDOW_OPENGL	qtgui/window_QT.h	/^    EIN_WINDOW_OPENGL       = 0x00001000, \/\/window with opengl support$/;"	e	enum:__anon4
EIN_WND_PROP_ASPECTRATIO	qtgui/window_QT.h	/^    EIN_WND_PROP_ASPECTRATIO= 2, \/\/to change\/get window's aspectratio property$/;"	e	enum:__anon4
EIN_WND_PROP_AUTOSIZE	qtgui/window_QT.h	/^    EIN_WND_PROP_AUTOSIZE   = 1, \/\/to change\/get window's autosize property$/;"	e	enum:__anon4
EIN_WND_PROP_FULLSCREEN	qtgui/window_QT.h	/^    EIN_WND_PROP_FULLSCREEN = 0, \/\/to change\/get window's fullscreen property$/;"	e	enum:__anon4
EIN_WND_PROP_OPENGL	qtgui/window_QT.h	/^    EIN_WND_PROP_OPENGL     = 3, \/\/to change\/get window's opengl support$/;"	e	enum:__anon4
EMPTY	config.h	/^  EMPTY = 0,$/;"	e	enum:__anon15
END_WORD	ein_words.h	38;"	d
EP	cephes/unity.c	/^static double EP[3] = {$/;"	v	file:
EPS	cephes/hyp2f1.c	74;"	d	file:
EPS	cephes/hyp2f1.c	79;"	d	file:
EPS	cephes/hyp2f1.c	84;"	d	file:
EPS	cephes/hyp2f1.c	89;"	d	file:
EPS	cephes/tukey.c	14;"	d	file:
EPS2	cephes/hyp2f1.c	75;"	d	file:
EPS2	cephes/hyp2f1.c	80;"	d	file:
EPS2	cephes/hyp2f1.c	85;"	d	file:
EPS2	cephes/hyp2f1.c	90;"	d	file:
EPSILON	ein.h	7;"	d
EQ	cephes/unity.c	/^static double EQ[4] = {$/;"	v	file:
ERANGE	cephes/mconf.h	102;"	d
ERRORMSG	opencl/oclNbody/inc/shrUtils.h	/^    ERRORMSG   = 16, \/\/ bit to signal "pre-pend Error" $/;"	e	enum:LOGMODES
ETHRESH	cephes/hyp2f1.c	93;"	d	file:
EUL	cephes/expn.c	53;"	d	file:
EUL	cephes/kn.c	82;"	d	file:
EULER	cephes/const.c	/^double EULER = 0.577215664901532860606512090082402;	\/* Euler constant *\/$/;"	v
EXECUTABLE	opencl/oclNbody/Makefile	/^EXECUTABLE	:= oclNbody$/;"	m
EePoseWord	word.h	/^  EePoseWord(eePose _pose) {$/;"	f	class:EePoseWord
EePoseWord	word.h	/^class EePoseWord: public Word$/;"	c
EinAiboConfig	ein_aibo.h	/^class EinAiboConfig {$/;"	c
EinAiboIndicators	ein_aibo.h	/^class EinAiboIndicators {$/;"	c
EinAiboJoints	ein_aibo.h	/^class EinAiboJoints {$/;"	c
EinAiboSensors	ein_aibo.h	/^class EinAiboSensors {$/;"	c
EinConfig	config.h	/^class EinConfig {$/;"	c
EinGpuConfig	opencl/ein_opencl.cpp	/^  EinGpuConfig() {$/;"	f	struct:EinGpuConfig
EinGpuConfig	opencl/ein_opencl.cpp	/^struct EinGpuConfig {$/;"	s	file:
EinMouseCallback	qtgui/window_QT.h	/^typedef void (*EinMouseCallback )(int event, int x, int y, int flags, void* param);$/;"	t
EinOpenGlDrawCallback	qtgui/window_QT.h	/^typedef void (CV_CDECL *EinOpenGlDrawCallback)(void* userdata);$/;"	t
EinViewPort	qtgui/window_QT.h	/^class EinViewPort$/;"	c
EinWindow	qtgui/einwindow.cpp	/^EinWindow::EinWindow(QWidget *parent, MachineState * _ms) :$/;"	f	class:EinWindow
EinWindow	qtgui/einwindow.h	/^class EinWindow : public QMainWindow$/;"	c
FAILURE	config.h	/^  FAILURE = 0,$/;"	e	enum:__anon22
FD4	cephes/sici.c	/^static double FD4[] = {$/;"	v	file:
FD4	cephes/sici.c	/^static unsigned short FD4[] = {$/;"	v	file:
FD8	cephes/sici.c	/^static double FD8[] = {$/;"	v	file:
FD8	cephes/sici.c	/^static unsigned short FD8[] = {$/;"	v	file:
FIXATE_CURRENT	config.h	/^  FIXATE_CURRENT = 1$/;"	e	enum:__anon32
FIXATE_STREAM	config.h	/^  FIXATE_STREAM = 0,$/;"	e	enum:__anon32
FIXED_CLASS_ACCUMULATED	config.h	/^  FIXED_CLASS_ACCUMULATED = 2,$/;"	e	enum:__anon25
FIXED_CLASS_ACCUMULATED_NOSYN	config.h	/^  FIXED_CLASS_ACCUMULATED_NOSYN = 4,$/;"	e	enum:__anon25
FIXED_CLASS_CONTINUOUS	config.h	/^  FIXED_CLASS_CONTINUOUS = 3,$/;"	e	enum:__anon25
FIXED_CLASS_CONTINUOUS_NOSYN	config.h	/^  FIXED_CLASS_CONTINUOUS_NOSYN = 5$/;"	e	enum:__anon25
FN4	cephes/sici.c	/^static double FN4[] = {$/;"	v	file:
FN4	cephes/sici.c	/^static unsigned short FN4[] = {$/;"	v	file:
FN8	cephes/sici.c	/^static double FN8[] = {$/;"	v	file:
FN8	cephes/sici.c	/^static unsigned short FN8[] = {$/;"	v	file:
FOCUSED_CLASS	config.h	/^  FOCUSED_CLASS = 0,$/;"	e	enum:__anon26
FPSTIME	opencl/oclNbody/src/oclNbody.cpp	122;"	d	file:
FUDGE_FACTOR	opencl/oclNbody/src/oclBodySystemCpu.cpp	/^const float FUDGE_FACTOR = 0.025f;$/;"	v
FUNCTIME	opencl/oclNbody/src/oclNbody.cpp	121;"	d	file:
GAUSSIANMAPWIDGET_H	qtgui/gaussianmapwidget.h	2;"	d
GD4	cephes/sici.c	/^static double GD4[] = {$/;"	v	file:
GD4	cephes/sici.c	/^static unsigned short GD4[] = {$/;"	v	file:
GD8	cephes/sici.c	/^static double GD8[] = {$/;"	v	file:
GD8	cephes/sici.c	/^static unsigned short GD8[] = {$/;"	v	file:
GET_ARG	ein_words.h	70;"	d
GET_BOOLEAN_ARG	ein_words.h	128;"	d
GET_INT_ARG	ein_words.h	154;"	d
GET_NUMERIC_ARG	ein_words.h	95;"	d
GET_STRING_ARG	ein_words.h	140;"	d
GET_WORD_ARG	ein_words.h	168;"	d
GET_WORD_ARG_LIST	ein_words.h	342;"	d
GET_WORD_ARG_VALUE_LIST	ein_words.h	300;"	d
GL_COORD_REPLACE_ARB	opencl/oclNbody/src/oclRenderParticles.cpp	19;"	d	file:
GL_POINT_SPRITE_ARB	opencl/oclNbody/src/oclRenderParticles.cpp	18;"	d	file:
GL_VERTEX_PROGRAM_POINT_SIZE_NV	opencl/oclNbody/src/oclRenderParticles.cpp	20;"	d	file:
GN4	cephes/sici.c	/^static double GN4[] = {$/;"	v	file:
GN4	cephes/sici.c	/^static unsigned short GN4[] = {$/;"	v	file:
GN8	cephes/sici.c	/^static double GN8[] = {$/;"	v	file:
GN8	cephes/sici.c	/^static unsigned short GN8[] = {$/;"	v	file:
GRADIENT	config.h	/^  GRADIENT = 4,$/;"	e	enum:__anon16
GRASP_3D	config.h	/^  GRASP_3D$/;"	e	enum:__anon21
GRASP_CRANE	config.h	/^  GRASP_CRANE,$/;"	e	enum:__anon21
GRID_COARSE	config.h	421;"	d
GRID_COARSER	config.h	420;"	d
GRID_EVEN_COARSER	config.h	419;"	d
GRID_FINE	config.h	423;"	d
GRID_MEDIUM	config.h	422;"	d
GRID_VERY_FINE	config.h	424;"	d
GSL_UTIL1_H	slu/gsl_utilities.h	2;"	d
Gamma	cephes/cephes_names.h	29;"	d
Gamma	cephes/gamma.c	/^double Gamma(double x)$/;"	f
GaussianMap	gaussian_map.cpp	/^GaussianMap::GaussianMap(MachineState * ims, int w, int h, double cw, eePose pose) {$/;"	f	class:GaussianMap
GaussianMap	gaussian_map.h	/^class GaussianMap {$/;"	c
GaussianMapCell	gaussian_map.h	/^} GaussianMapCell;$/;"	t	typeref:struct:_GaussianMapCell
GaussianMapChannel	gaussian_map.h	/^} GaussianMapChannel;$/;"	t	typeref:struct:_GaussianMapChannel
GaussianMapGpu	opencl/ein_opencl.cpp	/^  GaussianMapGpu() { cpuReflection = NULL; }$/;"	f	struct:GaussianMapGpu
GaussianMapGpu	opencl/ein_opencl.cpp	/^  GaussianMapGpu(shared_ptr<GaussianMap> _cpuReflection, shared_ptr<EinGpuConfig> _gConfig) { $/;"	f	struct:GaussianMapGpu
GaussianMapGpu	opencl/ein_opencl.cpp	/^struct GaussianMapGpu {$/;"	s	file:
GaussianMapGpu	opencl/ein_opencl.cpp	/^typedef struct GaussianMapGpu GaussianMapGpu;$/;"	t	typeref:struct:GaussianMapGpu	file:
GaussianMapWidget	qtgui/gaussianmapwidget.cpp	/^GaussianMapWidget::GaussianMapWidget(QWidget * parent, shared_ptr<MachineState> _ms) : QWidget(parent),$/;"	f	class:GaussianMapWidget
GaussianMapWidget	qtgui/gaussianmapwidget.h	/^class GaussianMapWidget : public QWidget$/;"	c
GetCurrent	opencl/oclNbody/inc/param.h	/^          ParamBase *GetCurrent()$/;"	f	class:ParamList
GetDOF	ikfast/ikfast.h	/^    virtual const int GetDOF() const {$/;"	f	class:ikfast::IkSolution
GetFloatValue	opencl/oclNbody/inc/param.h	/^          virtual float GetFloatValue() { return (float) *m_ptr; }$/;"	f	class:Param
GetFloatValue	opencl/oclNbody/inc/param.h	/^          virtual float GetFloatValue() { return 0.0f; }$/;"	f	class:ParamList
GetFree	ikfast/ikfast.h	/^    virtual const std::vector<int>& GetFree() const {$/;"	f	class:ikfast::IkSolution
GetFreeParameters	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IKFAST_API int* GetFreeParameters() { static int freeparams[] = {5}; return freeparams; }$/;"	f	namespace:IKFAST_NAMESPACE
GetFreeParameters	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IKFAST_API int* GetFreeParameters() { static int freeparams[] = {5}; return freeparams; }$/;"	f	namespace:IKFAST_NAMESPACE
GetFreeParametersFn	ikfast/ikfast.h	/^    typedef int* (*GetFreeParametersFn)();$/;"	t	class:ikfast::IkFastFunctions
GetIkFastVersion	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }$/;"	f	namespace:IKFAST_NAMESPACE
GetIkFastVersion	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }$/;"	f	namespace:IKFAST_NAMESPACE
GetIkFastVersionFn	ikfast/ikfast.h	/^    typedef const char* (*GetIkFastVersionFn)();$/;"	t	class:ikfast::IkFastFunctions
GetIkRealSize	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }$/;"	f	namespace:IKFAST_NAMESPACE
GetIkRealSize	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }$/;"	f	namespace:IKFAST_NAMESPACE
GetIkRealSizeFn	ikfast/ikfast.h	/^    typedef int (*GetIkRealSizeFn)();$/;"	t	class:ikfast::IkFastFunctions
GetIkType	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IKFAST_API int GetIkType() { return 0x67000001; }$/;"	f	namespace:IKFAST_NAMESPACE
GetIkType	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IKFAST_API int GetIkType() { return 0x67000001; }$/;"	f	namespace:IKFAST_NAMESPACE
GetIkTypeFn	ikfast/ikfast.h	/^    typedef int (*GetIkTypeFn)();$/;"	t	class:ikfast::IkFastFunctions
GetIntValue	opencl/oclNbody/inc/param.h	/^          virtual int GetIntValue() { return (int) *m_ptr; }$/;"	f	class:Param
GetIntValue	opencl/oclNbody/inc/param.h	/^          virtual int GetIntValue() { return 0; }$/;"	f	class:ParamList
GetKinematicsHash	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IKFAST_API const char* GetKinematicsHash() { return "<robot:genericrobot - baxter (92388cabb79ce4a7e4498b08e3e28901)>"; }$/;"	f	namespace:IKFAST_NAMESPACE
GetKinematicsHash	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IKFAST_API const char* GetKinematicsHash() { return "<robot:genericrobot - baxter (4d3b297e057bd5f20da8f53b5e6cc20b)>"; }$/;"	f	namespace:IKFAST_NAMESPACE
GetKinematicsHashFn	ikfast/ikfast.h	/^    typedef const char* (*GetKinematicsHashFn)();$/;"	t	class:ikfast::IkFastFunctions
GetName	opencl/oclNbody/inc/param.h	/^          std::string *GetName() { return &m_name; }$/;"	f	class:ParamBase
GetNumFreeParameters	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IKFAST_API int GetNumFreeParameters() { return 1; }$/;"	f	namespace:IKFAST_NAMESPACE
GetNumFreeParameters	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IKFAST_API int GetNumFreeParameters() { return 1; }$/;"	f	namespace:IKFAST_NAMESPACE
GetNumFreeParametersFn	ikfast/ikfast.h	/^    typedef int (*GetNumFreeParametersFn)();$/;"	t	class:ikfast::IkFastFunctions
GetNumJoints	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IKFAST_API int GetNumJoints() { return 7; }$/;"	f	namespace:IKFAST_NAMESPACE
GetNumJoints	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IKFAST_API int GetNumJoints() { return 7; }$/;"	f	namespace:IKFAST_NAMESPACE
GetNumJointsFn	ikfast/ikfast.h	/^    typedef int (*GetNumJointsFn)();$/;"	t	class:ikfast::IkFastFunctions
GetNumSolutions	ikfast/ikfast.h	/^    virtual size_t GetNumSolutions() const {$/;"	f	class:ikfast::IkSolutionList
GetParam	opencl/oclNbody/inc/param.h	/^          ParamBase *GetParam(char *name)$/;"	f	class:ParamList
GetParam	opencl/oclNbody/inc/param.h	/^          ParamBase *GetParam(int i)$/;"	f	class:ParamList
GetPercentage	opencl/oclNbody/inc/param.h	/^          float GetPercentage() { return 0.0f; }$/;"	f	class:ParamList
GetPercentage	opencl/oclNbody/inc/param.h	/^          float GetPercentage()$/;"	f	class:Param
GetSize	opencl/oclNbody/inc/param.h	/^          int GetSize() { return (int)m_params.size(); }$/;"	f	class:ParamList
GetSolution	ikfast/ikfast.h	/^    virtual const IkSolutionBase<T>& GetSolution(size_t index) const$/;"	f	class:ikfast::IkSolutionList
GetSolution	ikfast/ikfast.h	/^    virtual void GetSolution(T* solution, const T* freevalues) const {$/;"	f	class:ikfast::IkSolution
GetSolution	ikfast/ikfast.h	/^    virtual void GetSolution(std::vector<T>& solution, const std::vector<T>& freevalues) const {$/;"	f	class:ikfast::IkSolution
GetSolution	ikfast/ikfast.h	/^    virtual void GetSolution(std::vector<T>& solution, const std::vector<T>& freevalues) const {$/;"	f	class:ikfast::IkSolutionBase
GetSolutionIndices	ikfast/ikfast.h	/^    virtual void GetSolutionIndices(std::vector<unsigned int>& v) const {$/;"	f	class:ikfast::IkSolution
GetValue	opencl/oclNbody/inc/param.h	/^          T GetValue() const { return *m_ptr; }$/;"	f	class:Param
GetValueString	opencl/oclNbody/inc/param.h	/^          std::string GetValueString()$/;"	f	class:Param
GetValueString	opencl/oclNbody/inc/param.h	/^          std::string GetValueString()$/;"	f	class:ParamList
Grasp	config.h	/^struct Grasp {$/;"	s
HAND	config.h	/^  HAND = 0,$/;"	e	enum:__anon14
HANDING	config.h	/^  HANDING = 4$/;"	e	enum:__anon12
HAVE_QT_OPENGL	qtgui/window_QT.h	43;"	d
HDASHLINE	opencl/oclNbody/inc/shrUtils.h	98;"	d
HISTOGRAM_CLASSIFY	config.h	/^  HISTOGRAM_CLASSIFY = 0,$/;"	e	enum:__anon25
HOLD	config.h	/^  HOLD = 3,$/;"	e	enum:__anon14
HOVERING	config.h	/^  HOVERING = 3,$/;"	e	enum:__anon11
IDLING	config.h	/^  IDLING = 0,$/;"	e	enum:__anon12
IDX	qtgui/stackmodel.cpp	/^  IDX = 0,$/;"	e	enum:__anon5	file:
IK2PI	ikfast/baxter_left_arm_ikfast_solver.cpp	62;"	d	file:
IK2PI	ikfast/baxter_right_arm_ikfast_solver.cpp	62;"	d	file:
IKFAST	config.h	/^  IKFAST,$/;"	e	enum:__anon19
IKFASTDEBUG	config.h	/^  IKFASTDEBUG$/;"	e	enum:__anon19
IKFAST_ALIGNED16	ikfast/baxter_left_arm_ikfast_solver.cpp	57;"	d	file:
IKFAST_ALIGNED16	ikfast/baxter_left_arm_ikfast_solver.cpp	59;"	d	file:
IKFAST_ALIGNED16	ikfast/baxter_right_arm_ikfast_solver.cpp	57;"	d	file:
IKFAST_ALIGNED16	ikfast/baxter_right_arm_ikfast_solver.cpp	59;"	d	file:
IKFAST_API	ikfast/ikfast.h	271;"	d
IKFAST_ASSERT	ikfast/baxter_left_arm_ikfast_solver.cpp	52;"	d	file:
IKFAST_ASSERT	ikfast/baxter_right_arm_ikfast_solver.cpp	52;"	d	file:
IKFAST_ATAN2_MAGTHRESH	ikfast/baxter_left_arm_ikfast_solver.cpp	104;"	d	file:
IKFAST_ATAN2_MAGTHRESH	ikfast/baxter_right_arm_ikfast_solver.cpp	104;"	d	file:
IKFAST_COMPILE_ASSERT	ikfast/baxter_left_arm_ikfast_solver.cpp	25;"	d	file:
IKFAST_COMPILE_ASSERT	ikfast/baxter_right_arm_ikfast_solver.cpp	25;"	d	file:
IKFAST_HAS_LIBRARY	ikfast/baxter_left_arm_ikfast_solver.cpp	20;"	d	file:
IKFAST_HAS_LIBRARY	ikfast/baxter_right_arm_ikfast_solver.cpp	20;"	d	file:
IKFAST_HEADER_COMMON	ikfast/ikfast.h	38;"	d
IKFAST_NAMESPACE	ein_ik.cpp	6;"	d	file:
IKFAST_NAMESPACE	ein_movement.cpp	2;"	d	file:
IKFAST_NAMESPACE	ikfast/baxter_left_arm_ikfast_solver.cpp	/^namespace IKFAST_NAMESPACE {$/;"	n	file:
IKFAST_NAMESPACE	ikfast/baxter_right_arm_ikfast_solver.cpp	/^namespace IKFAST_NAMESPACE {$/;"	n	file:
IKFAST_NAMESPACE	ikfast/ikfast.h	/^namespace IKFAST_NAMESPACE {$/;"	n
IKFAST_NAMESPACE	ikfast/ikfast_wrapper_left.h	2;"	d
IKFAST_NAMESPACE	ikfast/ikfast_wrapper_right.h	2;"	d
IKFAST_NO_MAIN	ikfast/ikfast_wrapper.cpp	4;"	d	file:
IKFAST_SINCOS_THRESH	ikfast/baxter_left_arm_ikfast_solver.cpp	99;"	d	file:
IKFAST_SINCOS_THRESH	ikfast/baxter_right_arm_ikfast_solver.cpp	99;"	d	file:
IKFAST_SOLUTION_THRESH	ikfast/baxter_left_arm_ikfast_solver.cpp	109;"	d	file:
IKFAST_SOLUTION_THRESH	ikfast/baxter_right_arm_ikfast_solver.cpp	109;"	d	file:
IKFAST_SOLVER_CPP	ein_ik.cpp	7;"	d	file:
IKFAST_SOLVER_CPP	ein_movement.cpp	3;"	d	file:
IKFAST_SOLVER_CPP	ikfast/ikfast_wrapper_left.h	3;"	d
IKFAST_SOLVER_CPP	ikfast/ikfast_wrapper_right.h	3;"	d
IKFAST_STRINGIZE	ikfast/baxter_left_arm_ikfast_solver.cpp	35;"	d	file:
IKFAST_STRINGIZE	ikfast/baxter_right_arm_ikfast_solver.cpp	35;"	d	file:
IKFAST_STRINGIZE2	ikfast/baxter_left_arm_ikfast_solver.cpp	34;"	d	file:
IKFAST_STRINGIZE2	ikfast/baxter_right_arm_ikfast_solver.cpp	34;"	d	file:
IKFAST_VERSION	ikfast/ikfast.h	41;"	d
IKF_NO_ARGUMENTS_GLOBAL	config.h	/^  IKF_NO_ARGUMENTS_GLOBAL = 1,$/;"	e	enum:__anon20
IKF_NO_ARGUMENTS_LOCAL	config.h	/^  IKF_NO_ARGUMENTS_LOCAL = 0,$/;"	e	enum:__anon20
IKF_SWITCHING	config.h	/^  IKF_SWITCHING = 2$/;"	e	enum:__anon20
IKPI	ikfast/baxter_left_arm_ikfast_solver.cpp	63;"	d	file:
IKPI	ikfast/baxter_right_arm_ikfast_solver.cpp	63;"	d	file:
IKPI_2	ikfast/baxter_left_arm_ikfast_solver.cpp	64;"	d	file:
IKPI_2	ikfast/baxter_right_arm_ikfast_solver.cpp	64;"	d	file:
IKSERVICE	config.h	/^  IKSERVICE,$/;"	e	enum:__anon19
IKSolver	ikfast/baxter_left_arm_ikfast_solver.cpp	/^class IKSolver {$/;"	c	namespace:IKFAST_NAMESPACE	file:
IKSolver	ikfast/baxter_right_arm_ikfast_solver.cpp	/^class IKSolver {$/;"	c	namespace:IKFAST_NAMESPACE	file:
IK_BOUNDARY_PASS	config.h	/^  IK_BOUNDARY_PASS = 1$/;"	e	enum:__anon18
IK_BOUNDARY_STOP	config.h	/^  IK_BOUNDARY_STOP = 0,$/;"	e	enum:__anon18
IK_FAILED	config.h	/^  IK_FAILED = 1$/;"	e	enum:__anon8
IK_GOOD	config.h	/^  IK_GOOD = 0,$/;"	e	enum:__anon8
IK_LIKELY_IN_COLLISION	config.h	/^  IK_LIKELY_IN_COLLISION = 2,$/;"	e	enum:__anon8
IKabs	ikfast/baxter_left_arm_ikfast_solver.cpp	/^inline double IKabs(double f) { return fabs(f); }$/;"	f	namespace:IKFAST_NAMESPACE
IKabs	ikfast/baxter_left_arm_ikfast_solver.cpp	/^inline float IKabs(float f) { return fabsf(f); }$/;"	f	namespace:IKFAST_NAMESPACE
IKabs	ikfast/baxter_right_arm_ikfast_solver.cpp	/^inline double IKabs(double f) { return fabs(f); }$/;"	f	namespace:IKFAST_NAMESPACE
IKabs	ikfast/baxter_right_arm_ikfast_solver.cpp	/^inline float IKabs(float f) { return fabsf(f); }$/;"	f	namespace:IKFAST_NAMESPACE
IKacos	ikfast/baxter_left_arm_ikfast_solver.cpp	/^inline double IKacos(double f)$/;"	f	namespace:IKFAST_NAMESPACE
IKacos	ikfast/baxter_left_arm_ikfast_solver.cpp	/^inline float IKacos(float f)$/;"	f	namespace:IKFAST_NAMESPACE
IKacos	ikfast/baxter_right_arm_ikfast_solver.cpp	/^inline double IKacos(double f)$/;"	f	namespace:IKFAST_NAMESPACE
IKacos	ikfast/baxter_right_arm_ikfast_solver.cpp	/^inline float IKacos(float f)$/;"	f	namespace:IKFAST_NAMESPACE
IKasin	ikfast/baxter_left_arm_ikfast_solver.cpp	/^inline double IKasin(double f)$/;"	f	namespace:IKFAST_NAMESPACE
IKasin	ikfast/baxter_left_arm_ikfast_solver.cpp	/^inline float IKasin(float f)$/;"	f	namespace:IKFAST_NAMESPACE
IKasin	ikfast/baxter_right_arm_ikfast_solver.cpp	/^inline double IKasin(double f)$/;"	f	namespace:IKFAST_NAMESPACE
IKasin	ikfast/baxter_right_arm_ikfast_solver.cpp	/^inline float IKasin(float f)$/;"	f	namespace:IKFAST_NAMESPACE
IKatan2	ikfast/baxter_left_arm_ikfast_solver.cpp	/^inline double IKatan2(double fy, double fx) {$/;"	f	namespace:IKFAST_NAMESPACE
IKatan2	ikfast/baxter_left_arm_ikfast_solver.cpp	/^inline float IKatan2(float fy, float fx) {$/;"	f	namespace:IKFAST_NAMESPACE
IKatan2	ikfast/baxter_right_arm_ikfast_solver.cpp	/^inline double IKatan2(double fy, double fx) {$/;"	f	namespace:IKFAST_NAMESPACE
IKatan2	ikfast/baxter_right_arm_ikfast_solver.cpp	/^inline float IKatan2(float fy, float fx) {$/;"	f	namespace:IKFAST_NAMESPACE
IKcos	ikfast/baxter_left_arm_ikfast_solver.cpp	/^inline double IKcos(double f) { return cos(f); }$/;"	f	namespace:IKFAST_NAMESPACE
IKcos	ikfast/baxter_left_arm_ikfast_solver.cpp	/^inline float IKcos(float f) { return cosf(f); }$/;"	f	namespace:IKFAST_NAMESPACE
IKcos	ikfast/baxter_right_arm_ikfast_solver.cpp	/^inline double IKcos(double f) { return cos(f); }$/;"	f	namespace:IKFAST_NAMESPACE
IKcos	ikfast/baxter_right_arm_ikfast_solver.cpp	/^inline float IKcos(float f) { return cosf(f); }$/;"	f	namespace:IKFAST_NAMESPACE
IKfmod	ikfast/baxter_left_arm_ikfast_solver.cpp	/^inline double IKfmod(double x, double y)$/;"	f	namespace:IKFAST_NAMESPACE
IKfmod	ikfast/baxter_left_arm_ikfast_solver.cpp	/^inline float IKfmod(float x, float y)$/;"	f	namespace:IKFAST_NAMESPACE
IKfmod	ikfast/baxter_right_arm_ikfast_solver.cpp	/^inline double IKfmod(double x, double y)$/;"	f	namespace:IKFAST_NAMESPACE
IKfmod	ikfast/baxter_right_arm_ikfast_solver.cpp	/^inline float IKfmod(float x, float y)$/;"	f	namespace:IKFAST_NAMESPACE
IKlog	ikfast/baxter_left_arm_ikfast_solver.cpp	/^inline double IKlog(double f) { return log(f); }$/;"	f	namespace:IKFAST_NAMESPACE
IKlog	ikfast/baxter_left_arm_ikfast_solver.cpp	/^inline float IKlog(float f) { return logf(f); }$/;"	f	namespace:IKFAST_NAMESPACE
IKlog	ikfast/baxter_right_arm_ikfast_solver.cpp	/^inline double IKlog(double f) { return log(f); }$/;"	f	namespace:IKFAST_NAMESPACE
IKlog	ikfast/baxter_right_arm_ikfast_solver.cpp	/^inline float IKlog(float f) { return logf(f); }$/;"	f	namespace:IKFAST_NAMESPACE
IKsign	ikfast/baxter_left_arm_ikfast_solver.cpp	/^inline double IKsign(double f) {$/;"	f	namespace:IKFAST_NAMESPACE
IKsign	ikfast/baxter_left_arm_ikfast_solver.cpp	/^inline float IKsign(float f) {$/;"	f	namespace:IKFAST_NAMESPACE
IKsign	ikfast/baxter_right_arm_ikfast_solver.cpp	/^inline double IKsign(double f) {$/;"	f	namespace:IKFAST_NAMESPACE
IKsign	ikfast/baxter_right_arm_ikfast_solver.cpp	/^inline float IKsign(float f) {$/;"	f	namespace:IKFAST_NAMESPACE
IKsin	ikfast/baxter_left_arm_ikfast_solver.cpp	/^inline double IKsin(double f) { return sin(f); }$/;"	f	namespace:IKFAST_NAMESPACE
IKsin	ikfast/baxter_left_arm_ikfast_solver.cpp	/^inline float IKsin(float f) { return sinf(f); }$/;"	f	namespace:IKFAST_NAMESPACE
IKsin	ikfast/baxter_right_arm_ikfast_solver.cpp	/^inline double IKsin(double f) { return sin(f); }$/;"	f	namespace:IKFAST_NAMESPACE
IKsin	ikfast/baxter_right_arm_ikfast_solver.cpp	/^inline float IKsin(float f) { return sinf(f); }$/;"	f	namespace:IKFAST_NAMESPACE
IKsqr	ikfast/baxter_left_arm_ikfast_solver.cpp	/^inline double IKsqr(double f) { return f*f; }$/;"	f	namespace:IKFAST_NAMESPACE
IKsqr	ikfast/baxter_left_arm_ikfast_solver.cpp	/^inline float IKsqr(float f) { return f*f; }$/;"	f	namespace:IKFAST_NAMESPACE
IKsqr	ikfast/baxter_right_arm_ikfast_solver.cpp	/^inline double IKsqr(double f) { return f*f; }$/;"	f	namespace:IKFAST_NAMESPACE
IKsqr	ikfast/baxter_right_arm_ikfast_solver.cpp	/^inline float IKsqr(float f) { return f*f; }$/;"	f	namespace:IKFAST_NAMESPACE
IKsqrt	ikfast/baxter_left_arm_ikfast_solver.cpp	/^inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }$/;"	f	namespace:IKFAST_NAMESPACE
IKsqrt	ikfast/baxter_left_arm_ikfast_solver.cpp	/^inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }$/;"	f	namespace:IKFAST_NAMESPACE
IKsqrt	ikfast/baxter_right_arm_ikfast_solver.cpp	/^inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }$/;"	f	namespace:IKFAST_NAMESPACE
IKsqrt	ikfast/baxter_right_arm_ikfast_solver.cpp	/^inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }$/;"	f	namespace:IKFAST_NAMESPACE
IKtan	ikfast/baxter_left_arm_ikfast_solver.cpp	/^inline double IKtan(double f) { return tan(f); }$/;"	f	namespace:IKFAST_NAMESPACE
IKtan	ikfast/baxter_left_arm_ikfast_solver.cpp	/^inline float IKtan(float f) { return tanf(f); }$/;"	f	namespace:IKFAST_NAMESPACE
IKtan	ikfast/baxter_right_arm_ikfast_solver.cpp	/^inline double IKtan(double f) { return tan(f); }$/;"	f	namespace:IKFAST_NAMESPACE
IKtan	ikfast/baxter_right_arm_ikfast_solver.cpp	/^inline float IKtan(float f) { return tanf(f); }$/;"	f	namespace:IKFAST_NAMESPACE
INCDIR	opencl/oclNbody/Makefile	/^INCDIR		:= inc\/$/;"	m
INSTANT	config.h	/^  INSTANT = 0,$/;"	e	enum:__anon27
IdleGL	opencl/oclNbody/src/oclNbody.cpp	/^void IdleGL(void)$/;"	f
IkFastFunctions	ikfast/ikfast.h	/^    IkFastFunctions() : _ComputeIk(NULL), _ComputeFk(NULL), _GetNumFreeParameters(NULL), _GetFreeParameters(NULL), _GetNumJoints(NULL), _GetIkRealSize(NULL), _GetIkFastVersion(NULL), _GetIkType(NULL), _GetKinematicsHash(NULL) {$/;"	f	class:ikfast::IkFastFunctions
IkFastFunctions	ikfast/ikfast.h	/^class IkFastFunctions$/;"	c	namespace:ikfast
IkReal	ikfast/ikfast.h	/^typedef IKFAST_REAL IkReal;$/;"	t	namespace:IKFAST_NAMESPACE
IkSingleDOFSolutionBase	ikfast/ikfast.h	/^    IkSingleDOFSolutionBase() : fmul(0), foffset(0), freeind(-1), maxsolutions(1) {$/;"	f	class:ikfast::IkSingleDOFSolutionBase
IkSingleDOFSolutionBase	ikfast/ikfast.h	/^class IkSingleDOFSolutionBase$/;"	c	namespace:ikfast
IkSolution	ikfast/ikfast.h	/^    IkSolution(const std::vector<IkSingleDOFSolutionBase<T> >& vinfos, const std::vector<int>& vfree) {$/;"	f	class:ikfast::IkSolution
IkSolution	ikfast/ikfast.h	/^class IkSolution : public IkSolutionBase<T>$/;"	c	namespace:ikfast
IkSolutionBase	ikfast/ikfast.h	/^class IkSolutionBase$/;"	c	namespace:ikfast
IkSolutionList	ikfast/ikfast.h	/^class IkSolutionList : public IkSolutionListBase<T>$/;"	c	namespace:ikfast
IkSolutionListBase	ikfast/ikfast.h	/^class IkSolutionListBase$/;"	c	namespace:ikfast
ImageGpu	opencl/ein_opencl.cpp	/^struct ImageGpu {$/;"	s	file:
Increment	opencl/oclNbody/inc/param.h	/^          void Increment()$/;"	f	class:Param
Increment	opencl/oclNbody/inc/param.h	/^          void Increment()$/;"	f	class:ParamList
InitGL	opencl/oclNbody/src/oclNbody.cpp	/^void InitGL(int* argc, char **argv)$/;"	f
InitNbody	opencl/oclNbody/src/oclNbody.cpp	/^void InitNbody(cl_device_id dev, cl_context ctx, cl_command_queue cmdq,$/;"	f
Integer	repl.cpp	/^  Integer(int _n) {$/;"	f	class:Integer
Integer	repl.cpp	/^class Integer: public ToyWord$/;"	c	file:
IntegerWord	word.h	/^  IntegerWord(int _n) {$/;"	f	class:IntegerWord
IntegerWord	word.h	/^class IntegerWord: public Word$/;"	c
IntegrateNbodySystem	opencl/oclNbody/src/oclBodySystemOpenclLaunch.cpp	/^    void IntegrateNbodySystem(cl_command_queue cqCommandQueue,$/;"	f
IsList	opencl/oclNbody/inc/param.h	/^          bool IsList() { return false; }$/;"	f	class:Param
IsList	opencl/oclNbody/inc/param.h	/^          bool IsList() { return true; }$/;"	f	class:ParamList
KNIFE	ein_util.h	/^  KNIFE,$/;"	e	enum:__anon41
KeyboardGL	opencl/oclNbody/src/oclNbody.cpp	/^void KeyboardGL(unsigned char key, int \/*x*\/, int \/*y*\/)$/;"	f
L102A	cephes/exp10.c	/^static unsigned short L102A[] = { 0037632, 0020000, 0000000, 0000000, };$/;"	v	file:
L102A	cephes/exp10.c	/^static unsigned short L102A[] = { 0x0000, 0x0000, 0x4400, 0x3fd3, };$/;"	v	file:
L102A	cephes/exp10.c	/^static unsigned short L102A[] = { 0x3fd3, 0x4400, 0x0000, 0x0000, };$/;"	v	file:
L102B	cephes/exp10.c	/^static unsigned short L102B[] = { 0033632, 0102373, 0147767, 0114220, };$/;"	v	file:
L102B	cephes/exp10.c	/^static unsigned short L102B[] = { 0x3ed3, 0x509f, 0x79fe, 0xf312, };$/;"	v	file:
L102B	cephes/exp10.c	/^static unsigned short L102B[] = { 0xf312, 0x79fe, 0x509f, 0x3ed3, };$/;"	v	file:
L210	cephes/exp10.c	/^static unsigned short L210[] = { 0040524, 0115170, 0045715, 0015613 };$/;"	v	file:
L210	cephes/exp10.c	/^static unsigned short L210[] = { 0x400a, 0x934f, 0x0979, 0xa371 };$/;"	v	file:
L210	cephes/exp10.c	/^static unsigned short L210[] = { 0xa371, 0x0979, 0x934f, 0x400a };$/;"	v	file:
LATENT_CLASS	config.h	/^  LATENT_CLASS = 1$/;"	e	enum:__anon26
LEARNING_ALGORITHMC	config.h	/^  LEARNING_ALGORITHMC = 3,$/;"	e	enum:__anon23
LEARNING_SAMPLING	config.h	/^  LEARNING_SAMPLING = 2,$/;"	e	enum:__anon23
LG102A	cephes/exp10.c	/^static double LG102A = 3.01025390625000000000E-1;$/;"	v	file:
LG102A	cephes/exp10.c	106;"	d	file:
LG102A	cephes/exp10.c	139;"	d	file:
LG102A	cephes/exp10.c	170;"	d	file:
LG102B	cephes/exp10.c	/^static double LG102B = 4.60503898119521373889E-6;$/;"	v	file:
LG102B	cephes/exp10.c	109;"	d	file:
LG102B	cephes/exp10.c	142;"	d	file:
LG102B	cephes/exp10.c	173;"	d	file:
LIB	cephes/Makefile	/^LIB = cephes$/;"	m
LINTERP	cephes/sincos.c	114;"	d	file:
LOG210	cephes/exp10.c	/^static double LOG210 = 3.32192809488736234787e0;$/;"	v	file:
LOG210	cephes/exp10.c	103;"	d	file:
LOG210	cephes/exp10.c	136;"	d	file:
LOG210	cephes/exp10.c	167;"	d	file:
LOG2E	cephes/const.c	/^double LOG2E = 1.4426950408889634073599;	\/* 1\/log(2) *\/$/;"	v
LOG2E	cephes/const.c	/^unsigned short LOG2E[4] = { 040270, 0125073, 024534, 013761, };$/;"	v
LOG2E	cephes/const.c	/^unsigned short LOG2E[4] = { 0x3ff7, 0x1547, 0x652b, 0x82fe };$/;"	v
LOG2E	cephes/const.c	/^unsigned short LOG2E[4] = { 0x82fe, 0x652b, 0x1547, 0x3ff7 };$/;"	v
LOGBOTH	opencl/oclNbody/inc/shrUtils.h	/^    LOGBOTH    = 3, \/\/ convenience union of first 2 bits to signal "log to both"$/;"	e	enum:LOGMODES
LOGCONSOLE	opencl/oclNbody/inc/shrUtils.h	/^    LOGCONSOLE = 1, \/\/ bit to signal "log to console" $/;"	e	enum:LOGMODES
LOGE2	cephes/const.c	/^double LOGE2 = 6.93147180559945309417E-1;	\/* log(2) *\/$/;"	v
LOGE2	cephes/const.c	/^unsigned short LOGE2[4] = { 040061, 071027, 0173721, 0147572, };$/;"	v
LOGE2	cephes/const.c	/^unsigned short LOGE2[4] = { 0x39ef, 0xfefa, 0x2e42, 0x3fe6 };$/;"	v
LOGE2	cephes/const.c	/^unsigned short LOGE2[4] = { 0x3fe6, 0x2e42, 0xfefa, 0x39ef };$/;"	v
LOGFILE	opencl/oclNbody/inc/shrUtils.h	/^    LOGFILE    = 2, \/\/ bit to signal "log to file" $/;"	e	enum:LOGMODES
LOGIC_EXCEPTION	opencl/oclNbody/inc/cmd_arg_reader.h	28;"	d
LOGMODES	opencl/oclNbody/inc/shrUtils.h	/^enum LOGMODES $/;"	g
LOGPI	cephes/gamma.c	/^static double LOGPI = 1.14472988584940017414;$/;"	v	file:
LOGPI	cephes/gamma.c	163;"	d	file:
LOGPI	cephes/gamma.c	193;"	d	file:
LOGPI	cephes/gamma.c	223;"	d	file:
LOGSQ2	cephes/const.c	/^double LOGSQ2 = 3.46573590279972654709E-1;	\/* log(2)\/2 *\/$/;"	v
LOGSQ2	cephes/const.c	/^unsigned short LOGSQ2[4] = { 037661, 071027, 0173721, 0147572, };$/;"	v
LOGSQ2	cephes/const.c	/^unsigned short LOGSQ2[4] = { 0x39ef, 0xfefa, 0x2e42, 0x3fd6 };$/;"	v
LOGSQ2	cephes/const.c	/^unsigned short LOGSQ2[4] = { 0x3fd6, 0x2e42, 0xfefa, 0x39ef };$/;"	v
LOOP	config.h	/^  LOOP = 1$/;"	e	enum:__anon13
LOWER_MASK	randomkit.c	208;"	d	file:
LP	cephes/unity.c	/^static double LP[] = {$/;"	v	file:
LPI	cephes/gamma.c	/^static unsigned short LPI[4] = {$/;"	v	file:
LQ	cephes/unity.c	/^static double LQ[] = {$/;"	v	file:
LS2P	cephes/gamma.c	/^static unsigned short LS2P[] = { 040153, 037616, 041445, 0172645, };$/;"	v	file:
LS2P	cephes/gamma.c	/^static unsigned short LS2P[] = {$/;"	v	file:
LS2PI	cephes/gamma.c	/^static double LS2PI = 0.91893853320467274178;$/;"	v	file:
LS2PI	cephes/gamma.c	465;"	d	file:
LS2PI	cephes/gamma.c	502;"	d	file:
LS2PI	cephes/gamma.c	538;"	d	file:
LS2PI	distributions.c	480;"	d	file:
M	randomkit.c	205;"	d	file:
MACHEP	cephes/const.c	/^double MACHEP = 1.11022302462515654042E-16;	\/* 2**-53 *\/$/;"	v
MACHEP	cephes/const.c	/^double MACHEP = 1.38777878078144567553E-17;	\/* 2**-56 *\/$/;"	v
MACHEP	cephes/const.c	/^unsigned short MACHEP[4] = { 0022200, 0000000, 0000000, 0000000 };$/;"	v
MACHEP	cephes/const.c	/^unsigned short MACHEP[4] = { 0x0000, 0x0000, 0x0000, 0x3ca0 };$/;"	v
MACHEP	cephes/const.c	/^unsigned short MACHEP[4] = { 0x3ca0, 0x0000, 0x0000, 0x0000 };$/;"	v
MAINWINDOW_H	qtgui/mainwindow.h	2;"	d
MAPPING	config.h	/^  MAPPING = 5$/;"	e	enum:__anon23
MASTER	opencl/oclNbody/inc/shrUtils.h	/^    MASTER     = 8, \/\/ bit to signal master .csv log output$/;"	e	enum:LOGMODES
MASTERLOGFILE	opencl/oclNbody/inc/shrUtils.h	87;"	d
MATH2D_H	slu/math2d.h	2;"	d
MATH3D_H	slu/math3d.h	2;"	d
MATRIX_A	randomkit.c	206;"	d	file:
MAX3	cephes/ellie.c	168;"	d	file:
MAX3	cephes/ellik.c	159;"	d	file:
MAXAIRY	cephes/airy.c	68;"	d	file:
MAXAIRY	cephes/airy.c	71;"	d	file:
MAXAIRY	cephes/airy.c	74;"	d	file:
MAXAIRY	cephes/airy.c	77;"	d	file:
MAXCOUNT	cephes/tukey.c	15;"	d	file:
MAXFAC	cephes/kn.c	83;"	d	file:
MAXGAM	cephes/beta.c	55;"	d	file:
MAXGAM	cephes/beta.c	58;"	d	file:
MAXGAM	cephes/beta.c	61;"	d	file:
MAXGAM	cephes/beta.c	64;"	d	file:
MAXGAM	cephes/gamma.c	132;"	d	file:
MAXGAM	cephes/gamma.c	158;"	d	file:
MAXGAM	cephes/gamma.c	188;"	d	file:
MAXGAM	cephes/gamma.c	218;"	d	file:
MAXGAM	cephes/incbet.c	65;"	d	file:
MAXGAM	cephes/incbet.c	67;"	d	file:
MAXGAM	cephes/jv.c	58;"	d	file:
MAXGAM	cephes/jv.c	60;"	d	file:
MAXITER	cephes/mconf.h	99;"	d
MAXL10	cephes/exp10.c	/^static double MAXL10 = 308.2547155599167;$/;"	v	file:
MAXL10	cephes/exp10.c	112;"	d	file:
MAXL2	cephes/exp2.c	108;"	d	file:
MAXL2	cephes/exp2.c	125;"	d	file:
MAXL2	cephes/exp2.c	74;"	d	file:
MAXL2	cephes/exp2.c	91;"	d	file:
MAXL2	cephes/zetac.c	502;"	d	file:
MAXLGM	cephes/gamma.c	431;"	d	file:
MAXLGM	cephes/gamma.c	466;"	d	file:
MAXLGM	cephes/gamma.c	503;"	d	file:
MAXLGM	cephes/gamma.c	539;"	d	file:
MAXLOG	cephes/const.c	/^double MAXLOG = 7.08396418532264106224E2;	\/* log 2**1022 *\/$/;"	v
MAXLOG	cephes/const.c	/^double MAXLOG = 7.09782712893383996732E2;	\/* log(MAXNUM) *\/$/;"	v
MAXLOG	cephes/const.c	/^unsigned short MAXLOG[4] = { 041660, 007463, 0143742, 025733, };$/;"	v
MAXLOG	cephes/const.c	/^unsigned short MAXLOG[4] = { 0x39ef, 0xfefa, 0x2e42, 0x4086 };$/;"	v
MAXLOG	cephes/const.c	/^unsigned short MAXLOG[4] = { 0x4086, 0x232b, 0xdd7a, 0xbcd2 };$/;"	v
MAXLOG	cephes/const.c	/^unsigned short MAXLOG[4] = { 0x4086, 0x2e42, 0xfefa, 0x39ef };$/;"	v
MAXLOG	cephes/const.c	/^unsigned short MAXLOG[4] = { 0xbcd2, 0xdd7a, 0x232b, 0x4086 };$/;"	v
MAXNUM	cephes/const.c	/^double MAXNUM = 1.79769313486231570815E308;	\/* 2**1024*(1-MACHEP) *\/$/;"	v
MAXNUM	cephes/const.c	/^unsigned short MAXNUM[4] = { 077777, 0177777, 0177777, 0177777, };$/;"	v
MAXNUM	cephes/const.c	/^unsigned short MAXNUM[4] = { 0x7fef, 0xffff, 0xffff, 0xffff };$/;"	v
MAXNUM	cephes/const.c	/^unsigned short MAXNUM[4] = { 0xffff, 0xffff, 0xffff, 0x7fef };$/;"	v
MAXPOL	cephes/polyn.c	/^int MAXPOL = 0;$/;"	v
MAXSTIR	cephes/gamma.c	236;"	d	file:
MAXSTIR	cephes/gamma.c	248;"	d	file:
MAXSTIR	cephes/gamma.c	264;"	d	file:
MAXSTIR	cephes/gamma.c	280;"	d	file:
MAX_ITERATIONS	cephes/hyp2f1.c	95;"	d	file:
MINL2	cephes/exp2.c	109;"	d	file:
MINL2	cephes/exp2.c	126;"	d	file:
MINL2	cephes/exp2.c	75;"	d	file:
MINL2	cephes/exp2.c	92;"	d	file:
MINLOG	cephes/const.c	/^double MINLOG = -7.08396418532264106224E2;	\/* log 2**-1022 *\/$/;"	v
MINLOG	cephes/const.c	/^double MINLOG = -7.451332191019412076235E2;	\/* log(2**-1075) *\/$/;"	v
MINLOG	cephes/const.c	/^unsigned short MINLOG[4] = { 0141661, 071027, 0173721, 0147572, };$/;"	v
MINLOG	cephes/const.c	/^unsigned short MINLOG[4] = { 0x3052, 0xd52d, 0x4910, 0xc087 };$/;"	v
MINLOG	cephes/const.c	/^unsigned short MINLOG[4] = { 0xbcd2, 0xdd7a, 0x232b, 0xc086 };$/;"	v
MINLOG	cephes/const.c	/^unsigned short MINLOG[4] = { 0xc086, 0x232b, 0xdd7a, 0xbcd2 };$/;"	v
MINLOG	cephes/const.c	/^unsigned short MINLOG[4] = { 0xc087, 0x4910, 0xd52d, 0x3052 };$/;"	v
MINUSZERO	cephes/mconf.h	153;"	d
MIN_EPSILON_ERROR	opencl/oclNbody/src/shrUtils.cpp	32;"	d	file:
MOD360	cephes/sincos.c	122;"	d	file:
MOVING	config.h	/^  MOVING = 4$/;"	e	enum:__anon11
MRT	ein_util.h	/^  MRT,$/;"	e	enum:__anon41
MT_kernel	opencl/oclNbody/inc/oclBodySystemOpencl.h	/^        cl_kernel MT_kernel;$/;"	m	class:BodySystemOpenCL
MXL	cephes/exp10.c	/^static unsigned short MXL[] = { 0041430, 0166131, 0047761, 0154130, };$/;"	v	file:
MY_FONT	ein_util.h	26;"	d
MY_NAMESPACE	ein_ik.cpp	8;"	d	file:
MY_NAMESPACE	ein_movement.cpp	4;"	d	file:
MY_NAMESPACE	ikfast/ikfast_wrapper.cpp	/^namespace MY_NAMESPACE {$/;"	n	file:
MY_NAMESPACE	ikfast/ikfast_wrapper.h	/^namespace MY_NAMESPACE {$/;"	n
MY_NAMESPACE	ikfast/ikfast_wrapper_left.h	4;"	d
MY_NAMESPACE	ikfast/ikfast_wrapper_right.h	4;"	d
M_PI	distributions.c	54;"	d	file:
MachineState	config.cpp	/^MachineState::MachineState() {$/;"	f	class:MachineState
MachineState	config.h	/^class MachineState: public std::enable_shared_from_this<MachineState> {$/;"	c
MainWindow	qtgui/mainwindow.cpp	/^MainWindow::MainWindow(QWidget *parent, MachineState * _right_arm, MachineState * _left_arm) :$/;"	f	class:MainWindow
MainWindow	qtgui/mainwindow.h	/^class MainWindow : public QMainWindow$/;"	c
MapCell	config.h	/^typedef struct MapCell {$/;"	s
MapCell	config.h	/^} MapCell;$/;"	t	typeref:struct:MapCell
Minus	repl.cpp	/^class Minus: public ToyWord$/;"	c	file:
Motion	opencl/oclNbody/src/paramgl.cpp	/^bool ParamListGL::Motion(int x, int y)$/;"	f	class:ParamListGL
MotionGL	opencl/oclNbody/src/oclNbody.cpp	/^void MotionGL(int x, int y)$/;"	f
Mouse	opencl/oclNbody/src/paramgl.cpp	/^bool ParamListGL::Mouse(int x, int y, int button, int state)$/;"	f	class:ParamListGL
MouseGL	opencl/oclNbody/src/oclNbody.cpp	/^void MouseGL(int button, int state, int x, int y)$/;"	f
N	cephes/polmisc.c	12;"	d	file:
N	randomkit.c	204;"	d	file:
NAME	qtgui/stackmodel.cpp	/^  NAME = 1,$/;"	e	enum:__anon5	file:
NBODY_CONFIG_EXPAND	opencl/oclNbody/inc/oclBodySystem.h	/^        NBODY_CONFIG_EXPAND,$/;"	e	enum:NBodyConfig
NBODY_CONFIG_RANDOM	opencl/oclNbody/inc/oclBodySystem.h	/^        NBODY_CONFIG_RANDOM,$/;"	e	enum:NBodyConfig
NBODY_CONFIG_SHELL	opencl/oclNbody/inc/oclBodySystem.h	/^        NBODY_CONFIG_SHELL,$/;"	e	enum:NBodyConfig
NBODY_NUM_CONFIGS	opencl/oclNbody/inc/oclBodySystem.h	/^        NBODY_NUM_CONFIGS$/;"	e	enum:NBodyConfig
NBodyConfig	opencl/oclNbody/inc/oclBodySystem.h	/^    enum NBodyConfig$/;"	g
NBodyParams	opencl/oclNbody/src/oclNbody.cpp	/^struct NBodyParams$/;"	s	file:
NCOTE	cephes/simpsn.c	11;"	d	file:
NEGZERO	cephes/const.c	/^double NEGZERO = -0.0;$/;"	v
NEGZERO	cephes/const.c	/^double NEGZERO = 0.0;$/;"	v
NEGZERO	cephes/const.c	/^unsigned short NEGZERO[4] = { 0000000, 0000000, 0000000, 0000000 };$/;"	v
NEGZERO	cephes/const.c	/^unsigned short NEGZERO[4] = { 0000000, 0000000, 0000000, 0100000 };$/;"	v
NEGZERO	cephes/const.c	/^unsigned short NEGZERO[4] = { 0x0000, 0x0000, 0x0000, 0x0000 };$/;"	v
NEGZERO	cephes/const.c	/^unsigned short NEGZERO[4] = { 0x0000, 0x0000, 0x0000, 0x8000 };$/;"	v
NEGZERO	cephes/const.c	/^unsigned short NEGZERO[4] = { 0x8000, 0x0000, 0x0000, 0x0000 };$/;"	v
NOT_CENTERED	config.h	/^  NOT_CENTERED = 0,$/;"	e	enum:__anon24
NOW_THATS_COARSE	config.h	418;"	d
NO_LOCK	config.h	/^  NO_LOCK = 0,$/;"	e	enum:__anon33
NPY_2_PI	cephes/mconf.h	74;"	d
NPY_EULER	cephes/mconf.h	77;"	d
NPY_INFINITY	cephes/mconf.h	72;"	d
NPY_NAN	cephes/mconf.h	71;"	d
NPY_NZERO	cephes/mconf.h	81;"	d
NPY_PI	cephes/mconf.h	73;"	d
NPY_PI_2	cephes/mconf.h	75;"	d
NPY_PI_4	cephes/mconf.h	76;"	d
NUM_JOINTS	config.h	72;"	d
N_UFACTORS	cephes/scipy_iv.c	190;"	d	file:
N_UFACTOR_TERMS	cephes/scipy_iv.c	191;"	d	file:
OBJS	cephes/Makefile	/^OBJS = airy.o bdtr.o beta.o \\$/;"	m
OCLMAX	opencl/oclNbody/inc/shrUtils.h	108;"	d
OCLMIN	opencl/oclNbody/inc/shrUtils.h	109;"	d
OCL_SDKREVISION	opencl/oclNbody/inc/oclUtils.h	54;"	d
OCL_UTILS_H	opencl/oclNbody/inc/oclUtils.h	13;"	d
OFT_INVALID	ein_util.h	/^  OFT_INVALID$/;"	e	enum:__anon41
ONCE	config.h	/^  ONCE = 0,$/;"	e	enum:__anon13
ONCE_CLASSIFY	config.h	/^  ONCE_CLASSIFY = 1,$/;"	e	enum:__anon25
OPPONENTSIFTBOW_GLOBALCOLOR_HIST	config.h	/^  OPPONENTSIFTBOW_GLOBALCOLOR_HIST = 2, \/\/ this has not been sufficiently tested$/;"	e	enum:__anon16
OPPONENT_COLOR_GRADIENT	config.h	/^  OPPONENT_COLOR_GRADIENT = 5,$/;"	e	enum:__anon16
OPT	cephes/Makefile	/^OPT=-O2 -march=pentiumpro$/;"	m
ORIENTATIONS	ein_util.h	55;"	d
OVERFLOW	cephes/mconf.h	94;"	d
O_FILTER_SPOON_HEAD_WIDTH	ein_util.h	57;"	d
O_FILTER_SPOON_SHAFT_WIDTH	ein_util.h	58;"	d
O_FILTER_WIDTH	ein_util.h	56;"	d
OpenGlEinViewPort	qtgui/window_QT.cpp	/^OpenGlEinViewPort::OpenGlEinViewPort(QWidget* _parent, int keep_ratio) : QGLWidget(_parent), size(-1, -1)$/;"	f	class:OpenGlEinViewPort
OpenGlEinViewPort	qtgui/window_QT.h	/^class OpenGlEinViewPort : public QGLWidget, public EinViewPort$/;"	c
OrientedRay	gaussian_map.h	/^class OrientedRay {$/;"	c
P	cephes/ellpe.c	/^static double P[] = {$/;"	v	file:
P	cephes/ellpe.c	/^static unsigned short P[] = {$/;"	v	file:
P	cephes/ellpk.c	/^static double P[] = {$/;"	v	file:
P	cephes/ellpk.c	/^static unsigned short P[] = {$/;"	v	file:
P	cephes/exp10.c	/^static double P[] = {$/;"	v	file:
P	cephes/exp10.c	/^static unsigned short P[] = {$/;"	v	file:
P	cephes/exp2.c	/^static double P[] = {$/;"	v	file:
P	cephes/exp2.c	/^static unsigned short P[] = {$/;"	v	file:
P	cephes/gamma.c	/^static double P[] = {$/;"	v	file:
P	cephes/gamma.c	/^static unsigned short P[] = {$/;"	v	file:
P	cephes/ndtr.c	/^static double P[] = {$/;"	v	file:
P	cephes/ndtr.c	/^static unsigned short P[] = {$/;"	v	file:
P	cephes/zetac.c	/^static double P[9] = {$/;"	v	file:
P	cephes/zetac.c	/^static unsigned short P[36] = {$/;"	v	file:
P0	cephes/ndtri.c	/^static double P0[5] = {$/;"	v	file:
P0	cephes/ndtri.c	/^static unsigned short P0[20] = {$/;"	v	file:
P1	cephes/jv.c	/^static double P1[] = {$/;"	v	file:
P1	cephes/ndtri.c	/^static double P1[9] = {$/;"	v	file:
P1	cephes/ndtri.c	/^static unsigned short P1[36] = {$/;"	v	file:
P1	cephes/sindg.c	/^static unsigned short P1[] = { 0036616, 0175065, 0011224, 0164711 };$/;"	v	file:
P1	cephes/sindg.c	/^static unsigned short P1[] = { 0x9d39, 0xa252, 0xdf46, 0x3f91 };$/;"	v	file:
P1	cephes/sindg.c	/^static unsigned short P1[] = {$/;"	v	file:
P1	cephes/tandg.c	/^static unsigned short P1[] = { 0036616, 0175065, 0011224, 0164711 };$/;"	v	file:
P1	cephes/tandg.c	/^static unsigned short P1[] = { 0x9d39, 0xa252, 0xdf46, 0x3f91 };$/;"	v	file:
P1	cephes/tandg.c	/^static unsigned short P1[] = {$/;"	v	file:
P2	cephes/jv.c	/^static double P2[] = {$/;"	v	file:
P2	cephes/ndtri.c	/^static double P2[9] = {$/;"	v	file:
P2	cephes/ndtri.c	/^static unsigned short P2[36] = {$/;"	v	file:
P3	cephes/jv.c	/^static double P3[] = {$/;"	v	file:
P4	cephes/jv.c	/^static double P4[] = {$/;"	v	file:
P5	cephes/jv.c	/^static double P5[] = {$/;"	v	file:
P6	cephes/jv.c	/^static double P6[] = {$/;"	v	file:
P64800	cephes/sindg.c	/^static double P64800 =$/;"	v	file:
P7	cephes/jv.c	/^static double P7[] = {$/;"	v	file:
PARAMGL_H	opencl/oclNbody/inc/paramgl.h	18;"	d
PARAM_H	opencl/oclNbody/inc/param.h	17;"	d
PARTICLE_NUM_MODES	opencl/oclNbody/inc/oclRenderParticles.h	/^                PARTICLE_NUM_MODES$/;"	e	enum:ParticleRenderer::DisplayMode
PARTICLE_POINTS	opencl/oclNbody/inc/oclRenderParticles.h	/^                PARTICLE_POINTS,$/;"	e	enum:ParticleRenderer::DisplayMode
PARTICLE_SPRITES	opencl/oclNbody/inc/oclRenderParticles.h	/^                PARTICLE_SPRITES,$/;"	e	enum:ParticleRenderer::DisplayMode
PARTICLE_SPRITES_COLOR	opencl/oclNbody/inc/oclRenderParticles.h	/^                PARTICLE_SPRITES_COLOR,$/;"	e	enum:ParticleRenderer::DisplayMode
PATROL	config.h	/^  PATROL = 2,$/;"	e	enum:__anon15
PATROLLING	config.h	/^  PATROLLING = 1,$/;"	e	enum:__anon12
PF2	cephes/jv.c	/^static double PF2[] = {$/;"	v	file:
PF3	cephes/jv.c	/^static double PF3[] = {$/;"	v	file:
PF4	cephes/jv.c	/^static double PF4[] = {$/;"	v	file:
PG1	cephes/jv.c	/^static double PG1[] = {$/;"	v	file:
PG2	cephes/jv.c	/^static double PG2[] = {$/;"	v	file:
PG3	cephes/jv.c	/^static double PG3[] = {$/;"	v	file:
PGMHeaderSize	opencl/oclNbody/src/shrUtils.cpp	/^const unsigned int PGMHeaderSize = 0x40;$/;"	v
PHYSICAL	config.h	/^  PHYSICAL,$/;"	e	enum:__anon17
PI	cephes/const.c	/^double PI = 3.14159265358979323846;	\/* pi *\/$/;"	v
PI	cephes/const.c	/^unsigned short PI[4] = { 040511, 007732, 0121041, 064302, };$/;"	v
PI	cephes/const.c	/^unsigned short PI[4] = { 0x2d18, 0x5444, 0x21fb, 0x4009 };$/;"	v
PI	cephes/const.c	/^unsigned short PI[4] = { 0x4009, 0x21fb, 0x5444, 0x2d18 };$/;"	v
PI180	cephes/sindg.c	/^static double PI180 = 1.74532925199432957692E-2;	\/* pi\/180 *\/$/;"	v	file:
PI180	cephes/sindg.c	127;"	d	file:
PI180	cephes/sindg.c	153;"	d	file:
PI180	cephes/sindg.c	181;"	d	file:
PI180	cephes/tandg.c	/^static double PI180 = 1.74532925199432957692E-2;$/;"	v	file:
PI180	cephes/tandg.c	102;"	d	file:
PI180	cephes/tandg.c	86;"	d	file:
PI180	cephes/tandg.c	93;"	d	file:
PICKING	config.h	/^  PICKING = 2,$/;"	e	enum:__anon12
PIO2	cephes/const.c	/^double PIO2 = 1.57079632679489661923;	\/* pi\/2 *\/$/;"	v
PIO2	cephes/const.c	/^unsigned short PIO2[4] = { 040311, 007732, 0121041, 064302, };$/;"	v
PIO2	cephes/const.c	/^unsigned short PIO2[4] = { 0x2d18, 0x5444, 0x21fb, 0x3ff9 };$/;"	v
PIO2	cephes/const.c	/^unsigned short PIO2[4] = { 0x3ff9, 0x21fb, 0x5444, 0x2d18 };$/;"	v
PLACE_REGISTER	config.h	/^  PLACE_REGISTER = 2,$/;"	e	enum:__anon14
PLACING	config.h	/^  PLACING = 3,$/;"	e	enum:__anon12
PLOSS	cephes/mconf.h	97;"	d
POSE_LOCK	config.h	/^  POSE_LOCK = 2,$/;"	e	enum:__anon33
POSE_REPORTED	config.h	/^  POSE_REPORTED = 3$/;"	e	enum:__anon33
PP	cephes/j0.c	/^static double PP[7] = {$/;"	v	file:
PP	cephes/j0.c	/^static unsigned short PP[28] = {$/;"	v	file:
PP	cephes/j1.c	/^static double PP[7] = {$/;"	v	file:
PP	cephes/j1.c	/^static unsigned short PP[28] = {$/;"	v	file:
PQ	cephes/j0.c	/^static double PQ[7] = {$/;"	v	file:
PQ	cephes/j0.c	/^static unsigned short PQ[28] = {$/;"	v	file:
PQ	cephes/j1.c	/^static double PQ[7] = {$/;"	v	file:
PQ	cephes/j1.c	/^static unsigned short PQ[28] = {$/;"	v	file:
PREDICTED	gaussian_map.h	/^  PREDICTED = 1,$/;"	e	enum:__anon36
PROGRAM_NAME	ein.h	10;"	d
Param	opencl/oclNbody/inc/param.h	/^          Param(char *name, T value = 0, T min = 0, T max = 10000, T step = 1, T* ptr = 0)$/;"	f	class:Param
Param	opencl/oclNbody/inc/param.h	/^    template<class T> class Param : public ParamBase $/;"	c
ParamBase	opencl/oclNbody/inc/param.h	/^          ParamBase(char *name) { m_name = name; }$/;"	f	class:ParamBase
ParamBase	opencl/oclNbody/inc/param.h	/^    class ParamBase $/;"	c
ParamList	opencl/oclNbody/inc/param.h	/^          ParamList(char *name = "")$/;"	f	class:ParamList
ParamList	opencl/oclNbody/inc/param.h	/^    class ParamList : public ParamBase $/;"	c
ParamListGL	opencl/oclNbody/inc/paramgl.h	/^    class ParamListGL : public ParamList {$/;"	c
ParamListGL	opencl/oclNbody/src/paramgl.cpp	/^ParamListGL::ParamListGL(char *name) : ParamList(name)$/;"	f	class:ParamListGL
ParticleRenderer	opencl/oclNbody/inc/oclRenderParticles.h	/^    class ParticleRenderer$/;"	c
ParticleRenderer	opencl/oclNbody/src/oclRenderParticles.cpp	/^ParticleRenderer::ParticleRenderer()$/;"	f	class:ParticleRenderer
Plus	repl.cpp	/^class Plus: public ToyWord$/;"	c	file:
Q	cephes/ellpe.c	/^static double Q[] = {$/;"	v	file:
Q	cephes/ellpe.c	/^static unsigned short Q[] = {$/;"	v	file:
Q	cephes/ellpk.c	/^static double Q[] = {$/;"	v	file:
Q	cephes/ellpk.c	/^static unsigned short Q[] = {$/;"	v	file:
Q	cephes/exp10.c	/^static double Q[] = {$/;"	v	file:
Q	cephes/exp10.c	/^static unsigned short Q[] = {$/;"	v	file:
Q	cephes/exp2.c	/^static double Q[] = {$/;"	v	file:
Q	cephes/exp2.c	/^static unsigned short Q[] = {$/;"	v	file:
Q	cephes/gamma.c	/^static double Q[] = {$/;"	v	file:
Q	cephes/gamma.c	/^static unsigned short Q[] = {$/;"	v	file:
Q	cephes/ndtr.c	/^static double Q[] = {$/;"	v	file:
Q	cephes/ndtr.c	/^static unsigned short Q[] = {$/;"	v	file:
Q	cephes/zetac.c	/^static double Q[8] = {$/;"	v	file:
Q	cephes/zetac.c	/^static unsigned short Q[32] = {$/;"	v	file:
Q0	cephes/ndtri.c	/^static double Q0[8] = {$/;"	v	file:
Q0	cephes/ndtri.c	/^static unsigned short Q0[32] = {$/;"	v	file:
Q0	cephes/ndtri.c	/^static unsigned short Q0[36] = {$/;"	v	file:
Q1	cephes/ndtri.c	/^static double Q1[8] = {$/;"	v	file:
Q1	cephes/ndtri.c	/^static unsigned short Q1[32] = {$/;"	v	file:
Q2	cephes/ndtri.c	/^static double Q2[8] = {$/;"	v	file:
Q2	cephes/ndtri.c	/^static unsigned short Q2[32] = {$/;"	v	file:
QA_FAILED	opencl/oclNbody/inc/shrQATest.h	/^    QA_FAILED = 0,$/;"	e	enum:eQAstatus
QA_PASSED	opencl/oclNbody/inc/shrQATest.h	/^    QA_PASSED = 1,$/;"	e	enum:eQAstatus
QA_WAIVED	opencl/oclNbody/inc/shrQATest.h	/^    QA_WAIVED = 2$/;"	e	enum:eQAstatus
QP	cephes/j0.c	/^static double QP[8] = {$/;"	v	file:
QP	cephes/j0.c	/^static unsigned short QP[32] = {$/;"	v	file:
QP	cephes/j1.c	/^static double QP[8] = {$/;"	v	file:
QP	cephes/j1.c	/^static unsigned short QP[32] = {$/;"	v	file:
QQ	cephes/j0.c	/^static double QQ[7] = {$/;"	v	file:
QQ	cephes/j0.c	/^static unsigned short QQ[28] = {$/;"	v	file:
QQ	cephes/j1.c	/^static double QQ[7] = {$/;"	v	file:
QQ	cephes/j1.c	/^static unsigned short QQ[28] = {$/;"	v	file:
Q_DECL_OVERRIDE	qtgui/stackmodel.h	/^    QVariant data(const QModelIndex &index, int role = Qt::DisplayRole) const Q_DECL_OVERRIDE;$/;"	m	class:StackModel
Q_DECL_OVERRIDE	qtgui/stackmodel.h	/^    QVariant headerData(int section, Qt::Orientation orientation, int role = Qt::DisplayRole) const Q_DECL_OVERRIDE;$/;"	m	class:StackModel
Q_DECL_OVERRIDE	qtgui/stackmodel.h	/^    int columnCount(const QModelIndex &parent = QModelIndex()) const Q_DECL_OVERRIDE;$/;"	m	class:StackModel
Q_DECL_OVERRIDE	qtgui/stackmodel.h	/^    int rowCount(const QModelIndex &parent = QModelIndex()) const Q_DECL_OVERRIDE;$/;"	m	class:StackModel
R	cephes/ndtr.c	/^static double R[] = {$/;"	v	file:
R	cephes/ndtr.c	/^static unsigned short R[] = {$/;"	v	file:
R	cephes/rgamma.c	/^static double R[] = {$/;"	v	file:
R	cephes/rgamma.c	/^static unsigned short R[] = {$/;"	v	file:
R	cephes/zetac.c	/^static double R[6] = {$/;"	v	file:
R	cephes/zetac.c	/^static unsigned short R[24] = {$/;"	v	file:
R1	cephes/j0.c	/^static unsigned short R1[] = { 0040671, 0007734, 0001061, 0056734 };$/;"	v	file:
R1	cephes/j0.c	/^static unsigned short R1[] = { 0x2bbb, 0x8046, 0x21fb, 0x4017 };$/;"	v	file:
R1	cephes/j0.c	/^static unsigned short R1[] = { 0x4017, 0x21fb, 0x8046, 0x2bbb };$/;"	v	file:
R2	cephes/j0.c	/^static unsigned short R2[] = { 0041363, 0142445, 0030416, 0165567 };$/;"	v	file:
R2	cephes/j0.c	/^static unsigned short R2[] = { 0x403e, 0x78a4, 0xa621, 0xdd6f };$/;"	v	file:
R2	cephes/j0.c	/^static unsigned short R2[] = { 0xdd6f, 0xa621, 0x78a4, 0x403e };$/;"	v	file:
RANGE_LOWER_INVALID	ein_util.h	30;"	d
RANGE_UPPER_INVALID	ein_util.h	29;"	d
RAY_A	gaussian_map.h	/^  RAY_A = 2$/;"	e	enum:__anon35
RAY_RGB	gaussian_map.h	/^  RAY_RGB = 1,$/;"	e	enum:__anon35
REGISTER_WORD	ein_words.h	40;"	d
REQUIRE_FOCUSED_CLASS	ein_words.h	277;"	d
REQUIRE_VALID_CLASS	ein_words.h	285;"	d
REQUIRE_VALID_SCENE_OBJECT	ein_words.h	292;"	d
RK_DEV_RANDOM	randomkit.c	125;"	d	file:
RK_DEV_URANDOM	randomkit.c	121;"	d	file:
RK_ENODEV	randomkit.h	/^    RK_ENODEV = 1, \/* no RK_DEV_RANDOM device *\/$/;"	e	enum:__anon6
RK_ERR_MAX	randomkit.h	/^    RK_ERR_MAX = 2$/;"	e	enum:__anon6
RK_MAX	randomkit.h	110;"	d
RK_NOERR	randomkit.h	/^    RK_NOERR = 0, \/* no error *\/$/;"	e	enum:__anon6
RK_STATE_LEN	randomkit.h	64;"	d
ROOTDIR	cephes/Makefile	/^ROOTDIR=\/usr\/local$/;"	m
RP	cephes/j0.c	/^static double RP[4] = {$/;"	v	file:
RP	cephes/j0.c	/^static unsigned short RP[16] = {$/;"	v	file:
RP	cephes/j1.c	/^static double RP[4] = {$/;"	v	file:
RP	cephes/j1.c	/^static unsigned short RP[16] = {$/;"	v	file:
RQ	cephes/j0.c	/^static double RQ[8] = {$/;"	v	file:
RQ	cephes/j0.c	/^static unsigned short RQ[32] = {$/;"	v	file:
RQ	cephes/j1.c	/^static double RQ[8] = {$/;"	v	file:
RQ	cephes/j1.c	/^static unsigned short RQ[32] = {$/;"	v	file:
RUNTIME_EXCEPTION	opencl/oclNbody/inc/cmd_arg_reader.h	27;"	d
Read	opencl/oclNbody/inc/param.h	/^          void Read(std::istream &stream) { stream >> m_name >> *m_ptr; }$/;"	f	class:Param
Read	opencl/oclNbody/inc/param.h	/^          void Read(std::istream &stream)$/;"	f	class:ParamList
RegisterGLBufferObject	opencl/oclNbody/src/oclBodySystemOpenclLaunch.cpp	/^    cl_mem RegisterGLBufferObject(cl_context cxGPUContext, unsigned int pboGL)$/;"	f
Render	opencl/oclNbody/src/paramgl.cpp	/^void ParamListGL::Render(int x, int y, bool shadow)$/;"	f	class:ParamListGL
Reset	opencl/oclNbody/inc/param.h	/^          void Reset() { *m_ptr = m_default; }$/;"	f	class:Param
Reset	opencl/oclNbody/inc/param.h	/^          void Reset()$/;"	f	class:ParamList
ResetSim	opencl/oclNbody/src/oclNbody.cpp	/^void ResetSim(BodySystem *system, int numBodies, NBodyConfig config, bool useGL)$/;"	f
ReshapeGL	opencl/oclNbody/src/oclNbody.cpp	/^void ReshapeGL(int w, int h)$/;"	f
RunProfiling	opencl/oclNbody/src/oclNbody.cpp	/^void RunProfiling(int iterations, unsigned int uiWorkgroup)$/;"	f
S	cephes/ndtr.c	/^static double S[] = {$/;"	v	file:
S	cephes/ndtr.c	/^static unsigned short S[] = {$/;"	v	file:
S	cephes/zetac.c	/^static double S[5] = {$/;"	v	file:
S	cephes/zetac.c	/^static unsigned short S[20] = {$/;"	v	file:
S1	cephes/shichi.c	/^static double S1[] = {$/;"	v	file:
S1	cephes/shichi.c	/^static unsigned short S1[] = {$/;"	v	file:
S2	cephes/shichi.c	/^static double S2[] = {$/;"	v	file:
S2	cephes/shichi.c	/^static unsigned short S2[] = {$/;"	v	file:
SC_DISCREPANCY_ONLY	config.h	/^  SC_DISCREPANCY_ONLY = 0,$/;"	e	enum:__anon29
SC_DISCREPANCY_THEN_LOGLIKELIHOOD	config.h	/^  SC_DISCREPANCY_THEN_LOGLIKELIHOOD = 1$/;"	e	enum:__anon29
SD	cephes/sici.c	/^static double SD[] = {$/;"	v	file:
SD	cephes/sici.c	/^static unsigned short SD[] = {$/;"	v	file:
SHAKE	config.h	/^  SHAKE= 4$/;"	e	enum:__anon14
SHRUG	config.h	/^  SHRUG = 4$/;"	e	enum:__anon15
SHR_QATEST_H	opencl/oclNbody/inc/shrQATest.h	13;"	d
SHR_UTILS_H	opencl/oclNbody/inc/shrUtils.h	13;"	d
SIFTBOW_GLOBALCOLOR_HIST	config.h	/^  SIFTBOW_GLOBALCOLOR_HIST = 1,$/;"	e	enum:__anon16
SIFTCOLORBOW_HIST	config.h	/^  SIFTCOLORBOW_HIST = 3, \/\/ unimplemented, calculate color histograms at each keypoint and augment each SIFT feature before clustering$/;"	e	enum:__anon16
SIMULATED	config.h	/^  SIMULATED,$/;"	e	enum:__anon17
SING	cephes/mconf.h	93;"	d
SMALLVAL	cephes/tukey.c	13;"	d	file:
SN	cephes/sici.c	/^static double SN[] = {$/;"	v	file:
SN	cephes/sici.c	/^static unsigned short SN[] = {$/;"	v	file:
SNOOP	config.h	/^  SNOOP$/;"	e	enum:__anon17
SPACE	gaussian_map.h	/^  SPACE = 2$/;"	e	enum:__anon36
SPOON	ein_util.h	/^  SPOON,$/;"	e	enum:__anon41
SQ2OPI	cephes/const.c	/^double SQ2OPI = 7.9788456080286535587989E-1;	\/* sqrt( 2\/pi ) *\/$/;"	v
SQ2OPI	cephes/const.c	/^unsigned short SQ2OPI[4] = { 040114, 041051, 0117241, 0131204, };$/;"	v
SQ2OPI	cephes/const.c	/^unsigned short SQ2OPI[4] = { 0x3651, 0x33d4, 0x8845, 0x3fe9 };$/;"	v
SQ2OPI	cephes/const.c	/^unsigned short SQ2OPI[4] = { 0x3fe9, 0x8845, 0x33d4, 0x3651 };$/;"	v
SQRT2	cephes/const.c	/^double SQRT2 = 1.41421356237309504880;	\/* sqrt(2) *\/$/;"	v
SQRT2	cephes/const.c	/^unsigned short SQRT2[4] = { 040265, 002363, 031771, 0157145, };$/;"	v
SQRT2	cephes/const.c	/^unsigned short SQRT2[4] = { 0x3bcd, 0x667f, 0xa09e, 0x3ff6 };$/;"	v
SQRT2	cephes/const.c	/^unsigned short SQRT2[4] = { 0x3ff6, 0xa09e, 0x667f, 0x3bcd };$/;"	v
SQRT2	cephes/unity.c	40;"	d	file:
SQRTH	cephes/const.c	/^double SQRTH = 7.07106781186547524401E-1;	\/* sqrt(2)\/2 *\/$/;"	v
SQRTH	cephes/const.c	/^unsigned short SQRTH[4] = { 040065, 002363, 031771, 0157144, };$/;"	v
SQRTH	cephes/const.c	/^unsigned short SQRTH[4] = { 0x3bcd, 0x667f, 0xa09e, 0x3fe6 };$/;"	v
SQRTH	cephes/const.c	/^unsigned short SQRTH[4] = { 0x3fe6, 0xa09e, 0x667f, 0x3bcd };$/;"	v
SQRTH	cephes/unity.c	39;"	d	file:
SQT	cephes/gamma.c	/^static unsigned short SQT[4] = {$/;"	v	file:
SQTPI	cephes/gamma.c	/^static double SQTPI = 2.50662827463100050242E0;$/;"	v	file:
SQTPI	cephes/gamma.c	253;"	d	file:
SQTPI	cephes/gamma.c	269;"	d	file:
SQTPI	cephes/gamma.c	285;"	d	file:
SRCDIR	opencl/oclNbody/Makefile	/^SRCDIR		:= src\/$/;"	m
STACKMODEL_H	qtgui/stackmodel.h	2;"	d
STATIC_MARGINALS	config.h	/^  STATIC_MARGINALS = 4,$/;"	e	enum:__anon23
STATIC_PRIOR	config.h	/^  STATIC_PRIOR = 1,$/;"	e	enum:__anon23
STDERROR	opencl/oclNbody/inc/shrUtils.h	135;"	d
STEP	config.h	/^  STEP = 1$/;"	e	enum:__anon27
STIR	cephes/gamma.c	/^static double STIR[5] = {$/;"	v	file:
STIR	cephes/gamma.c	/^static unsigned short STIR[20] = {$/;"	v	file:
STOPCLEAR	config.h	/^  STOPCLEAR = 1,$/;"	e	enum:__anon15
STOPPED	config.h	/^  STOPPED = 2,$/;"	e	enum:__anon11
STRCASECMP	opencl/oclNbody/inc/shrQATest.h	44;"	d
STRCASECMP	opencl/oclNbody/inc/shrQATest.h	46;"	d
STRNCASECMP	opencl/oclNbody/inc/shrQATest.h	52;"	d
STRNCASECMP	opencl/oclNbody/inc/shrQATest.h	54;"	d
SUCCESS	config.h	/^  SUCCESS = 1$/;"	e	enum:__anon22
Scene	gaussian_map.cpp	/^Scene::Scene(MachineState * _ms, int w, int h, double cw, eePose pose) {$/;"	f	class:Scene
Scene	gaussian_map.h	/^class Scene {$/;"	c
SceneObject	gaussian_map.cpp	/^SceneObject::SceneObject() {$/;"	f	class:SceneObject
SceneObject	gaussian_map.cpp	/^SceneObject::SceneObject(eePose _eep, int _lci, string _ol, sceneObjectType _sot) {$/;"	f	class:SceneObject
SceneObject	gaussian_map.h	/^class SceneObject {$/;"	c
SceneObjectScore	gaussian_map.h	/^struct SceneObjectScore {$/;"	s
SelectDemo	opencl/oclNbody/src/oclNbody.cpp	/^void SelectDemo(int index)$/;"	f
SetPercentage	opencl/oclNbody/inc/param.h	/^          void SetPercentage(float \/*p*\/) { ; }$/;"	f	class:ParamList
SetPercentage	opencl/oclNbody/inc/param.h	/^          void SetPercentage(float p)$/;"	f	class:Param
SetSelectedColor	opencl/oclNbody/inc/paramgl.h	/^          void SetSelectedColor(float r, float g, float b) { text_col_selected[0] = r; text_col_selected[1] = g; text_col_selected[2] = b; }$/;"	f	class:ParamListGL
SetUnSelectedColor	opencl/oclNbody/inc/paramgl.h	/^          void SetUnSelectedColor(float r, float g, float b) { text_col_unselected[0] = r; text_col_unselected[1] = g; text_col_unselected[2] = b; }$/;"	f	class:ParamListGL
SetValue	opencl/oclNbody/inc/param.h	/^          T SetValue(const T value) { *m_ptr = value; }$/;"	f	class:Param
Special	opencl/oclNbody/src/paramgl.cpp	/^void ParamListGL::Special(int key, int \/*x*\/, int \/*y*\/)$/;"	f	class:ParamListGL
SpecialGL	opencl/oclNbody/src/oclNbody.cpp	/^void SpecialGL(int key, int x, int y)$/;"	f
Sprite	config.h	/^typedef struct Sprite {$/;"	s
Sprite	config.h	/^} Sprite;$/;"	t	typeref:struct:Sprite
StackModel	qtgui/stackmodel.cpp	/^StackModel::StackModel(QObject *parent)$/;"	f	class:StackModel
StackModel	qtgui/stackmodel.h	/^class StackModel : public QAbstractTableModel$/;"	c
StringWord	word.h	/^  StringWord(string _s) {$/;"	f	class:StringWord
StringWord	word.h	/^class StringWord: public Word$/;"	c
SymbolWord	word.h	/^  SymbolWord(string _s) {$/;"	f	class:SymbolWord
SymbolWord	word.h	/^class SymbolWord: public Word$/;"	c
T	cephes/ndtr.c	/^static double T[] = {$/;"	v	file:
T	cephes/ndtr.c	/^static unsigned short T[] = {$/;"	v	file:
THPIO4	cephes/const.c	/^double THPIO4 = 2.35619449019234492885;	\/* 3*pi\/4 *\/$/;"	v
THPIO4	cephes/const.c	/^unsigned short THPIO4[4] = { 040426, 0145743, 0174631, 007222, };$/;"	v
THPIO4	cephes/const.c	/^unsigned short THPIO4[4] = { 0x21d2, 0x7f33, 0xd97c, 0x4002 };$/;"	v
THPIO4	cephes/const.c	/^unsigned short THPIO4[4] = { 0x4002, 0xd97c, 0x7f33, 0x21d2 };$/;"	v
TLOSS	cephes/mconf.h	96;"	d
TOLERANCE	opencl/oclNbody/src/oclBodySystemCpu.cpp	/^const float TOLERANCE = 3e-7f;$/;"	v
TOOMANY	cephes/mconf.h	98;"	d
TOPCLAMP	opencl/oclNbody/inc/shrUtils.h	111;"	d
TWELFTH	distributions.c	481;"	d	file:
TWOOPI	cephes/const.c	/^double TWOOPI = 6.36619772367581343075535E-1;	\/* 2\/pi *\/$/;"	v
TWOOPI	cephes/const.c	/^unsigned short TWOOPI[4] = { 040042, 0174603, 067116, 042025, };$/;"	v
TWOOPI	cephes/const.c	/^unsigned short TWOOPI[4] = { 0x3fe4, 0x5f30, 0x6dc9, 0xc883 };$/;"	v
TWOOPI	cephes/const.c	/^unsigned short TWOOPI[4] = { 0xc883, 0x6dc9, 0x5f30, 0x3fe4 };$/;"	v
ThreadSync	opencl/oclNbody/src/oclBodySystemOpenclLaunch.cpp	/^    void ThreadSync(cl_command_queue cqCommandQueue) $/;"	f
ToyWord	repl.cpp	/^class ToyWord {$/;"	c	file:
TransitionTable	gaussian_map.h	/^class TransitionTable {$/;"	c
TriggerFPSUpdate	opencl/oclNbody/src/oclNbody.cpp	/^void TriggerFPSUpdate()$/;"	f
U	cephes/ndtr.c	/^static double U[] = {$/;"	v	file:
U	cephes/ndtr.c	/^static unsigned short U[] = {$/;"	v	file:
UFLOWTHRESH	cephes/const.c	/^double UFLOWTHRESH = 2.22507385850720138309E-308;	\/* 2**-1022 *\/$/;"	v
UFLOWTHRESH	cephes/const.c	/^unsigned short UFLOWTHRESH[4] = { 0x0000, 0x0000, 0x0000, 0x0010 };$/;"	v
UFLOWTHRESH	cephes/const.c	/^unsigned short UFLOWTHRESH[4] = { 0x0010, 0x0000, 0x0000, 0x0000 };$/;"	v
UFLOWTHRESH	cephes/const.c	/^unsigned short UFLOWTHRESH[4] = { 0x0080, 0x0000, 0x0000, 0x0000 };$/;"	v
UNDERFLOW	cephes/mconf.h	95;"	d
UNIFORM_PRIOR	ein_util.h	/^  UNIFORM_PRIOR,$/;"	e	enum:__anon40
UNK	cephes/mconf.h	126;"	d
UNKNOWN	config.h	/^  UNKNOWN = -1,$/;"	e	enum:__anon22
UPPER_MASK	randomkit.c	207;"	d	file:
USEGLLIB	opencl/oclNbody/Makefile	/^USEGLLIB	:= 1$/;"	m
USEGLUT	opencl/oclNbody/Makefile	/^USEGLUT		:= 1$/;"	m
UTHRESH	cephes/ndtr.c	214;"	d	file:
UTHRESH	cephes/ndtr.c	278;"	d	file:
UTHRESH	cephes/ndtr.c	342;"	d	file:
UTHRESH	cephes/ndtr.c	403;"	d	file:
Ui	qtgui/einwindow.h	/^namespace Ui {$/;"	n
Ui	qtgui/mainwindow.h	/^namespace Ui {$/;"	n
UnpMap	opencl/oclNbody/inc/cmd_arg_reader.h	/^    typedef std::map< std::string, std::string>            UnpMap;$/;"	t	class:CmdArgReader
UnpMapIter	opencl/oclNbody/inc/cmd_arg_reader.h	/^    typedef std::map< std::string, std::string>::iterator  UnpMapIter;$/;"	t	class:CmdArgReader
UnregisterGLBufferObject	opencl/oclNbody/src/oclBodySystemOpenclLaunch.cpp	/^    void UnregisterGLBufferObject(cl_mem pboCL)$/;"	f
VEC3_EQUALS_CELLREF	gaussian_map.cpp	678;"	d	file:
VELOCITY	config.h	/^  VELOCITY = 2$/;"	e	enum:__anon28
VERYBIGNUMBER	ein.h	8;"	d
VOLATILE	cephes/mconf.h	135;"	d
ValType	opencl/oclNbody/inc/cmd_arg_reader.h	/^    typedef std::pair< const std::type_info*, void*>  ValType;$/;"	t	class:CmdArgReader
Validate	ikfast/ikfast.h	/^    virtual void Validate() const {$/;"	f	class:ikfast::IkSolution
WAIT_BACK_UP	config.h	/^  WAIT_BACK_UP = 1$/;"	e	enum:__anon30
WAIT_KEEP_ON	config.h	/^  WAIT_KEEP_ON = 0,$/;"	e	enum:__anon30
WINDOWMANAGER_H	qtgui/windowmanager.h	2;"	d
WORD	ein_words.h	23;"	d
WORDACTION_H	qtgui/wordaction.h	2;"	d
WindowManager	qtgui/windowmanager.cpp	/^WindowManager::WindowManager() {$/;"	f	class:WindowManager
WindowManager	qtgui/windowmanager.h	/^class WindowManager {$/;"	c
Word	word.h	/^class Word:  public enable_shared_from_this<Word> {$/;"	c
WordAction	qtgui/wordaction.cpp	/^WordAction::WordAction(QMenu * _menu, MachineState * _ms, shared_ptr<Word> _word) : QAction(_menu){$/;"	f	class:WordAction
WordAction	qtgui/wordaction.h	/^class WordAction: public QAction {$/;"	c
Write	opencl/oclNbody/inc/param.h	/^          void Write(std::ostream &stream) { stream << m_name << " " << *m_ptr << '\\n'; }$/;"	f	class:Param
Write	opencl/oclNbody/inc/param.h	/^          void Write(std::ostream &stream)$/;"	f	class:ParamList
XPD	cephes/mconf.h	147;"	d
YP	cephes/j0.c	/^static double YP[8] = {$/;"	v	file:
YP	cephes/j0.c	/^static unsigned short YP[32] = {$/;"	v	file:
YP	cephes/j1.c	/^static double YP[6] = {$/;"	v	file:
YP	cephes/j1.c	/^static unsigned short YP[24] = {$/;"	v	file:
YQ	cephes/j0.c	/^static double YQ[7] = {$/;"	v	file:
YQ	cephes/j0.c	/^static unsigned short YQ[28] = {$/;"	v	file:
YQ	cephes/j1.c	/^static double YQ[8] = {$/;"	v	file:
YQ	cephes/j1.c	/^static unsigned short YQ[32] = {$/;"	v	file:
Z1	cephes/j1.c	/^static double Z1 = 1.46819706421238932572E1;$/;"	v	file:
Z1	cephes/j1.c	446;"	d	file:
Z1	cephes/j1.c	454;"	d	file:
Z1	cephes/j1.c	462;"	d	file:
Z2	cephes/j1.c	/^static double Z2 = 4.92184563216946036703E1;$/;"	v	file:
Z2	cephes/j1.c	447;"	d	file:
Z2	cephes/j1.c	455;"	d	file:
Z2	cephes/j1.c	463;"	d	file:
ZoomIn	qtgui/window_QT.cpp	/^void DefaultEinViewPort::ZoomIn()$/;"	f	class:DefaultEinViewPort
ZoomOut	qtgui/window_QT.cpp	/^void DefaultEinViewPort::ZoomOut()$/;"	f	class:DefaultEinViewPort
_CMDARGREADER_H_	opencl/oclNbody/inc/cmd_arg_reader.h	15;"	d
_CONFIG_H_	config.h	2;"	d
_ComputeFk	ikfast/ikfast.h	/^    ComputeFkFn _ComputeFk;$/;"	m	class:ikfast::IkFastFunctions
_ComputeIk	ikfast/ikfast.h	/^    ComputeIkFn _ComputeIk;$/;"	m	class:ikfast::IkFastFunctions
_EEPOSEH_	eePose.h	2;"	d
_EIGEN_UTIL_H_	eigen_util.h	2;"	d
_EIN_AIBO_H_	ein_aibo.h	2;"	d
_EIN_H_	ein.h	2;"	d
_EIN_IK_H_	ein_ik.h	2;"	d
_EIN_SCENE_H_	gaussian_map.h	2;"	d
_EIN_UTIL_H_	ein_util.h	2;"	d
_EIN_WORDS_H_	ein_words.h	2;"	d
_FACES_H_	faces.h	3;"	d
_FTIME	randomkit.c	95;"	d	file:
_FTIME	randomkit.c	99;"	d	file:
_GaussianMapCell	gaussian_map.h	/^typedef struct _GaussianMapCell {$/;"	s
_GaussianMapChannel	gaussian_map.h	/^typedef struct _GaussianMapChannel {$/;"	s
_GetFreeParameters	ikfast/ikfast.h	/^    GetFreeParametersFn _GetFreeParameters;$/;"	m	class:ikfast::IkFastFunctions
_GetIkFastVersion	ikfast/ikfast.h	/^    GetIkFastVersionFn _GetIkFastVersion;$/;"	m	class:ikfast::IkFastFunctions
_GetIkRealSize	ikfast/ikfast.h	/^    GetIkRealSizeFn _GetIkRealSize;$/;"	m	class:ikfast::IkFastFunctions
_GetIkType	ikfast/ikfast.h	/^    GetIkTypeFn _GetIkType;$/;"	m	class:ikfast::IkFastFunctions
_GetKinematicsHash	ikfast/ikfast.h	/^    GetKinematicsHashFn _GetKinematicsHash;$/;"	m	class:ikfast::IkFastFunctions
_GetNumFreeParameters	ikfast/ikfast.h	/^    GetNumFreeParametersFn _GetNumFreeParameters;$/;"	m	class:ikfast::IkFastFunctions
_GetNumJoints	ikfast/ikfast.h	/^    GetNumJointsFn _GetNumJoints;$/;"	m	class:ikfast::IkFastFunctions
_RANDOMKIT_	randomkit.h	62;"	d
_RK_DISTR_	distributions.h	24;"	d
_WIN32_WINNT	randomkit.c	105;"	d	file:
_WORD_H_	word.h	2;"	d
__CLH_BODYSYSTEM_H__	opencl/oclNbody/inc/oclBodySystem.h	13;"	d
__CL_BODYSYSTEMCPU_H__	opencl/oclNbody/inc/oclBodySystemCpu.h	13;"	d
__CL_BODYSYSTEMOPENCL_H__	opencl/oclNbody/inc/oclBodySystemOpencl.h	13;"	d
__CL_BODYSYSTEMOPENCL_LAUNCH_H	opencl/oclNbody/inc/oclBodySystemOpenclLaunch.h	13;"	d
__ExitInTime	opencl/oclNbody/inc/shrQATest.h	/^inline void __ExitInTime(int seconds)$/;"	f
__MSVCRT_VERSION__	randomkit.c	86;"	d	file:
__OPENCV_HIGHGUI_QT_H__	qtgui/window_QT.h	41;"	d
__PRETTY_FUNCTION__	ikfast/baxter_left_arm_ikfast_solver.cpp	44;"	d	file:
__PRETTY_FUNCTION__	ikfast/baxter_left_arm_ikfast_solver.cpp	49;"	d	file:
__PRETTY_FUNCTION__	ikfast/baxter_right_arm_ikfast_solver.cpp	44;"	d	file:
__PRETTY_FUNCTION__	ikfast/baxter_right_arm_ikfast_solver.cpp	49;"	d	file:
__RENDER_PARTICLES__	opencl/oclNbody/inc/oclRenderParticles.h	13;"	d
__SCIPY_SPECIAL_CEPHES	cephes/protos.h	2;"	d
__oclCheckErrorEX	opencl/oclNbody/inc/oclUtils.h	/^inline void __oclCheckErrorEX(cl_int iSample, cl_int iReference, void (*pCleanup)(int), const char* cFile, const int iLine)$/;"	f
__shrCheckErrorEX	opencl/oclNbody/inc/shrUtils.h	/^inline void __shrCheckErrorEX(int iSample, int iReference, void (*pCleanup)(int), const char* cFile, const int iLine)$/;"	f
__shrExitEX	opencl/oclNbody/inc/shrUtils.h	/^inline void __shrExitEX(int argc, const char** argv, int iExitCode)$/;"	f
__shrQAFinish	opencl/oclNbody/inc/shrQATest.h	/^inline void __shrQAFinish(int argc, const char **argv, int iStatus)$/;"	f
__shrQAFinish2	opencl/oclNbody/inc/shrQATest.h	/^inline void __shrQAFinish2(bool bQATest, int argc, const char **argv, int iStatus)$/;"	f
__shrQAStart	opencl/oclNbody/inc/shrQATest.h	/^inline int __shrQAStart(int argc, char **argv)$/;"	f
_armPose	eePose.cpp	/^_armPose::_armPose() {$/;"	f	class:_armPose
_armPose	eePose.cpp	/^_armPose::_armPose(double a0, double a1, double a2, double a3, double a4, double a5, double a6) {$/;"	f	class:_armPose
_armPose	eePose.h	/^typedef struct _armPose{$/;"	s
_computeNBodyGravitation	opencl/oclNbody/src/oclBodySystemCpu.cpp	/^void BodySystemCPU::_computeNBodyGravitation() $/;"	f	class:BodySystemCPU
_createTexture	opencl/oclNbody/src/oclRenderParticles.cpp	/^void ParticleRenderer::_createTexture(int resolution)$/;"	f	class:ParticleRenderer
_drawPoints	opencl/oclNbody/src/oclRenderParticles.cpp	/^void ParticleRenderer::_drawPoints(bool color)$/;"	f	class:ParticleRenderer
_eePose	eePose.cpp	/^_eePose::_eePose() {$/;"	f	class:_eePose
_eePose	eePose.cpp	/^_eePose::_eePose(double _px, double _py, double _pz, double _qx, double _qy, double _qz, double _qw) {$/;"	f	class:_eePose
_eePose	eePose.h	/^typedef struct _eePose{$/;"	s
_finalize	opencl/oclNbody/src/oclBodySystemCpu.cpp	/^void BodySystemCPU::_finalize()$/;"	f	class:BodySystemCPU
_finalize	opencl/oclNbody/src/oclBodySystemOpencl.cpp	/^void BodySystemOpenCL::_finalize()$/;"	f	class:BodySystemOpenCL
_ij0	ikfast/baxter_left_arm_ikfast_solver.cpp	/^unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij6[2], _nj6,_ij5[2], _nj5;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
_ij0	ikfast/baxter_right_arm_ikfast_solver.cpp	/^unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij6[2], _nj6,_ij5[2], _nj5;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
_ij1	ikfast/baxter_left_arm_ikfast_solver.cpp	/^unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij6[2], _nj6,_ij5[2], _nj5;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
_ij1	ikfast/baxter_right_arm_ikfast_solver.cpp	/^unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij6[2], _nj6,_ij5[2], _nj5;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
_ij2	ikfast/baxter_left_arm_ikfast_solver.cpp	/^unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij6[2], _nj6,_ij5[2], _nj5;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
_ij2	ikfast/baxter_right_arm_ikfast_solver.cpp	/^unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij6[2], _nj6,_ij5[2], _nj5;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
_ij3	ikfast/baxter_left_arm_ikfast_solver.cpp	/^unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij6[2], _nj6,_ij5[2], _nj5;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
_ij3	ikfast/baxter_right_arm_ikfast_solver.cpp	/^unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij6[2], _nj6,_ij5[2], _nj5;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
_ij4	ikfast/baxter_left_arm_ikfast_solver.cpp	/^unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij6[2], _nj6,_ij5[2], _nj5;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
_ij4	ikfast/baxter_right_arm_ikfast_solver.cpp	/^unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij6[2], _nj6,_ij5[2], _nj5;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
_ij5	ikfast/baxter_left_arm_ikfast_solver.cpp	/^unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij6[2], _nj6,_ij5[2], _nj5;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
_ij5	ikfast/baxter_right_arm_ikfast_solver.cpp	/^unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij6[2], _nj6,_ij5[2], _nj5;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
_ij6	ikfast/baxter_left_arm_ikfast_solver.cpp	/^unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij6[2], _nj6,_ij5[2], _nj5;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
_ij6	ikfast/baxter_right_arm_ikfast_solver.cpp	/^unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij6[2], _nj6,_ij5[2], _nj5;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
_initGL	opencl/oclNbody/src/oclRenderParticles.cpp	/^void ParticleRenderer::_initGL()$/;"	f	class:ParticleRenderer
_initialize	opencl/oclNbody/src/oclBodySystemCpu.cpp	/^void BodySystemCPU::_initialize(int numBodies)$/;"	f	class:BodySystemCPU
_initialize	opencl/oclNbody/src/oclBodySystemOpencl.cpp	/^void BodySystemOpenCL::_initialize(int numBodies)$/;"	f	class:BodySystemOpenCL
_integrateNBodySystem	opencl/oclNbody/src/oclBodySystemCpu.cpp	/^void BodySystemCPU::_integrateNBodySystem(float deltaTime)$/;"	f	class:BodySystemCPU
_listsolutions	ikfast/ikfast.h	/^    std::list< IkSolution<T> > _listsolutions;$/;"	m	class:ikfast::IkSolutionList
_math2d_cmp_points	slu/math2d.cpp	/^int _math2d_cmp_points(const void * a1, const void * a2)$/;"	f
_nj0	ikfast/baxter_left_arm_ikfast_solver.cpp	/^unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij6[2], _nj6,_ij5[2], _nj5;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
_nj0	ikfast/baxter_right_arm_ikfast_solver.cpp	/^unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij6[2], _nj6,_ij5[2], _nj5;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
_nj1	ikfast/baxter_left_arm_ikfast_solver.cpp	/^unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij6[2], _nj6,_ij5[2], _nj5;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
_nj1	ikfast/baxter_right_arm_ikfast_solver.cpp	/^unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij6[2], _nj6,_ij5[2], _nj5;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
_nj2	ikfast/baxter_left_arm_ikfast_solver.cpp	/^unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij6[2], _nj6,_ij5[2], _nj5;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
_nj2	ikfast/baxter_right_arm_ikfast_solver.cpp	/^unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij6[2], _nj6,_ij5[2], _nj5;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
_nj3	ikfast/baxter_left_arm_ikfast_solver.cpp	/^unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij6[2], _nj6,_ij5[2], _nj5;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
_nj3	ikfast/baxter_right_arm_ikfast_solver.cpp	/^unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij6[2], _nj6,_ij5[2], _nj5;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
_nj4	ikfast/baxter_left_arm_ikfast_solver.cpp	/^unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij6[2], _nj6,_ij5[2], _nj5;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
_nj4	ikfast/baxter_right_arm_ikfast_solver.cpp	/^unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij6[2], _nj6,_ij5[2], _nj5;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
_nj5	ikfast/baxter_left_arm_ikfast_solver.cpp	/^unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij6[2], _nj6,_ij5[2], _nj5;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
_nj5	ikfast/baxter_right_arm_ikfast_solver.cpp	/^unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij6[2], _nj6,_ij5[2], _nj5;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
_nj6	ikfast/baxter_left_arm_ikfast_solver.cpp	/^unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij6[2], _nj6,_ij5[2], _nj5;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
_nj6	ikfast/baxter_right_arm_ikfast_solver.cpp	/^unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij6[2], _nj6,_ij5[2], _nj5;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
_vbasesol	ikfast/ikfast.h	/^    std::vector< IkSingleDOFSolutionBase<T> > _vbasesol;       \/\/\/< solution and their offsets if joints are mimiced$/;"	m	class:ikfast::IkSolution
_vfree	ikfast/ikfast.h	/^    std::vector<int> _vfree;$/;"	m	class:ikfast::IkSolution
a	gaussian_map.h	/^  double r,g,b,a;$/;"	m	class:OrientedRay
ac1	cephes/ellpk.c	/^static unsigned short ac1[] = { 0040261, 0071027, 0173721, 0147572 };$/;"	v	file:
ac1	cephes/ellpk.c	/^static unsigned short ac1[] = { 0x39ef, 0xfefa, 0x2e42, 0x3ff6 };$/;"	v	file:
ac1	cephes/ellpk.c	/^static unsigned short ac1[] = {$/;"	v	file:
accelerometer	ein_aibo.h	/^  Vector3d accelerometer;$/;"	m	class:EinAiboSensors
accelerometerCallback	ein.cpp	/^void MachineState::accelerometerCallback(const sensor_msgs::Imu& moment) {$/;"	f	class:MachineState
accumulateImage	ein.cpp	/^void accumulateImage(MachineState * ms) {$/;"	f
accumulatedImage	config.h	/^  Mat accumulatedImage;$/;"	m	class:EinConfig
accumulatedImageMass	config.h	/^  Mat accumulatedImageMass;$/;"	m	class:EinConfig
accumulatedStreamImage	config.h	/^  Mat accumulatedStreamImage;$/;"	m	class:EinConfig
accumulatedStreamImageBytes	config.h	/^  Mat accumulatedStreamImageBytes;$/;"	m	class:EinConfig
accumulatedStreamImageMass	config.h	/^  Mat accumulatedStreamImageMass;$/;"	m	class:EinConfig
accumulatedTime	config.h	/^  ros::Duration accumulatedTime;$/;"	m	class:EinConfig
action_probabilities	gaussian_map.h	/^  std::vector<double> action_probabilities;$/;"	m	class:TransitionTable
actions	gaussian_map.h	/^  std::vector<string> actions;$/;"	m	class:TransitionTable
activateSensorStreaming	ein.cpp	/^void activateSensorStreaming(MachineState * ms) {$/;"	f
active	opencl/oclNbody/inc/param.h	/^          bool active;$/;"	m	class:ParamList
activeDemo	opencl/oclNbody/src/oclNbody.cpp	/^int activeDemo = 0;$/;"	v
activeParams	opencl/oclNbody/src/oclNbody.cpp	/^NBodyParams activeParams = demoParams[activeDemo];$/;"	v
actual_effort_thresh	config.h	/^  double actual_effort_thresh = 0.0; $/;"	m	class:EinConfig
addC	gaussian_map.cpp	/^void _GaussianMapCell::addC(_GaussianMapCell * cell) {$/;"	f	class:_GaussianMapCell
addC	gaussian_map.cpp	/^void _GaussianMapChannel::addC(_GaussianMapChannel * channel) {$/;"	f	class:_GaussianMapChannel
addM	gaussian_map.cpp	/^void GaussianMap::addM(shared_ptr<GaussianMap> map) {$/;"	f	class:GaussianMap
addPredictedObject	gaussian_map.cpp	/^shared_ptr<SceneObject> Scene::addPredictedObject(double x, double y, double theta, int class_idx) {$/;"	f	class:Scene
addPredictedObjectsToObservedMap	gaussian_map.cpp	/^void Scene::addPredictedObjectsToObservedMap(double threshold, double learning_weight) {$/;"	f	class:Scene
addSpaceObjects	gaussian_map.cpp	/^void Scene::addSpaceObjects() {$/;"	f	class:Scene
addWindow	qtgui/mainwindow.cpp	/^void MainWindow::addWindow(EinWindow * window) {$/;"	f	class:MainWindow
addWindow	qtgui/windowmanager.cpp	/^void WindowManager::addWindow(EinWindow * window) {$/;"	f	class:WindowManager
aerialGradientDecay	config.h	/^  double aerialGradientDecay = 0.9;\/\/0.965;\/\/0.9;$/;"	m	class:EinConfig
aerialGradientReticleWidth	config.h	/^  int aerialGradientReticleWidth = 200;$/;"	m	class:EinConfig
aerialGradientTemporalFrameAverage	config.h	/^  Mat aerialGradientTemporalFrameAverage;$/;"	m	class:EinConfig
aerialGradientViewerImage	config.h	/^  Mat aerialGradientViewerImage;$/;"	m	class:EinConfig
aerialGradientViewerWindow	config.h	/^  EinWindow * aerialGradientViewerWindow;$/;"	m	class:EinConfig
aerialGradientWidth	config.h	/^  int aerialGradientWidth = 100;$/;"	m	class:EinConfig
aff3dGraspPoses	config.h	/^  vector<eePose> aff3dGraspPoses;$/;"	m	struct:BoxMemory
affPlaceOverPoses	config.h	/^  vector<eePose> affPlaceOverPoses;$/;"	m	struct:BoxMemory
affPlaceUnderPoses	config.h	/^  vector<eePose> affPlaceUnderPoses;$/;"	m	struct:BoxMemory
aiboComeToStopTime	config.h	/^  ros::Time aiboComeToStopTime;$/;"	m	class:MachineState
aiboStoppedTime	config.h	/^  ros::Time aiboStoppedTime;$/;"	m	class:MachineState
aibo_server	ein_aibo.h	/^  struct sockaddr_in aibo_server;$/;"	m	class:EinAiboConfig	typeref:struct:EinAiboConfig::sockaddr_in
aibo_snout_pub	ein_aibo.h	/^  ros::Publisher aibo_snout_pub;$/;"	m	class:EinAiboConfig
aibo_sock_buf	ein_aibo.h	/^  char aibo_sock_buf[aibo_sock_buf_size];$/;"	m	class:EinAiboConfig
aibo_sock_buf_size	ein_aibo.h	/^  const static int aibo_sock_buf_size = 1024*1024*3;$/;"	m	class:EinAiboConfig
aibo_sock_buf_valid_bytes	ein_aibo.h	/^  int aibo_sock_buf_valid_bytes = 0;$/;"	m	class:EinAiboConfig
aibo_socket_desc	ein_aibo.h	/^  int aibo_socket_desc;$/;"	m	class:EinAiboConfig
aibo_socket_did_connect	ein_aibo.h	/^  int aibo_socket_did_connect = 0;$/;"	m	class:EinAiboConfig
aimedPose	config.h	/^  eePose aimedPose;$/;"	m	struct:BoxMemory
airy	cephes/airy.c	/^int airy(x, ai, aip, bi, bip)$/;"	f
airy	cephes/cephes_names.h	4;"	d
algorithmCAT	config.h	/^  double algorithmCAT = 0.7;$/;"	m	class:EinConfig
algorithmCEPS	config.h	/^  double algorithmCEPS = 0.2;$/;"	m	class:EinConfig
algorithmCRT	config.h	/^  double algorithmCRT = 0.95;$/;"	m	class:EinConfig
algorithmCTarget	config.h	/^  double algorithmCTarget = 0.7;$/;"	m	class:EinConfig
allRingBuffersAdvance	ein.cpp	/^void allRingBuffersAdvance(MachineState * ms, ros::Time t) {$/;"	f
all_range_mode	config.h	/^  int all_range_mode = 0;$/;"	m	class:EinConfig
analog_io_pub	config.h	/^  ros::Publisher analog_io_pub;$/;"	m	class:EinConfig
analyticServoPixelToReticle	ein.cpp	/^eePose analyticServoPixelToReticle(MachineState * ms, eePose givenPixel, eePose givenReticle, double ozAngle, eePose givenCameraPose) {$/;"	f
anchor_pose	gaussian_map.h	/^  eePose anchor_pose;$/;"	m	class:GaussianMap
anchor_pose	gaussian_map.h	/^  eePose anchor_pose;$/;"	m	class:Scene
angular_aperture_cols	config.h	/^  int angular_aperture_cols = 351;$/;"	m	class:EinConfig
angular_aperture_rows	config.h	/^  int angular_aperture_rows = 351;$/;"	m	class:EinConfig
angular_baffle_cols	config.h	/^  int angular_baffle_cols = 0;$/;"	m	class:EinConfig
angular_baffle_rows	config.h	/^  int angular_baffle_rows = 0;$/;"	m	class:EinConfig
animationMode	config.h	/^} animationMode; $/;"	t	typeref:enum:__anon34
animationRate	config.h	/^  double animationRate = 60; $/;"	m	class:EinConfig
annotated_class_name	gaussian_map.h	/^  string annotated_class_name;$/;"	m	class:Scene
appendColorHist	ein.cpp	/^void appendColorHist(Mat& yCrCb_image, vector<KeyPoint>& keypoints, Mat& descriptors, Mat& descriptors2) {$/;"	f
appendSideAndSerial	ein.cpp	/^string appendSideAndSerial(MachineState * ms, string root) {$/;"	f
applyAsRelativePoseTo	eePose.cpp	/^_eePose _eePose::applyAsRelativePoseTo(_eePose in) const {$/;"	f	class:_eePose
applyGraspFilter	ein.cpp	/^void applyGraspFilter(MachineState * ms, double * rangeMapRegA, double * rangeMapRegB) {$/;"	f
applyQTo	eePose.cpp	/^_eePose _eePose::applyQTo(_eePose in) const {$/;"	f	class:_eePose
applyRPYTo	eePose.cpp	/^_eePose _eePose::applyRPYTo(double roll_z, double pitch_y, double yaw_x) const {$/;"	f	class:_eePose
args	opencl/oclNbody/inc/cmd_arg_reader.h	/^    ArgsMap     args;$/;"	m	class:CmdArgReader
armBackButtonCallback	ein.cpp	/^void MachineState::armBackButtonCallback(const baxter_core_msgs::DigitalIOState& dios) {$/;"	f	class:MachineState
armBot	config.h	/^  cv::Point armBot;$/;"	m	class:EinConfig
armItbCallbackSub	config.h	/^  ros::Subscriber armItbCallbackSub;$/;"	m	class:EinConfig
armOkButtonCallback	ein.cpp	/^void MachineState::armOkButtonCallback(const baxter_core_msgs::DigitalIOState& dios) {$/;"	f	class:MachineState
armPose	eePose.h	/^} armPose;$/;"	t	typeref:struct:_armPose
armShowButtonCallback	ein.cpp	/^void MachineState::armShowButtonCallback(const baxter_core_msgs::DigitalIOState& dios) {$/;"	f	class:MachineState
armTop	config.h	/^  cv::Point armTop;$/;"	m	class:EinConfig
armWidget	config.h	/^  ArmWidget * armWidget;$/;"	m	class:EinConfig
arm_button_back_sub	config.h	/^  ros::Subscriber arm_button_back_sub;$/;"	m	class:EinConfig
arm_button_ok_sub	config.h	/^  ros::Subscriber arm_button_ok_sub;$/;"	m	class:EinConfig
arm_button_show_sub	config.h	/^  ros::Subscriber arm_button_show_sub;$/;"	m	class:EinConfig
arm_pose	config.h	/^  eePose arm_pose;$/;"	m	struct:streamEePose
armedThreshold	config.h	/^  double armedThreshold = 0.05;$/;"	m	class:EinConfig
assignScore	gaussian_map.cpp	/^double Scene::assignScore() {$/;"	f	class:Scene
asymptotic_ufactors	cephes/scipy_iv.c	/^static const double asymptotic_ufactors[N_UFACTORS][N_UFACTOR_TERMS] = {$/;"	v	file:
aveFrequency	config.h	/^  double aveFrequency = 0.0;$/;"	m	class:EinConfig
aveFrequencyRange	config.h	/^  double aveFrequencyRange = 0.0;$/;"	m	class:EinConfig
aveTime	config.h	/^  double aveTime = 0.0;$/;"	m	class:EinConfig
aveTimeRange	config.h	/^  double aveTimeRange = 0.0;$/;"	m	class:EinConfig
averagedWrechAcc	config.h	/^  double averagedWrechAcc = 0;$/;"	m	class:EinConfig
averagedWrechDecay	config.h	/^  double averagedWrechDecay = 0.95;$/;"	m	class:EinConfig
averagedWrechMass	config.h	/^  double averagedWrechMass = 0;$/;"	m	class:EinConfig
axes	slu/math2d.h	/^struct axes {$/;"	s
azetac	cephes/zetac.c	/^static double azetac[] = {$/;"	v	file:
azetac	cephes/zetac.c	/^static unsigned short azetac[] = {$/;"	v	file:
b	config.h	/^  double r, g, b;$/;"	m	struct:MapCell
b	gaussian_map.h	/^  double r,g,b,a;$/;"	m	class:OrientedRay
b31x	config.h	/^  double b31x;$/;"	m	struct:pixelToGlobalCache
b31y	config.h	/^  double b31y;$/;"	m	struct:pixelToGlobalCache
b42x	config.h	/^  double b42x;$/;"	m	struct:pixelToGlobalCache
b42y	config.h	/^  double b42y;$/;"	m	struct:pixelToGlobalCache
bARM	config.h	/^  int bARM = 100;$/;"	m	class:EinConfig
bBot	config.h	/^  cv::Point bBot;$/;"	m	struct:BoxMemory
bBots	config.h	/^  vector<cv::Point> bBots;$/;"	m	class:EinConfig
bCens	config.h	/^  vector<cv::Point> bCens;$/;"	m	class:EinConfig
bDelta	config.h	/^  double bDelta = GRID_COARSE;$/;"	m	class:EinConfig
bDiffx	config.h	/^  double bDiffx;$/;"	m	struct:pixelToGlobalCache
bDiffy	config.h	/^  double bDiffy;$/;"	m	struct:pixelToGlobalCache
bDouble	opencl/oclNbody/src/oclNbody.cpp	/^bool bDouble = false;               \/\/false: sp float, true: dp $/;"	v
bFullScreen	opencl/oclNbody/src/oclNbody.cpp	/^bool bFullScreen = false;$/;"	v
bGO	config.h	/^  int bGO = 30;$/;"	m	class:EinConfig
bKeypoints	config.h	/^  vector< vector<KeyPoint> > bKeypoints;$/;"	m	class:EinConfig
bLabels	config.h	/^  vector<int> bLabels;$/;"	m	class:EinConfig
bNoPrompt	opencl/oclNbody/src/oclNbody.cpp	/^shrBOOL bNoPrompt = shrFALSE;       \/\/ false = normal GL loop, true = Finite period of GL loop (a few seconds)$/;"	v
bPause	opencl/oclNbody/src/oclNbody.cpp	/^bool bPause = false;$/;"	v
bQATest	opencl/oclNbody/src/oclNbody.cpp	/^shrBOOL bQATest = shrFALSE;         \/\/ false = normal GL loop, true = run No-GL test sequence (checks against host and also does a perf test)$/;"	v
bShowSliders	opencl/oclNbody/src/oclNbody.cpp	/^bool bShowSliders = true;$/;"	v
bTop	config.h	/^  cv::Point bTop;$/;"	m	struct:BoxMemory
bTops	config.h	/^  vector<cv::Point> bTops; $/;"	m	class:EinConfig
bTour	opencl/oclNbody/src/oclNbody.cpp	/^shrBOOL bTour = shrTRUE;            \/\/ true = cycles between modes, false = stays on selected 1 mode (manually switchable)$/;"	v
bUsePBO	opencl/oclNbody/src/oclNbody.cpp	/^bool bUsePBO = false;$/;"	v
bWords	config.h	/^  vector< vector<int> > bWords;$/;"	m	class:EinConfig
bYCrCb	config.h	/^  vector<Mat> bYCrCb;$/;"	m	class:EinConfig
backScanningPose	config.h	/^  eePose backScanningPose;$/;"	m	class:EinConfig
backTouchF	ein_aibo.h	/^  double backTouchF;$/;"	m	class:EinAiboSensors
backTouchM	ein_aibo.h	/^  double backTouchM;$/;"	m	class:EinAiboSensors
backTouchR	ein_aibo.h	/^  double backTouchR;$/;"	m	class:EinAiboSensors
backgroundWindow	config.h	/^  EinWindow * backgroundWindow;$/;"	m	class:EinConfig
background_map	gaussian_map.h	/^  shared_ptr<GaussianMap> background_map;$/;"	m	class:Scene
bagTableZ	config.h	/^  double bagTableZ = oneTable;\/\/0.165;\/\/0.19;\/\/0.18; \/\/0.195;\/\/0.22;$/;"	m	class:EinConfig
bailAfterGradient	config.h	/^  int bailAfterGradient = 0;$/;"	m	class:EinConfig
bailAfterSynchronic	config.h	/^  int bailAfterSynchronic = 1;$/;"	m	class:EinConfig
bar_col_inner	opencl/oclNbody/inc/paramgl.h	/^          float bar_col_inner[3];$/;"	m	class:ParamListGL
bar_col_outer	opencl/oclNbody/inc/paramgl.h	/^          float bar_col_outer[3];$/;"	m	class:ParamListGL
bar_h	opencl/oclNbody/inc/paramgl.h	/^          int bar_h;$/;"	m	class:ParamListGL
bar_offset	opencl/oclNbody/inc/paramgl.h	/^          int bar_offset;$/;"	m	class:ParamListGL
bar_w	opencl/oclNbody/inc/paramgl.h	/^          int bar_w;$/;"	m	class:ParamListGL
bar_x	opencl/oclNbody/inc/paramgl.h	/^          int bar_x;$/;"	m	class:ParamListGL
base64_chars	base64.cpp	/^static const std::string base64_chars = $/;"	v	file:
base64_decode	base64.cpp	/^std::string base64_decode(std::string const& encoded_string) {$/;"	f
base64_encode	base64.cpp	/^std::string base64_encode(unsigned char const* bytes_to_encode, unsigned int in_len) {$/;"	f
base_pose	config.h	/^  eePose base_pose;$/;"	m	struct:streamEePose
bbLearningMaxTries	config.h	/^  int bbLearningMaxTries = 15;$/;"	m	class:EinConfig
bdtr	cephes/bdtr.c	/^double bdtr(k, n, p)$/;"	f
bdtr	cephes/cephes_names.h	6;"	d
bdtrc	cephes/bdtr.c	/^double bdtrc(k, n, p)$/;"	f
bdtrc	cephes/cephes_names.h	5;"	d
bdtri	cephes/bdtr.c	/^double bdtri(k, n, y)$/;"	f
bdtri	cephes/cephes_names.h	7;"	d
beeHome	config.h	/^  eePose beeHome;$/;"	m	class:EinConfig
beginWinCoords	opencl/oclNbody/src/paramgl.cpp	/^void beginWinCoords(void)$/;"	f
bestOrientationAngle	config.h	/^  double bestOrientationAngle = 0;$/;"	m	class:EinConfig
bestOrientationEEPose	config.h	/^  eePose bestOrientationEEPose = straightDown;$/;"	m	class:EinConfig
beta	cephes/beta.c	/^double beta(a, b)$/;"	f
beta	cephes/cephes_names.h	8;"	d
beta_negint	cephes/beta.c	/^static double beta_negint(int a, double b)$/;"	f	file:
bfc	config.h	/^  int bfc = 0;$/;"	m	class:EinConfig
bfc_period	config.h	/^  int bfc_period = 3;$/;"	m	class:EinConfig
big	cephes/igam.c	/^static double big = 4.503599627370496e15;$/;"	v	file:
big	cephes/incbet.c	/^static double big = 4.503599627370496e15;$/;"	v	file:
biggestL1	config.h	/^  int biggestL1 = 0;$/;"	m	class:EinConfig
biginv	cephes/igam.c	/^static double biginv = 2.22044604925031308085e-16;$/;"	v	file:
biginv	cephes/incbet.c	/^static double biginv = 2.22044604925031308085e-16;$/;"	v	file:
bilinValAtCell	gaussian_map.cpp	/^GaussianMapCell GaussianMap::bilinValAtCell(double _x, double _y) {$/;"	f	class:GaussianMap
bilinValAtMeters	gaussian_map.cpp	/^GaussianMapCell GaussianMap::bilinValAtMeters(double x, double y) {$/;"	f	class:GaussianMap
blue	gaussian_map.h	/^  GaussianMapChannel blue;$/;"	m	struct:_GaussianMapCell
blueBoxForPixel	ein.cpp	/^int blueBoxForPixel(MachineState * ms, int px, int py)$/;"	f
blueBoxMemories	config.h	/^  vector<BoxMemory> blueBoxMemories;$/;"	m	class:EinConfig
bodyBodyInteraction	opencl/oclNbody/src/oclNbodyGold.cpp	/^void bodyBodyInteraction(float accel[3], float posMass0[4], float posMass1[4], float softeningSquared) $/;"	f
bot	config.h	/^  eePose bot;$/;"	m	struct:BoxMemory
bot	config.h	/^  eePose bot;$/;"	m	struct:Sprite
bowExtractor	config.h	/^  BOWImgDescriptorExtractor *bowExtractor = NULL;$/;"	m	class:EinConfig
bowGetFeatures	ein.cpp	/^void bowGetFeatures(MachineState * ms, std::string classDir, const char *className, double sigma, int keypointPeriod, int * grandTotalDescriptors, DescriptorExtractor * extractor, BOWKMeansTrainer * bowTrainer) {$/;"	f
bowTrainer	config.h	/^  BOWKMeansTrainer *bowTrainer = NULL; $/;"	m	class:EinConfig
boxMemoryIntersectCentroid	ein.cpp	/^bool boxMemoryIntersectCentroid(BoxMemory b1, BoxMemory b2) {$/;"	f
boxMemoryIntersectPolygons	ein.cpp	/^bool boxMemoryIntersectPolygons(BoxMemory b1, BoxMemory b2) {$/;"	f
boxMemoryIntersectsMapCell	ein.cpp	/^bool boxMemoryIntersectsMapCell(MachineState * ms, BoxMemory b, int map_i, int map_j) {$/;"	f
boxMemoryToPolygon	ein_util.cpp	/^gsl_matrix * boxMemoryToPolygon(BoxMemory b) {$/;"	f
breakGraspTiesWithNoise	config.h	/^  bool breakGraspTiesWithNoise = true;$/;"	m	class:EinConfig
btdtr	cephes/btdtr.c	/^double btdtr(a, b, x)$/;"	f
btdtr	cephes/cephes_names.h	10;"	d
buttonState	opencl/oclNbody/src/oclNbody.cpp	/^int buttonState          = 0;$/;"	v
bx	config.h	/^  double bx;$/;"	m	struct:pixelToGlobalCache
by	config.h	/^  double by;$/;"	m	struct:pixelToGlobalCache
c	randomkit.h	/^    double c;$/;"	m	struct:rk_state_
c1	cephes/airy.c	/^static double c1 = 0.35502805388781723926;$/;"	v	file:
c2	cephes/airy.c	/^static double c2 = 0.258819403792806798405;$/;"	v	file:
c3dPoseBase	config.h	/^  eePose c3dPoseBase;$/;"	m	class:EinConfig
cBots	config.h	/^  vector<cv::Point> cBots;$/;"	m	class:EinConfig
cExecutablePath	opencl/oclNbody/src/oclNbody.cpp	/^const char* cExecutablePath;$/;"	v
cLogFilePathAndName	opencl/oclNbody/src/shrUtils.cpp	/^char* cLogFilePathAndName = NULL;$/;"	v
cPathAndName	opencl/ein_opencl.cpp	/^  char* cPathAndName = NULL;          \/\/ var for full paths to data, src, etc.$/;"	m	struct:EinGpuConfig	file:
cReticleIndexDelta	config.h	/^  constexpr static double cReticleIndexDelta = .01;$/;"	m	class:EinConfig
cSourceCL	opencl/ein_opencl.cpp	/^  char* cSourceCL = NULL;             \/\/ Buffer to hold source for compilation $/;"	m	struct:EinGpuConfig	file:
cTops	config.h	/^  vector<cv::Point> cTops; $/;"	m	class:EinConfig
c_	tokenizer.hpp	/^  string_type  c_;$/;"	m	class:escaped_forth_separator
cache_prefix	config.h	/^  std::string cache_prefix = "";$/;"	m	class:EinConfig
calibrateGripper	ein.cpp	/^int calibrateGripper(MachineState * ms) {$/;"	f
calibrationPose	config.h	/^  eePose calibrationPose;$/;"	m	class:EinConfig
callStackModel	qtgui/armwidget.h	/^    StackModel * callStackModel;$/;"	m	class:ArmWidget
call_stack	config.h	/^  std::vector<std::shared_ptr<Word> > call_stack;$/;"	m	class:MachineState
cam_img	config.h	/^  cv::Mat cam_img;$/;"	m	class:EinConfig
cameraCalibrationMode	config.h	/^} cameraCalibrationMode;$/;"	t	typeref:enum:__anon31
cameraClient	config.h	/^  ros::ServiceClient cameraClient;$/;"	m	class:EinConfig
cameraExposure	config.h	/^  int cameraExposure = -1;$/;"	m	class:EinConfig
cameraGain	config.h	/^  int cameraGain = -1;$/;"	m	class:EinConfig
cameraPose	config.h	/^  eePose cameraPose;$/;"	m	struct:BoxMemory
cameraTime	config.h	/^  ros::Time cameraTime;$/;"	m	struct:BoxMemory
cameraWhiteBalanceBlue	config.h	/^  int cameraWhiteBalanceBlue = -1;$/;"	m	class:EinConfig
cameraWhiteBalanceGreen	config.h	/^  int cameraWhiteBalanceGreen = -1;$/;"	m	class:EinConfig
cameraWhiteBalanceRed	config.h	/^  int cameraWhiteBalanceRed = -1;$/;"	m	class:EinConfig
camera_rot	opencl/oclNbody/src/oclNbody.cpp	/^float camera_rot[]       = {0, 0, 0};$/;"	v
camera_rot_lag	opencl/oclNbody/src/oclNbody.cpp	/^float camera_rot_lag[]   = {0, 0, 0};$/;"	v
camera_trans	opencl/oclNbody/src/oclNbody.cpp	/^float camera_trans[]     = {0, -2, -100};$/;"	v
camera_trans_lag	opencl/oclNbody/src/oclNbody.cpp	/^float camera_trans_lag[] = {0, -2, -100};$/;"	v
canny_hi_thresh	config.h	/^  double canny_hi_thresh = 5e5;\/\/7;$/;"	m	class:EinConfig
canny_lo_thresh	config.h	/^  double canny_lo_thresh = 5e5;\/\/4;$/;"	m	class:EinConfig
captureLineEdit	qtgui/armwidget.h	/^    CaptureLineEdit * captureLineEdit;$/;"	m	class:ArmWidget
castRangeRay	ein.cpp	/^void castRangeRay(MachineState * ms, double thisRange, eePose thisPose, Vector3d * castPointOut, Vector3d * rayDirectionOut) {$/;"	f
castRecentRangeRay	config.h	/^  int castRecentRangeRay = 1;$/;"	m	class:EinConfig
cbrt	cephes/cbrt.c	/^double cbrt(double x)$/;"	f
cbrt	cephes/cephes_names.h	11;"	d
cd	cephes/fresnl.c	/^static double cd[7] = {$/;"	v	file:
cd	cephes/fresnl.c	/^static unsigned short cd[28] = {$/;"	v	file:
cdDevices	opencl/ein_opencl.cpp	/^  cl_device_id *cdDevices = NULL;     \/\/ OpenCL device list$/;"	m	struct:EinGpuConfig	file:
cdDevices	opencl/oclNbody/src/oclNbody.cpp	/^cl_device_id *cdDevices = NULL;     \/\/ OpenCL device list$/;"	v
cellIsMapped	ein.cpp	/^bool cellIsMapped(MachineState * ms, int i, int j) {$/;"	f
cellIsSearched	ein.cpp	/^bool cellIsSearched(double fenceXMin, double fenceXMax, double fenceYMin, double fenceYMax, double xmin, double ymin, double mapStep, int i, int j) {$/;"	f
cellToMeters	gaussian_map.cpp	/^void GaussianMap::cellToMeters(int xc, int yc, double * xm, double * ym) {$/;"	f	class:GaussianMap
cellToMeters	gaussian_map.cpp	/^void Scene::cellToMeters(int xc, int yc, double * xm, double * ym) {$/;"	f	class:Scene
cell_width	gaussian_map.h	/^  double cell_width = 0.01;$/;"	m	class:GaussianMap
cell_width	gaussian_map.h	/^  double cell_width = 0.01;$/;"	m	class:Scene
cells	gaussian_map.h	/^  GaussianMapCell *cells = NULL;$/;"	m	class:GaussianMap
centerReticle	config.h	/^  eePose centerReticle = eePose(325, 127, 0.0,$/;"	m	class:EinConfig
centralWidget	qtgui/window_QT.h	/^    QPointer<QWidget> centralWidget;$/;"	m	class:DefaultEinViewPort
centroid	config.h	/^  eePose centroid;$/;"	m	struct:BoxMemory
cfi	config.h	/^  int cfi = 1;$/;"	m	class:EinConfig
chDistribution	config.h	/^  Mat chDistribution;$/;"	m	class:EinConfig
chHistogram	config.h	/^  Mat chHistogram;$/;"	m	class:EinConfig
chWinner	config.h	/^  int chWinner;$/;"	m	class:EinConfig
changeTargetClass	ein.cpp	/^void changeTargetClass(MachineState * ms, int newTargetClass) {$/;"	f
char_eq	tokenizer.hpp	/^    char_eq(Char e):e_(e) { }$/;"	f	struct:escaped_forth_separator::char_eq
char_eq	tokenizer.hpp	/^  struct char_eq {$/;"	s	class:escaped_forth_separator
character_code	word.h	/^  virtual int character_code() {$/;"	f	class:Word
character_code_to_word	word.cpp	/^std::map<int, std::shared_ptr<Word> > character_code_to_word;$/;"	v
chbevl	cephes/chbevl.c	/^double chbevl(x, array, n)$/;"	f
chdtr	cephes/cephes_names.h	13;"	d
chdtr	cephes/chdtr.c	/^double chdtr(df, x)$/;"	f
chdtrc	cephes/cephes_names.h	12;"	d
chdtrc	cephes/chdtr.c	/^double chdtrc(df, x)$/;"	f
chdtri	cephes/cephes_names.h	14;"	d
chdtri	cephes/chdtr.c	/^double chdtri(df, y)$/;"	f
checkAndStreamWord	ein.cpp	/^void checkAndStreamWord(MachineState * ms, string wordIn, string commandIn) {$/;"	f
checkProb	gaussian_map.cpp	/^void checkProb(string label, double prob) {$/;"	f
checkconsistency8	ikfast/baxter_left_arm_ikfast_solver.cpp	/^static inline bool checkconsistency8(const IkReal* Breal)$/;"	f	class:IKFAST_NAMESPACE::IKSolver
checkconsistency8	ikfast/baxter_right_arm_ikfast_solver.cpp	/^static inline bool checkconsistency8(const IkReal* Breal)$/;"	f	class:IKFAST_NAMESPACE::IKSolver
chinSensor	ein_aibo.h	/^  double chinSensor;$/;"	m	class:EinAiboSensors
chosen_feature	config.h	/^  featureType chosen_feature = SIFTBOW_GLOBALCOLOR_HIST;$/;"	m	class:EinConfig
cj0	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
cj0	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
cj1	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
cj1	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
cj2	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
cj2	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
cj3	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
cj3	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
cj4	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
cj4	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
cj5	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
cj5	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
cj6	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
cj6	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
ckSobel	opencl/ein_opencl.cpp	/^  cl_kernel ckSobel;                 \/\/ OpenCL Kernel array for Sobel$/;"	m	struct:EinGpuConfig	file:
clSourcefile	opencl/ein_opencl.cpp	/^  const char* clSourcefile = "SobelFilter.cl";  \/\/ OpenCL kernel source file$/;"	m	struct:EinGpuConfig	file:
clSourcefile	opencl/oclNbody/src/oclBodySystemOpenclLaunch.cpp	/^    char* clSourcefile = "oclNbodyKernel.cl";$/;"	v
class3dGrasps	config.h	/^  vector< vector<Grasp> > class3dGrasps;$/;"	m	class:EinConfig
classAerialGradients	config.h	/^  vector<Mat> classAerialGradients;$/;"	m	class:EinConfig
classGraspMemoryPicks1	config.h	/^  vector<Mat> classGraspMemoryPicks1;$/;"	m	class:EinConfig
classGraspMemoryPicks2	config.h	/^  vector<Mat> classGraspMemoryPicks2;$/;"	m	class:EinConfig
classGraspMemoryPicks3	config.h	/^  vector<Mat> classGraspMemoryPicks3;$/;"	m	class:EinConfig
classGraspMemoryPicks4	config.h	/^  vector<Mat> classGraspMemoryPicks4;$/;"	m	class:EinConfig
classGraspMemoryTries1	config.h	/^  vector<Mat> classGraspMemoryTries1;$/;"	m	class:EinConfig
classGraspMemoryTries2	config.h	/^  vector<Mat> classGraspMemoryTries2;$/;"	m	class:EinConfig
classGraspMemoryTries3	config.h	/^  vector<Mat> classGraspMemoryTries3;$/;"	m	class:EinConfig
classGraspMemoryTries4	config.h	/^  vector<Mat> classGraspMemoryTries4;$/;"	m	class:EinConfig
classGraspZs	config.h	/^  vector<double> classGraspZs;$/;"	m	class:EinConfig
classGraspZsSet	config.h	/^  vector<double> classGraspZsSet;$/;"	m	class:EinConfig
classHeight0AerialGradients	config.h	/^  vector<Mat> classHeight0AerialGradients;$/;"	m	class:EinConfig
classHeight1AerialGradients	config.h	/^  vector<Mat> classHeight1AerialGradients;$/;"	m	class:EinConfig
classHeight2AerialGradients	config.h	/^  vector<Mat> classHeight2AerialGradients;$/;"	m	class:EinConfig
classHeight3AerialGradients	config.h	/^  vector<Mat> classHeight3AerialGradients;$/;"	m	class:EinConfig
classHeightMemoryPicks	config.h	/^  vector<Mat> classHeightMemoryPicks;$/;"	m	class:EinConfig
classHeightMemoryTries	config.h	/^  vector<Mat> classHeightMemoryTries;$/;"	m	class:EinConfig
classIdxForName	ein.cpp	/^int classIdxForName(MachineState * ms, string name) {$/;"	f
classLabels	config.h	/^  vector<string> classLabels; $/;"	m	class:EinConfig
classPlaceOverPoints	config.h	/^  vector< vector<eePose> > classPlaceOverPoints;$/;"	m	class:EinConfig
classPlaceUnderPoints	config.h	/^  vector< vector<eePose> > classPlaceUnderPoints;$/;"	m	class:EinConfig
classPoseModels	config.h	/^  vector<string> classPoseModels;$/;"	m	class:EinConfig
classPosekNNfeatures	config.h	/^  vector<Mat> classPosekNNfeatures;$/;"	m	class:EinConfig
classPosekNNlabels	config.h	/^  vector<Mat> classPosekNNlabels;$/;"	m	class:EinConfig
classPosekNNs	config.h	/^  vector<CvKNearest*> classPosekNNs;$/;"	m	class:EinConfig
classQuaternions	config.h	/^  vector< vector< cv::Vec<double,4> > > classQuaternions;$/;"	m	class:EinConfig
classRangeMaps	config.h	/^  vector<Mat> classRangeMaps;$/;"	m	class:EinConfig
class_crops_path	config.h	/^  std::string class_crops_path;$/;"	m	class:EinConfig
class_scene_models	config.h	/^  vector<shared_ptr<Scene> > class_scene_models;$/;"	m	class:EinConfig
clearAllRangeMaps	ein.cpp	/^void clearAllRangeMaps(MachineState * ms) {$/;"	f
clearData	word.cpp	/^void MachineState::clearData() {$/;"	f	class:MachineState
clearMapForPatrol	ein.cpp	/^void clearMapForPatrol(MachineState * ms) {$/;"	f
clearStack	word.cpp	/^void MachineState::clearStack() {$/;"	f	class:MachineState
clearanceMap	config.h	/^  int clearanceMap[mapWidth * mapHeight];$/;"	m	class:EinConfig
clearanceMapState	config.h	/^} clearanceMapState;$/;"	t	typeref:enum:__anon10
cmDevBufIn	opencl/ein_opencl.cpp	/^  cl_mem cmDevBufIn;                 \/\/ OpenCL device memory input buffer object  $/;"	m	struct:GaussianMapGpu	file:
cmDevBufIn	opencl/ein_opencl.cpp	/^  cl_mem* cmDevBufIn;                 \/\/ OpenCL device memory input buffer object  $/;"	m	struct:ImageGpu	file:
cmDevBufOut	opencl/ein_opencl.cpp	/^  cl_mem cmDevBufOut;                \/\/ OpenCL device memory output buffer object$/;"	m	struct:GaussianMapGpu	file:
cmPinnedBufIn	opencl/ein_opencl.cpp	/^  cl_mem cmPinnedBufIn;               \/\/ OpenCL host memory input buffer object:  pinned $/;"	m	struct:GaussianMapGpu	file:
cmPinnedBufIn	opencl/ein_opencl.cpp	/^  cl_mem cmPinnedBufIn;               \/\/ OpenCL host memory input buffer object:  pinned $/;"	m	struct:ImageGpu	file:
cmPinnedBufOut	opencl/ein_opencl.cpp	/^  cl_mem cmPinnedBufOut;              \/\/ OpenCL host memory output buffer object:  pinned$/;"	m	struct:GaussianMapGpu	file:
cmplx	cephes/cpmul.c	/^} cmplx;$/;"	t	typeref:struct:__anon37	file:
cmplx	cephes/protos.h	/^} cmplx;$/;"	t	typeref:struct:__anon38
cn	cephes/fresnl.c	/^static double cn[6] = {$/;"	v	file:
cn	cephes/fresnl.c	/^static unsigned short cn[24] = {$/;"	v	file:
collisionDetectionState	config.h	/^  ros::Subscriber collisionDetectionState;$/;"	m	class:EinConfig
collisionDetectionStateCallback	ein.cpp	/^void MachineState::collisionDetectionStateCallback(const baxter_core_msgs::CollisionDetectionState& cds) {$/;"	f	class:MachineState
collisionStateBuffer	config.h	/^  list<CollisionDetection> collisionStateBuffer;$/;"	m	class:EinConfig
columnCount	qtgui/stackmodel.cpp	/^int StackModel::columnCount(const QModelIndex & \/* parent *\/) const$/;"	f	class:StackModel
columns	qtgui/stackmodel.cpp	/^} columns;$/;"	t	typeref:enum:__anon5	file:
comeToHoverStart	config.h	/^  ros::Time comeToHoverStart;$/;"	m	class:EinConfig
comeToHoverTimeout	config.h	/^  double comeToHoverTimeout = 3.0;$/;"	m	class:EinConfig
comeToStopStart	config.h	/^  ros::Time comeToStopStart;$/;"	m	class:EinConfig
comeToStopTimeout	config.h	/^  double comeToStopTimeout = 30.0;$/;"	m	class:EinConfig
command	config.h	/^  string command;$/;"	m	struct:streamWord
commonFreq	config.h	/^  constexpr static double commonFreq = 1.0;\/\/1.0\/2.0;$/;"	m	class:EinConfig
compareData	opencl/oclNbody/src/shrUtils.cpp	/^compareData( const T* reference, const T* data, const unsigned int len, $/;"	f
compareDataAsFloat	opencl/oclNbody/src/shrUtils.cpp	/^compareDataAsFloat( const T* reference, const T* data, const unsigned int len, $/;"	f
compareDataAsFloatThreshold	opencl/oclNbody/src/shrUtils.cpp	/^compareDataAsFloatThreshold( const T* reference, const T* data, const unsigned int len, $/;"	f
compareDiscrepancyDescending	gaussian_map.cpp	/^bool compareDiscrepancyDescending(const SceneObjectScore &i, const SceneObjectScore &j) {$/;"	f
completer	qtgui/armwidget.h	/^    QCompleter * completer;$/;"	m	class:ArmWidget
composePredictedMap	gaussian_map.cpp	/^void Scene::composePredictedMap() {$/;"	f	class:Scene
composePredictedMap	gaussian_map.cpp	/^void Scene::composePredictedMap(double threshold) {$/;"	f	class:Scene
compress_string	compress.cpp	/^std::string compress_string(const std::string& str,$/;"	f
compress_string	compress.cpp	/^std::string compress_string(const unsigned char * data, int length,$/;"	f
computeClassificationDistributionFromHistogram	ein.cpp	/^void computeClassificationDistributionFromHistogram(MachineState * ms) {$/;"	f
computeGold	opencl/oclNbody/src/oclNbodyGold.cpp	/^void computeGold( float* force, float* pos, const unsigned int numBodies, float softeningSquared) $/;"	f
computeInnerProduct	gaussian_map.cpp	/^void computeInnerProduct(GaussianMapChannel & channel1, GaussianMapChannel & channel2, double * likelihood, double * channel_term_out) {$/;"	f
computeLogLikelihood	gaussian_map.cpp	/^double computeLogLikelihood(MachineState * ms, GaussianMapChannel & channel1, GaussianMapChannel & channel2) {$/;"	f
computePixelToGlobalCache	ein.cpp	/^void computePixelToGlobalCache(MachineState * ms, double gZ, eePose givenEEPose, pixelToGlobalCache * cache) {$/;"	f
computePixelToPlaneCache	ein.cpp	/^void computePixelToPlaneCache(MachineState * ms, double gZ, eePose givenEEPose, eePose referenceFrame, pixelToGlobalCache * cache) {$/;"	f
computePointDiscrepancy	gaussian_map.cpp	/^void computePointDiscrepancy(GaussianMapChannel & channel1, GaussianMapChannel & channel2, double * likelihood, double * channel_term_normalized) {$/;"	f
computeProbabilityOfMap	gaussian_map.cpp	/^double Scene::computeProbabilityOfMap() {$/;"	f	class:Scene
computeProbabilityOfMap1	gaussian_map.cpp	/^double Scene::computeProbabilityOfMap1() {$/;"	f	class:Scene
computeProbabilityOfMapDouble	gaussian_map.cpp	/^double Scene::computeProbabilityOfMapDouble() {$/;"	f	class:Scene
computeScore	gaussian_map.cpp	/^double Scene::computeScore() { $/;"	f	class:Scene
computeSimilarity	ein.cpp	/^double computeSimilarity(MachineState * ms, Mat im1, Mat im2) {$/;"	f
computeSimilarity	ein.cpp	/^double computeSimilarity(MachineState * ms, int class1, int class2) {$/;"	f
config	config.h	/^  EinConfig config;$/;"	m	class:MachineState
config_directory	config.h	/^  std::string config_directory = "\/config\/";$/;"	m	class:EinConfig
continuousServo	ein.cpp	/^void continuousServo(MachineState * ms) {$/;"	f
controlImagePosition	qtgui/window_QT.cpp	/^void DefaultEinViewPort::controlImagePosition()$/;"	f	class:DefaultEinViewPort
controlMode	config.h	/^} controlMode;$/;"	t	typeref:enum:__anon28
control_stack	config.h	/^  std::vector<std::shared_ptr<Word> > control_stack;$/;"	m	class:MachineState
convertGlobalGraspIdxToLocal	ein.cpp	/^void convertGlobalGraspIdxToLocal(MachineState * ms, const int rx, const int ry, $/;"	f
convertHeightGlobalZToIdx	ein.cpp	/^void convertHeightGlobalZToIdx(MachineState * ms, double globalZ) {$/;"	f
convertHeightIdxToGlobalZ	ein.cpp	/^double convertHeightIdxToGlobalZ(MachineState * ms, int heightIdx) {$/;"	f
convertHeightIdxToLocalZ	ein.cpp	/^double convertHeightIdxToLocalZ(MachineState * ms, int heightIdx) {$/;"	f
convertLocalGraspIdxToGlobal	ein.cpp	/^void convertLocalGraspIdxToGlobal(MachineState * ms, const int localX, const int localY,$/;"	f
convertToT	opencl/oclNbody/inc/cmd_arg_reader.h	/^CmdArgReader::convertToT( const std::string& element, T& val)$/;"	f	class:CmdArgReader
convertToT	opencl/oclNbody/inc/cmd_arg_reader.h	/^CmdArgReader::convertToT<bool>( const std::string& element, bool& val) $/;"	f	class:CmdArgReader
convertToT	opencl/oclNbody/inc/cmd_arg_reader.h	/^CmdArgReader::convertToT<double>( const std::string& element, double& val) $/;"	f	class:CmdArgReader
convertToT	opencl/oclNbody/inc/cmd_arg_reader.h	/^CmdArgReader::convertToT<float>( const std::string& element, float& val) $/;"	f	class:CmdArgReader
convertToT	opencl/oclNbody/inc/cmd_arg_reader.h	/^CmdArgReader::convertToT<int>( const std::string& element, int& val) $/;"	f	class:CmdArgReader
convertToT	opencl/oclNbody/inc/cmd_arg_reader.h	/^CmdArgReader::convertToT<std::string>( const std::string& element, $/;"	f	class:CmdArgReader
copy	gaussian_map.cpp	/^shared_ptr<GaussianMap> GaussianMap::copy() {$/;"	f	class:GaussianMap
copy	gaussian_map.cpp	/^shared_ptr<Scene> Scene::copy() {$/;"	f	class:Scene
copy	word.cpp	/^shared_ptr<CompoundWord> CompoundWord::copy(shared_ptr<CompoundWord> cWord) {$/;"	f	class:CompoundWord
copyBox	gaussian_map.cpp	/^shared_ptr<GaussianMap> GaussianMap::copyBox(int _x1, int _y1, int _x2, int _y2) {$/;"	f	class:GaussianMap
copyBox	gaussian_map.cpp	/^shared_ptr<Scene> Scene::copyBox(int _x1, int _y1, int _x2, int _y2) {$/;"	f	class:Scene
copyClassGraspMemoryTriesToGraspMemoryTries	ein.cpp	/^void copyClassGraspMemoryTriesToGraspMemoryTries(MachineState * ms) {$/;"	f
copyDir	ein_util.cpp	/^bool copyDir(string src, string dest) {$/;"	f
copyGraspMemoryRegister	ein.cpp	/^void copyGraspMemoryRegister(MachineState * ms, double * src, double * target) {$/;"	f
copyGraspMemoryTriesToClassGraspMemoryTries	ein.cpp	/^void copyGraspMemoryTriesToClassGraspMemoryTries(MachineState * ms) {$/;"	f
copyHeightMemoryTriesToClassHeightMemoryTries	ein.cpp	/^void copyHeightMemoryTriesToClassHeightMemoryTries(MachineState * ms) {$/;"	f
copyP	eePose.cpp	/^void _eePose::copyP(_eePose src) {$/;"	f	class:_eePose
copyPaddedDiscrepancySupport	gaussian_map.cpp	/^shared_ptr<Scene> Scene::copyPaddedDiscrepancySupport(double threshold, double pad_meters) {$/;"	f	class:Scene
copyQ	eePose.cpp	/^void _eePose::copyQ(_eePose src) {$/;"	f	class:_eePose
copyRangeMapRegister	ein.cpp	/^void copyRangeMapRegister(MachineState * ms, double * src, double * target) {$/;"	f
coreViewImage	config.h	/^  Mat coreViewImage;$/;"	m	class:EinConfig
coreViewWindow	config.h	/^  EinWindow * coreViewWindow;$/;"	m	class:EinConfig
cornellTables	config.h	/^  vector<eePose> cornellTables;$/;"	m	class:EinConfig
coscof	cephes/sindg.c	/^static double coscof[] = {$/;"	v	file:
coscof	cephes/sindg.c	/^static unsigned short coscof[] = {$/;"	v	file:
coscof	cephes/unity.c	/^static double coscof[7] = {$/;"	v	file:
cosdg	cephes/cephes_names.h	77;"	d
cosdg	cephes/sindg.c	/^double cosdg(x)$/;"	f
cosm1	cephes/cephes_names.h	88;"	d
cosm1	cephes/unity.c	/^double cosm1(double x)$/;"	f
cotdg	cephes/cephes_names.h	85;"	d
cotdg	cephes/tandg.c	/^double cotdg(double x)$/;"	f
countDiscrepantCells	gaussian_map.cpp	/^int Scene::countDiscrepantCells(double threshold, int _x1, int _y1, int _x2, int _y2) {$/;"	f	class:Scene
counterTableZ	config.h	/^  double counterTableZ = oneTable;\/\/0.165;\/\/0.19;\/\/0.18;\/\/0.209123; \/\/0.20;\/\/0.18;$/;"	m	class:EinConfig
counts	gaussian_map.h	/^  double counts;$/;"	m	struct:_GaussianMapChannel
counts	gaussian_map.h	/^  shared_ptr<int> counts;$/;"	m	class:TransitionTable
cpPlatform	opencl/ein_opencl.cpp	/^  cl_platform_id cpPlatform;          \/\/ OpenCL Platform$/;"	m	struct:EinGpuConfig	file:
cpPlatform	opencl/oclNbody/src/oclNbody.cpp	/^cl_platform_id cpPlatform;          \/\/ OpenCL Platform$/;"	v
cpProgram	opencl/ein_opencl.cpp	/^  cl_program cpProgram;               \/\/ OpenCL program$/;"	m	struct:EinGpuConfig	file:
cpmul	cephes/cpmul.c	/^void cpmul(a, da, b, db, c, dc)$/;"	f
cpuReflection	opencl/ein_opencl.cpp	/^  shared_ptr<GaussianMap> cpuReflection;$/;"	m	struct:GaussianMapGpu	file:
cqCommandQueue	opencl/ein_opencl.cpp	/^  cl_command_queue cqCommandQueue;    \/\/ OpenCL Command Queue$/;"	m	struct:EinGpuConfig	file:
cqCommandQueue	opencl/oclNbody/inc/oclBodySystemOpencl.h	/^        cl_command_queue cqCommandQueue;$/;"	m	class:BodySystemOpenCL
cqCommandQueue	opencl/oclNbody/src/oclNbody.cpp	/^cl_command_queue cqCommandQueue;    \/\/ OpenCL Command Queue$/;"	v
crane1	config.h	/^  eePose crane1;$/;"	m	class:EinConfig
createArgsMaps	opencl/oclNbody/src/cmd_arg_reader.cpp	/^CmdArgReader::createArgsMaps( const int argc, const char** argv) {$/;"	f	class:CmdArgReader
createEmptyScene	gaussian_map.cpp	/^shared_ptr<Scene> Scene::createEmptyScene(MachineState * ms) {$/;"	f	class:Scene
createFromFile	gaussian_map.cpp	/^shared_ptr<Scene> Scene::createFromFile(MachineState * ms, string filename) {$/;"	f	class:Scene
createGaussianMap	opencl/oclNbody/src/oclRenderParticles.cpp	/^unsigned char* createGaussianMap(int N)$/;"	f
create_character_code_to_word	word.cpp	/^std::map<int, std::shared_ptr<Word> > create_character_code_to_word(std::vector<std::shared_ptr<Word> > words) {$/;"	f
create_name_to_word	word.cpp	/^std::map<string, std::shared_ptr<Word> > create_name_to_word(std::vector<std::shared_ptr<Word> > words) {$/;"	f
creationTime	config.h	/^  ros::Time creationTime;$/;"	m	struct:Sprite
cropCounter	config.h	/^  int cropCounter;$/;"	m	class:EinConfig
cropUpperLeftCorner	config.h	/^  eePose cropUpperLeftCorner = eePose(320, 200, 0.0,$/;"	m	class:EinConfig
cross	opencl/oclNbody/src/oclBodySystemCpu.cpp	/^float3 cross(float3 v0, float3 v1)$/;"	f
cuffGraspCallback	ein.cpp	/^void MachineState::cuffGraspCallback(const baxter_core_msgs::DigitalIOState& cuffDIOS) {$/;"	f	class:MachineState
cuffOkCallback	ein.cpp	/^void MachineState::cuffOkCallback(const baxter_core_msgs::DigitalIOState& cuffDIOS) {$/;"	f	class:MachineState
cuff_grasp_sub	config.h	/^  ros::Subscriber cuff_grasp_sub;$/;"	m	class:EinConfig
cuff_ok_sub	config.h	/^  ros::Subscriber cuff_ok_sub;$/;"	m	class:EinConfig
cumulativeGripperMask	config.h	/^  Mat cumulativeGripperMask;$/;"	m	class:EinConfig
current3dGraspIndex	config.h	/^  int current3dGraspIndex = -1;$/;"	m	class:EinConfig
currentAnimationMode	config.h	/^  animationMode currentAnimationMode = ANIMATION_ON; $/;"	m	class:EinConfig
currentAnimationState	config.h	/^  AnimationState currentAnimationState = {"confused", 0}; $/;"	m	class:EinConfig
currentBoundingBoxMode	config.h	/^  pickMode currentBoundingBoxMode = STATIC_MARGINALS;$/;"	m	class:EinConfig
currentCameraCalibrationMode	config.h	/^  cameraCalibrationMode currentCameraCalibrationMode = CAMCAL_HYPERBOLIC;$/;"	m	class:EinConfig
currentControlMode	config.h	/^  controlMode currentControlMode = EEPOSITION;$/;"	m	class:EinConfig
currentCornellTableIndex	config.h	/^  int currentCornellTableIndex = 0;$/;"	m	class:EinConfig
currentDeliveryPose	config.h	/^  int currentDeliveryPose = 0;$/;"	m	class:EinConfig
currentEEDeltaRPY	config.h	/^  eePose currentEEDeltaRPY;$/;"	m	class:EinConfig
currentEEPose	config.h	/^  eePose currentEEPose;$/;"	m	class:EinConfig
currentEESpeedRatio	config.h	/^  double currentEESpeedRatio = 0.5;$/;"	m	class:EinConfig
currentGradientServoIterations	config.h	/^  int currentGradientServoIterations = 0;$/;"	m	class:EinConfig
currentGradientServoMode	config.h	/^  gradientServoMode currentGradientServoMode = FOCUSED_CLASS;$/;"	m	class:EinConfig
currentGraspGear	config.h	/^  int currentGraspGear = -1;$/;"	m	class:EinConfig
currentGraspMode	config.h	/^  graspMode currentGraspMode = GRASP_3D;$/;"	m	class:EinConfig
currentGraspZ	config.h	/^  double currentGraspZ = 0;$/;"	m	class:EinConfig
currentHeadNodCommand	config.h	/^  std_msgs::Bool currentHeadNodCommand;$/;"	m	class:EinConfig
currentHeadPanCommand	config.h	/^  baxter_core_msgs::HeadPanCommand currentHeadPanCommand;$/;"	m	class:EinConfig
currentIKBoundaryMode	config.h	/^  ikBoundaryMode currentIKBoundaryMode = IK_BOUNDARY_STOP;$/;"	m	class:EinConfig
currentIKFastMode	config.h	/^  ikFastMode currentIKFastMode = IKF_SWITCHING;$/;"	m	class:EinConfig
currentIKMode	config.h	/^  ikMode currentIKMode = IKSERVICE;$/;"	m	class:EinConfig
currentIdleMode	config.h	/^  idleMode currentIdleMode = CRANE;$/;"	m	class:EinConfig
currentJointPositions	config.h	/^  baxter_core_msgs::SolvePositionIK currentJointPositions;$/;"	m	class:EinConfig
currentMapServoMode	config.h	/^  mapServoMode currentMapServoMode = HISTOGRAM_CLASSIFY;$/;"	m	class:EinConfig
currentMovementState	config.h	/^  movementState currentMovementState = STOPPED;$/;"	m	class:EinConfig
currentPatrolMode	config.h	/^  patrolMode currentPatrolMode = ONCE;$/;"	m	class:EinConfig
currentPatrolState	config.h	/^  patrolState currentPatrolState = IDLING;$/;"	m	class:EinConfig
currentPickMode	config.h	/^  pickMode currentPickMode = STATIC_MARGINALS;$/;"	m	class:EinConfig
currentPlaceMode	config.h	/^  placeMode currentPlaceMode = HOLD;$/;"	m	class:EinConfig
currentRangeHistoryIndex	config.h	/^  int currentRangeHistoryIndex = 0;$/;"	m	class:EinConfig
currentRobotMode	config.h	/^  robotMode currentRobotMode = PHYSICAL;$/;"	m	class:EinConfig
currentScanMode	config.h	/^  scanMode currentScanMode = CENTERED;$/;"	m	class:EinConfig
currentSceneClassificationMode	config.h	/^  sceneClassificationMode currentSceneClassificationMode = SC_DISCREPANCY_THEN_LOGLIKELIHOOD;$/;"	m	class:EinConfig
currentSceneFixationMode	config.h	/^  sceneFixationMode currentSceneFixationMode = FIXATE_STREAM;$/;"	m	class:EinConfig
currentSonarCommand	config.h	/^  std_msgs::UInt16 currentSonarCommand;$/;"	m	class:EinConfig
currentState	config.cpp	/^string MachineState::currentState()$/;"	f	class:MachineState
currentStiffnessCommand	config.h	/^  std_msgs::UInt32 currentStiffnessCommand;$/;"	m	class:EinConfig
currentTableZ	config.h	/^  double currentTableZ = leftTableZ;$/;"	m	class:EinConfig
currentThompsonHeight	config.h	/^  double currentThompsonHeight = 0;$/;"	m	class:EinConfig
currentThompsonHeightIdx	config.h	/^  int currentThompsonHeightIdx = 0;$/;"	m	class:EinConfig
currentWaitMode	config.h	/^  waitMode currentWaitMode = WAIT_KEEP_ON;$/;"	m	class:EinConfig
current_instruction	config.h	/^  std::shared_ptr<Word> current_instruction = NULL;$/;"	m	class:MachineState
curseReticleX	config.h	/^  int curseReticleX = 0;$/;"	m	class:EinConfig
curseReticleY	config.h	/^  int curseReticleY = 0;$/;"	m	class:EinConfig
cv_ptr	config.h	/^  cv_bridge::CvImagePtr cv_ptr = NULL;$/;"	m	class:EinConfig
cx	config.h	/^  double cx;$/;"	m	struct:pixelToGlobalCache
cxContext	opencl/ein_opencl.cpp	/^  cl_context cxContext;               \/\/ OpenCL Context$/;"	m	struct:EinGpuConfig	file:
cxContext	opencl/oclNbody/inc/oclBodySystemOpencl.h	/^        cl_context cxContext;$/;"	m	class:BodySystemOpenCL
cxContext	opencl/oclNbody/src/oclNbody.cpp	/^cl_context cxContext;               \/\/ OpenCL Context$/;"	v
cy	config.h	/^  double cy;$/;"	m	struct:pixelToGlobalCache
dElapsedTime	opencl/oclNbody/src/oclNbody.cpp	/^double dElapsedTime = 0.0;          \/\/ timing var to hold elapsed time in each phase of tour mode$/;"	v
d_x	config.h	/^  double d_x = 0.011;$/;"	m	class:EinConfig
d_y	config.h	/^  double d_y = -0.038;$/;"	m	class:EinConfig
darkKp	config.h	/^  double darkKp = 0.0005;$/;"	m	class:EinConfig
darkServo	ein.cpp	/^void darkServo(MachineState * ms) {$/;"	f
darkServoIterations	config.h	/^  int darkServoIterations = 0;$/;"	m	class:EinConfig
darkServoPixelThresh	config.h	/^  int darkServoPixelThresh = 10;$/;"	m	class:EinConfig
darkServoTimeout	config.h	/^  int darkServoTimeout = 20;$/;"	m	class:EinConfig
data	qtgui/stackmodel.cpp	/^QVariant StackModel::data(const QModelIndex &index, int role) const$/;"	f	class:StackModel
dataStackModel	qtgui/armwidget.h	/^    StackModel * dataStackModel;$/;"	m	class:ArmWidget
data_directory	config.h	/^  std::string data_directory = "unspecified_dd";$/;"	m	class:EinConfig
data_stack	config.h	/^  std::vector<std::shared_ptr<Word> > data_stack;$/;"	m	class:MachineState
dawsn	cephes/cephes_names.h	15;"	d
dawsn	cephes/dawsn.c	/^double dawsn(xx)$/;"	f
deactivateSensorStreaming	ein.cpp	/^void deactivateSensorStreaming(MachineState * ms) {$/;"	f
decompress_string	compress.cpp	/^std::string decompress_string(const std::string& str)$/;"	f
defaultReticle	config.h	/^  eePose defaultReticle = centerReticle;$/;"	m	class:EinConfig
deliveryPoses	config.h	/^  std::vector<eePose> deliveryPoses;$/;"	m	class:EinConfig
demoParams	opencl/oclNbody/src/oclNbody.cpp	/^NBodyParams demoParams[] = $/;"	v
demoTime	opencl/oclNbody/src/oclNbody.cpp	/^double demoTime = 5.0;              \/\/ length of each demo phase in sec$/;"	v
density	config.h	/^  double *density = NULL;$/;"	m	class:EinConfig
densityDecay	config.h	/^  double densityDecay = 0.5;\/\/0.9;\/\/0.3;\/\/0.7;$/;"	m	class:EinConfig
densityIterationsForGradientServo	config.h	/^  int densityIterationsForGradientServo = 10;\/\/3;\/\/10;$/;"	m	class:EinConfig
densityViewerImage	config.h	/^  Mat densityViewerImage;$/;"	m	class:EinConfig
densityViewerWindow	config.h	/^  EinWindow * densityViewerWindow;$/;"	m	class:EinConfig
depth_maps	config.h	/^  vector<shared_ptr<GaussianMap> > depth_maps;$/;"	m	class:EinConfig
depth_stack	gaussian_map.h	/^  vector< shared_ptr<GaussianMap> > depth_stack;$/;"	m	class:Scene
description	ein_misc.cpp	/^virtual string description() {$/;"	f	namespace:ein_words
description	ein_movement.cpp	/^virtual string description() {$/;"	f	namespace:ein_words
description	ein_scanning.cpp	/^virtual string description() {$/;"	f	namespace:ein_words
description	ein_vision_cycle.cpp	/^virtual string description() {$/;"	f	namespace:ein_words
description	gaussian_map.cpp	/^virtual string description() {$/;"	f	namespace:ein_words
description	word.h	/^  virtual string description() {$/;"	f	class:CompoundWord
description	word.h	/^  virtual string description() {$/;"	f	class:Word
description_text	word.h	/^  string description_text;$/;"	m	class:CompoundWord
detectedClass	config.h	/^  int detectedClass; \/\/ -1 means not denied$/;"	m	struct:MapCell
detector	config.h	/^  FeatureDetector *detector = NULL;$/;"	m	class:EinConfig
detectorsInit	ein.cpp	/^void detectorsInit(MachineState * ms) {$/;"	f
device	opencl/oclNbody/inc/oclBodySystemOpencl.h	/^        cl_device_id device;$/;"	m	class:BodySystemOpenCL
diagonalKappa	config.h	/^  double diagonalKappa = 0.60;$/;"	m	class:EinConfig
didSensorStreamTimeout	ein.cpp	/^int didSensorStreamTimeout(MachineState * ms) {$/;"	f
digital_io_pub	config.h	/^  ros::Publisher digital_io_pub;$/;"	m	class:EinConfig
discrepancy	gaussian_map.h	/^  shared_ptr<GaussianMap> discrepancy;$/;"	m	class:Scene
discrepancyDensityWindow	config.h	/^  EinWindow * discrepancyDensityWindow;$/;"	m	class:EinConfig
discrepancyMode	config.h	/^  discrepancyModeState discrepancyMode = DISCREPANCY_POINT;$/;"	m	class:EinConfig
discrepancyModeState	config.h	/^} discrepancyModeState;$/;"	t	typeref:enum:__anon9
discrepancyWindow	config.h	/^  EinWindow * discrepancyWindow;$/;"	m	class:EinConfig
discrepancy_after	gaussian_map.h	/^  Mat discrepancy_after;$/;"	m	class:Scene
discrepancy_before	gaussian_map.h	/^  Mat discrepancy_before;$/;"	m	class:Scene
discrepancy_density	gaussian_map.h	/^  Mat discrepancy_density;$/;"	m	class:Scene
discrepancy_magnitude	gaussian_map.h	/^  Mat discrepancy_magnitude;$/;"	m	class:Scene
discrepancy_score	gaussian_map.h	/^  double discrepancy_score;$/;"	m	struct:SceneObjectScore
discrepancy_valid	gaussian_map.h	/^  bool discrepancy_valid;$/;"	m	struct:SceneObjectScore
diskStreamingEnabled	config.h	/^  int diskStreamingEnabled = 0;$/;"	m	class:EinConfig
display	opencl/oclNbody/src/oclRenderParticles.cpp	/^void ParticleRenderer::display(DisplayMode mode \/* = PARTICLE_POINTS *\/)$/;"	f	class:ParticleRenderer
displayEnabled	opencl/oclNbody/src/oclNbody.cpp	/^bool displayEnabled = true;$/;"	v
displayMode	opencl/oclNbody/src/oclNbody.cpp	/^ParticleRenderer::DisplayMode displayMode = ParticleRenderer::PARTICLE_SPRITES_COLOR;$/;"	v
dist	ein_aibo.cpp	/^double EinAiboJoints::dist(EinAiboJoints & other) {$/;"	f	class:EinAiboJoints
distance	eePose.cpp	/^double _eePose::distance(eePose pose1, eePose pose2) {$/;"	f	class:_eePose
distanceChest	ein_aibo.h	/^  double distanceChest = 0;$/;"	m	class:EinAiboSensors
distanceFarSnout	ein_aibo.h	/^  double distanceFarSnout = 0;$/;"	m	class:EinAiboSensors
distanceNearSnout	ein_aibo.h	/^  double distanceNearSnout = 0;$/;"	m	class:EinAiboSensors
distanceQ	eePose.cpp	/^double _eePose::distanceQ(eePose pose1, eePose pose2) {$/;"	f	class:_eePose
distanceXYZAndAngle	eePose.cpp	/^void _eePose::distanceXYZAndAngle(_eePose pose1, _eePose pose2, double * distance, double * angleDistance)$/;"	f	class:_eePose
doCalibrateGripper	ein.cpp	/^int doCalibrateGripper(MachineState * ms) {$/;"	f
doObjectMapCallbackFunc	ein.cpp	/^void doObjectMapCallbackFunc(int event, int x, int y, int flags, MachineState * ms) {$/;"	f
do_escape	tokenizer.hpp	/^  void do_escape(iterator& next,iterator end,Token& tok) {$/;"	f	class:escaped_forth_separator
dogGainGridSize	ein_aibo.h	/^  double dogGainGridSize = 0.1;$/;"	m	class:EinAiboConfig
dogIsStopped	ein_aibo.cpp	/^bool dogIsStopped(MachineState * ms, int member) {$/;"	f
dogPoseGridSize	ein_aibo.h	/^  double dogPoseGridSize = 2.0;$/;"	m	class:EinAiboConfig
dogReconnect	ein_aibo.cpp	/^void dogReconnect(MachineState * ms) {$/;"	f
dogSnoutViewWindow	config.h	/^  EinWindow * dogSnoutViewWindow;$/;"	m	class:EinConfig
dog_needs_reinit	ein_aibo.h	/^  int dog_needs_reinit = 0;$/;"	m	class:EinAiboConfig
dot	opencl/oclNbody/src/oclBodySystemCpu.cpp	/^float dot(float3 v0, float3 v1)$/;"	f
dotP	eePose.cpp	/^double _eePose::dotP(eePose pose1, eePose pose2) {$/;"	f	class:_eePose
doubleAscending	gaussian_map.cpp	/^bool doubleAscending(const double &i, const double &j) {$/;"	f	namespace:ein_words
doubleDescending	gaussian_map.cpp	/^bool doubleDescending(const double &i, const double &j) {$/;"	f	namespace:ein_words
doubleToByte	ein.cpp	/^int doubleToByte(double in) {$/;"	f
doubleWithLotsOfDigits	gaussian_map.cpp	/^typedef boost::multiprecision::number<boost::multiprecision::cpp_dec_float<2000> > doubleWithLotsOfDigits;$/;"	t	file:
dprec	cephes/setprec.c	/^int dprec(void)$/;"	f
drX	config.h	/^  double drX = .02; \/\/.01;$/;"	m	class:EinConfig
drY	config.h	/^  double drY = .02;$/;"	m	class:EinConfig
draw2D	qtgui/window_QT.cpp	/^void DefaultEinViewPort::draw2D(QPainter *painter)$/;"	f	class:DefaultEinViewPort
drawBlue	config.h	/^  int drawBlue = 1;$/;"	m	class:EinConfig
drawBlueKP	config.h	/^  int drawBlueKP = 1;$/;"	m	class:EinConfig
drawClearanceMap	config.h	/^  int drawClearanceMap = 1;$/;"	m	class:EinConfig
drawDensity	ein.cpp	/^void drawDensity(MachineState * ms, double scale) {$/;"	f
drawGray	config.h	/^  int drawGray = 1;$/;"	m	class:EinConfig
drawGreen	config.h	/^  int drawGreen = 1;$/;"	m	class:EinConfig
drawHeightMemorySample	ein.cpp	/^void drawHeightMemorySample(MachineState * ms) {$/;"	f
drawIKMap	config.h	/^  int drawIKMap = 1;$/;"	m	class:EinConfig
drawImgRegion	qtgui/window_QT.cpp	/^void DefaultEinViewPort::drawImgRegion(QPainter *painter)$/;"	f	class:DefaultEinViewPort
drawInfo	qtgui/window_QT.h	/^    bool drawInfo;$/;"	m	class:DefaultEinViewPort
drawInstructions	qtgui/window_QT.cpp	/^void DefaultEinViewPort::drawInstructions(QPainter *painter)$/;"	f	class:DefaultEinViewPort
drawMapPolygon	ein.cpp	/^void drawMapPolygon(Mat mapImage, double mapXMin, double mapXMax, double mapYMin, double mapYMax, gsl_matrix * polygon_xy, cv::Scalar color) {$/;"	f
drawMapRegisters	ein.cpp	/^void drawMapRegisters(MachineState * ms) {$/;"	f
drawOrientor	config.h	/^  int drawOrientor = 1;$/;"	m	class:EinConfig
drawStatusBar	qtgui/window_QT.cpp	/^void DefaultEinViewPort::drawStatusBar()$/;"	f	class:DefaultEinViewPort
drawViewOverview	qtgui/window_QT.cpp	/^void DefaultEinViewPort::drawViewOverview(QPainter *painter)$/;"	f	class:DefaultEinViewPort
driveVelocities	config.h	/^  int driveVelocities = 0;$/;"	m	class:EinConfig
dx	config.h	/^  double dx;$/;"	m	struct:pixelToGlobalCache
dy	config.h	/^  double dy;$/;"	m	struct:pixelToGlobalCache
eQAstatus	opencl/oclNbody/inc/shrQATest.h	/^enum eQAstatus {$/;"	g
e_	tokenizer.hpp	/^    Char e_;$/;"	m	struct:escaped_forth_separator::char_eq
earL	ein_aibo.h	/^  double earL;$/;"	m	class:EinAiboIndicators
earR	ein_aibo.h	/^  double earR;$/;"	m	class:EinAiboIndicators
eeAccelerator	config.h	/^  ros::Subscriber eeAccelerator;$/;"	m	class:EinConfig
eeLinearAcceleration	config.h	/^  Vector3d eeLinearAcceleration;$/;"	m	class:EinConfig
eePose	eePose.h	/^} eePose;$/;"	t	typeref:struct:_eePose
eeRange	config.h	/^  double eeRange = 0.0;$/;"	m	class:EinConfig
eeRangeMaxValue	config.h	/^  const double eeRangeMaxValue = 65.535;$/;"	m	class:EinConfig
eeRanger	config.h	/^  ros::Subscriber eeRanger;$/;"	m	class:EinConfig
eeTarget	config.h	/^  ros::Subscriber eeTarget;$/;"	m	class:EinConfig
ee_target_pub	config.h	/^  ros::Publisher ee_target_pub;$/;"	m	class:EinConfig
eepReg1	config.h	/^  eePose eepReg1;$/;"	m	class:EinConfig
eepReg2	config.h	/^  eePose eepReg2;$/;"	m	class:EinConfig
eepReg3	config.h	/^  eePose eepReg3;$/;"	m	class:EinConfig
eepReg4	config.h	/^  eePose eepReg4;$/;"	m	class:EinConfig
eepReg5	config.h	/^  eePose eepReg5;$/;"	m	class:EinConfig
eepReg6	config.h	/^  eePose eepReg6;$/;"	m	class:EinConfig
eigenstuff	slu/math2d.h	/^struct eigenstuff {$/;"	s
einConsolePub	config.h	/^  ros::Publisher einConsolePub;$/;"	m	class:EinConfig
einMainWindow	ein.cpp	/^MainWindow * einMainWindow;$/;"	v
einStateCallback	ein.cpp	/^void MachineState::einStateCallback(const EinState & msg) {$/;"	f	class:MachineState
einStatePub	config.h	/^  ros::Publisher einStatePub;$/;"	m	class:EinConfig
einSub	config.h	/^  ros::Subscriber einSub;$/;"	m	class:EinConfig
ein_words	ein_aibo.cpp	/^namespace ein_words {$/;"	n	file:
ein_words	ein_bandit.cpp	/^namespace ein_words {$/;"	n	file:
ein_words	ein_collision.cpp	/^namespace ein_words {$/;"	n	file:
ein_words	ein_face_animation.cpp	/^namespace ein_words {$/;"	n	file:
ein_words	ein_misc.cpp	/^namespace ein_words {$/;"	n	file:
ein_words	ein_movement.cpp	/^namespace ein_words {$/;"	n	file:
ein_words	ein_pick_place.cpp	/^namespace ein_words {$/;"	n	file:
ein_words	ein_polyhedron.cpp	/^namespace ein_words {$/;"	n	file:
ein_words	ein_render.cpp	/^namespace ein_words {$/;"	n	file:
ein_words	ein_scanning.cpp	/^namespace ein_words {$/;"	n	file:
ein_words	ein_servo.cpp	/^namespace ein_words {$/;"	n	file:
ein_words	ein_slam.cpp	/^namespace ein_words {$/;"	n	file:
ein_words	ein_stream.cpp	/^namespace ein_words {$/;"	n	file:
ein_words	ein_vision_cycle.cpp	/^namespace ein_words {$/;"	n	file:
ein_words	gaussian_map.cpp	/^namespace ein_words {$/;"	n	file:
ein_words	opencl/ein_opencl.cpp	/^namespace ein_words {$/;"	n	file:
ellie	cephes/cephes_names.h	16;"	d
ellie	cephes/ellie.c	/^double ellie(double phi, double m)$/;"	f
ellie_neg_m	cephes/ellie.c	/^double ellie_neg_m(double phi, double m)$/;"	f
ellik	cephes/cephes_names.h	17;"	d
ellik	cephes/ellik.c	/^double ellik(double phi,  double m)$/;"	f
ellik_neg_m	cephes/ellik.c	/^double ellik_neg_m(double phi, double m)$/;"	f
ellpe	cephes/cephes_names.h	18;"	d
ellpe	cephes/ellpe.c	/^double ellpe(x)$/;"	f
ellpj	cephes/cephes_names.h	19;"	d
ellpj	cephes/ellpj.c	/^int ellpj(u, m, sn, cn, dn, ph)$/;"	f
ellpk	cephes/cephes_names.h	20;"	d
ellpk	cephes/ellpk.c	/^double ellpk(x)$/;"	f
emotion	config.h	/^	String emotion; $/;"	m	struct:AnimationState
emotionImages	config.h	/^  vector< vector<Mat> > emotionImages;$/;"	m	class:EinConfig
emotionIndex	config.h	/^  std::map<string, int> emotionIndex; $/;"	m	class:EinConfig
endCollapse	config.h	/^  int endCollapse = 0;$/;"	m	class:EinConfig
endEffectorAngularUpdate	ein.cpp	/^void endEffectorAngularUpdate(eePose *givenEEPose, eePose *deltaEEPose) {$/;"	f
endEffectorAngularUpdateOuter	ein.cpp	/^void endEffectorAngularUpdateOuter(eePose *givenEEPose, eePose *deltaEEPose) {$/;"	f
endThisStackCollapse	config.h	/^  int endThisStackCollapse = 0;$/;"	m	class:EinConfig
endWinCoords	opencl/oclNbody/src/paramgl.cpp	/^void endWinCoords(void)$/;"	f
end_i	slu/math2d.h	/^  int end_i;$/;"	m	struct:math2d_range
endpointCallback	ein.cpp	/^void MachineState::endpointCallback(const baxter_core_msgs::EndpointState& _eps) {$/;"	f	class:MachineState
epRBTimes	config.h	/^  std::vector<ros::Time> epRBTimes;$/;"	m	class:EinConfig
epRingBuffer	config.h	/^  std::vector<geometry_msgs::Pose> epRingBuffer;$/;"	m	class:EinConfig
epRingBufferAdvance	ein.cpp	/^void epRingBufferAdvance(MachineState * ms) {$/;"	f
epRingBufferEnd	config.h	/^  int epRingBufferEnd = 0;$/;"	m	class:EinConfig
epRingBufferSize	config.h	/^  const int epRingBufferSize = 10000;$/;"	m	class:EinConfig
epRingBufferStart	config.h	/^  int epRingBufferStart = 0;$/;"	m	class:EinConfig
epState	config.h	/^  ros::Subscriber epState;$/;"	m	class:EinConfig
equals	eePose.cpp	/^bool _armPose::equals(_armPose pose)$/;"	f	class:_armPose
equals	eePose.cpp	/^bool _eePose::equals(_eePose pose)$/;"	f	class:_eePose
equals	word.cpp	/^bool StringWord::equals(shared_ptr<Word> word) {$/;"	f	class:StringWord
equals	word.h	/^  bool equals(shared_ptr<Word> word) {$/;"	f	class:AiboPoseWord
equals	word.h	/^  bool equals(shared_ptr<Word> word) {$/;"	f	class:ArmPoseWord
equals	word.h	/^  bool equals(shared_ptr<Word> word) {$/;"	f	class:DoubleWord
equals	word.h	/^  bool equals(shared_ptr<Word> word) {$/;"	f	class:EePoseWord
equals	word.h	/^  bool equals(shared_ptr<Word> word) {$/;"	f	class:IntegerWord
equals	word.h	/^  virtual bool equals(std::shared_ptr<Word> word) {$/;"	f	class:Word
erf	cephes/cephes_names.h	65;"	d
erf	cephes/ndtr.c	/^double erf(double x)$/;"	f
erfc	cephes/cephes_names.h	64;"	d
erfc	cephes/ndtr.c	/^double erfc(double a)$/;"	f
escape_	tokenizer.hpp	/^  string_type  escape_;$/;"	m	class:escaped_forth_separator
escaped_forth_error	tokenizer.hpp	/^escaped_forth_error(const std::string& what_arg):std::runtime_error(what_arg) { }$/;"	f	struct:escaped_forth_error
escaped_forth_error	tokenizer.hpp	/^struct escaped_forth_error : public std::runtime_error{$/;"	s
escaped_forth_separator	tokenizer.hpp	/^  escaped_forth_separator(string_type e, string_type c, string_type q)$/;"	f	class:escaped_forth_separator
escaped_forth_separator	tokenizer.hpp	/^  explicit escaped_forth_separator(Char  e = '\\\\',$/;"	f	class:escaped_forth_separator
escaped_forth_separator	tokenizer.hpp	/^class escaped_forth_separator {$/;"	c
estimateGlobalGraspGear	ein.cpp	/^void estimateGlobalGraspGear(MachineState * ms) {$/;"	f
evalHermite	opencl/oclNbody/src/oclRenderParticles.cpp	/^inline float evalHermite(float pA, float pB, float vA, float vB, float u)$/;"	f
evals	slu/math2d.h	/^  gsl_vector * evals;$/;"	m	struct:eigenstuff
evaluateProgram	word.cpp	/^void MachineState::evaluateProgram(const string program)  {$/;"	f	class:MachineState
evecs	slu/math2d.h	/^  gsl_matrix * evecs;$/;"	m	struct:eigenstuff
execute	ein_aibo.cpp	/^virtual void execute(MachineState * ms) {$/;"	f	namespace:ein_words
execute	ein_bandit.cpp	/^  virtual void execute(MachineState * ms)       {$/;"	f	namespace:ein_words
execute	ein_bandit.cpp	/^virtual void execute(MachineState * ms)       {$/;"	f	namespace:ein_words
execute	ein_bandit.cpp	/^virtual void execute(MachineState * ms) {$/;"	f	namespace:ein_words
execute	ein_bandit.cpp	/^virtual void execute(MachineState * ms)$/;"	f	namespace:ein_words
execute	ein_collision.cpp	/^virtual void execute(MachineState * ms)$/;"	f	namespace:ein_words
execute	ein_face_animation.cpp	/^virtual void execute(MachineState * ms) {$/;"	f	namespace:ein_words
execute	ein_misc.cpp	/^virtual void execute(MachineState * ms)  {$/;"	f	namespace:ein_words
execute	ein_misc.cpp	/^virtual void execute(MachineState * ms) {$/;"	f	namespace:ein_words
execute	ein_misc.cpp	/^virtual void execute(MachineState * ms)$/;"	f	namespace:ein_words
execute	ein_movement.cpp	/^virtual void execute(MachineState * ms)  {$/;"	f	namespace:ein_words
execute	ein_movement.cpp	/^virtual void execute(MachineState * ms) {$/;"	f	namespace:ein_words
execute	ein_movement.cpp	/^virtual void execute(MachineState * ms)$/;"	f	namespace:ein_words
execute	ein_pick_place.cpp	/^virtual void execute(MachineState * ms) {$/;"	f	namespace:ein_words
execute	ein_pick_place.cpp	/^virtual void execute(MachineState * ms)$/;"	f	namespace:ein_words
execute	ein_polyhedron.cpp	/^virtual void execute(MachineState * ms)$/;"	f	namespace:ein_words
execute	ein_render.cpp	/^virtual void execute(MachineState * ms)       {$/;"	f	namespace:ein_words
execute	ein_render.cpp	/^virtual void execute(MachineState * ms) {$/;"	f	namespace:ein_words
execute	ein_render.cpp	/^virtual void execute(MachineState * ms)$/;"	f	namespace:ein_words
execute	ein_scanning.cpp	/^virtual void execute(MachineState * ms)       {$/;"	f	namespace:ein_words
execute	ein_scanning.cpp	/^virtual void execute(MachineState * ms)  {$/;"	f	namespace:ein_words
execute	ein_scanning.cpp	/^virtual void execute(MachineState * ms) {$/;"	f	namespace:ein_words
execute	ein_scanning.cpp	/^virtual void execute(MachineState * ms)$/;"	f	namespace:ein_words
execute	ein_servo.cpp	/^  virtual void execute(MachineState * ms)       {$/;"	f	namespace:ein_words
execute	ein_servo.cpp	/^virtual void execute(MachineState * ms)       {$/;"	f	namespace:ein_words
execute	ein_servo.cpp	/^virtual void execute(MachineState * ms) { $/;"	f	namespace:ein_words
execute	ein_servo.cpp	/^virtual void execute(MachineState * ms) {$/;"	f	namespace:ein_words
execute	ein_servo.cpp	/^virtual void execute(MachineState * ms)$/;"	f	namespace:ein_words
execute	ein_slam.cpp	/^  virtual void execute(MachineState * ms) {$/;"	f	namespace:ein_words
execute	ein_stream.cpp	/^virtual void execute(MachineState * ms)       {$/;"	f	namespace:ein_words
execute	ein_stream.cpp	/^virtual void execute(MachineState * ms)$/;"	f	namespace:ein_words
execute	ein_vision_cycle.cpp	/^virtual void execute(MachineState * ms) {$/;"	f	namespace:ein_words
execute	ein_vision_cycle.cpp	/^virtual void execute(MachineState * ms)$/;"	f	namespace:ein_words
execute	gaussian_map.cpp	/^virtual void execute(MachineState * ms) {$/;"	f	namespace:ein_words
execute	opencl/ein_opencl.cpp	/^virtual void execute(MachineState * ms) {$/;"	f	namespace:ein_words
execute	qtgui/wordaction.cpp	/^void WordAction::execute() {$/;"	f	class:WordAction
execute	repl.cpp	/^  virtual void execute() {$/;"	f	class:Minus
execute	repl.cpp	/^  virtual void execute() {$/;"	f	class:Plus
execute	repl.cpp	/^  void execute() {$/;"	f	class:Integer
execute	word.cpp	/^void CompoundWord::execute(MachineState * ms) {$/;"	f	class:CompoundWord
execute	word.cpp	/^void MachineState::execute(shared_ptr<Word> word) {$/;"	f	class:MachineState
execute	word.cpp	/^void SymbolWord::execute(MachineState * ms) {$/;"	f	class:SymbolWord
execute	word.cpp	/^void Word::execute(MachineState * ms) {$/;"	f	class:Word
execute	word.h	/^  virtual void execute(MachineState * ms) {$/;"	f	class:CommentWord
execute_stack	config.h	/^  int execute_stack = 0;$/;"	m	class:MachineState
executionMode	config.h	/^} executionMode;$/;"	t	typeref:enum:__anon27
execution_mode	config.h	/^  executionMode execution_mode = INSTANT;$/;"	m	class:MachineState
existArg	opencl/oclNbody/inc/cmd_arg_reader.h	/^CmdArgReader::existArg( const std::string& name) $/;"	f	class:CmdArgReader
existArgHelper	opencl/oclNbody/inc/cmd_arg_reader.h	/^CmdArgReader::existArgHelper( const std::string& name) const $/;"	f	class:CmdArgReader
exp10	cephes/cephes_names.h	21;"	d
exp10	cephes/exp10.c	/^double exp10(double x)$/;"	f
exp1m	cephes/cephes_names.h	22;"	d
exp2	cephes/cephes_names.h	23;"	d
exp2	cephes/exp2.c	/^double exp2(double x)$/;"	f
expectedCropsToStream	config.h	/^  double expectedCropsToStream = 500;$/;"	m	class:EinConfig
expm1	cephes/cephes_names.h	87;"	d
expm1	cephes/unity.c	/^double expm1(double x)$/;"	f
expn	cephes/cephes_names.h	24;"	d
expn	cephes/expn.c	/^double expn(n, x)$/;"	f
extractQuatFromPose	ein.cpp	/^Quaternionf extractQuatFromPose(geometry_msgs::Pose poseIn) {$/;"	f
extractor	config.h	/^  DescriptorExtractor *extractor = NULL;$/;"	m	class:EinConfig
eyes_cascade	faces.cpp	/^CascadeClassifier eyes_cascade;$/;"	v
eyes_cascade_name	faces.cpp	/^string eyes_cascade_name = "\/usr\/share\/opencv\/haarcascades\/haarcascade_eye_tree_eyeglasses.xml";$/;"	v
fEpsilon	config.h	/^  double fEpsilon = 1.0e-9;$/;"	m	class:EinConfig
fabs	cephes/simq.c	53;"	d	file:
faceDetectAndDisplay	faces.cpp	/^vector<Rect> faceDetectAndDisplay(string windowName, Mat frame ) {$/;"	f
faceKp	config.h	/^  double faceKp = 0.001;$/;"	m	class:EinConfig
facePub	config.h	/^  ros::Publisher facePub;$/;"	m	class:EinConfig
faceServo	ein.cpp	/^void faceServo(MachineState * ms, vector<Rect> faces) {$/;"	f
faceServoIterations	config.h	/^  int faceServoIterations = 0;$/;"	m	class:EinConfig
faceServoPixelThresh	config.h	/^  int faceServoPixelThresh = 1;$/;"	m	class:EinConfig
faceServoTimeout	config.h	/^  int faceServoTimeout = 2000;$/;"	m	class:EinConfig
faceViewImage	config.h	/^  Mat faceViewImage;$/;"	m	class:EinConfig
faceViewWindow	config.h	/^  EinWindow * faceViewWindow;$/;"	m	class:EinConfig
face_cascade	faces.cpp	/^CascadeClassifier face_cascade;$/;"	v
face_cascade_name	faces.cpp	/^string face_cascade_name = "\/usr\/share\/opencv\/haarcascades\/haarcascade_frontalface_alt.xml";$/;"	v
face_screen_pub	config.h	/^  ros::Publisher face_screen_pub;$/;"	m	class:EinConfig
failures	config.h	/^  double failures;$/;"	m	struct:Grasp
fakeBBWidth	config.h	/^  int fakeBBWidth = 50;$/;"	m	class:EinConfig
fd	cephes/fresnl.c	/^static double fd[10] = {$/;"	v	file:
fd	cephes/fresnl.c	/^static unsigned short fd[40] = {$/;"	v	file:
fdtr	cephes/cephes_names.h	26;"	d
fdtr	cephes/fdtr.c	/^double fdtr(a, b, x)$/;"	f
fdtrc	cephes/cephes_names.h	25;"	d
fdtrc	cephes/fdtr.c	/^double fdtrc(a, b, x)$/;"	f
fdtri	cephes/cephes_names.h	27;"	d
fdtri	cephes/fdtr.c	/^double fdtri(a, b, y)$/;"	f
featureType	config.h	/^} featureType;$/;"	t	typeref:enum:__anon16
filename	config.h	/^  string filename;$/;"	m	struct:streamImage
fillEinStateMsg	ein.cpp	/^void fillEinStateMsg(MachineState * ms, EinState * stateOut) {$/;"	f
fillIkRequest	ein_ik.cpp	/^void fillIkRequest(eePose givenEEPose, baxter_core_msgs::SolvePositionIK * givenIkRequest) {$/;"	f
fillIkRequest	ein_ik.cpp	/^void fillIkRequest(vector<eePose> poses, baxter_core_msgs::SolvePositionIK * givenIkRequest) {$/;"	f
fillLocalUnitBasis	ein.cpp	/^void fillLocalUnitBasis(eePose localFrame, Vector3d * localUnitX, Vector3d * localUnitY, Vector3d * localUnitZ) {$/;"	f
fillRecognizedObjectArrayFromBlueBoxMemory	ein.cpp	/^void fillRecognizedObjectArrayFromBlueBoxMemory(MachineState * ms, object_recognition_msgs::RecognizedObjectArray * roa) {$/;"	f
filter	config.h	/^  double filter[9] = {1.0\/16.0, 1.0\/8.0, 1.0\/16.0, $/;"	m	class:EinConfig
finalXOffset	config.h	/^  double finalXOffset;$/;"	m	struct:pixelToGlobalCache
finalYOffset	config.h	/^  double finalYOffset;$/;"	m	struct:pixelToGlobalCache
findBestObjectAndScore	gaussian_map.cpp	/^void Scene::findBestObjectAndScore(int * class_idx, int num_orientations, int * l_max_x, int * l_max_y, int * l_max_orient, double * l_max_theta, double * l_max_score, int * l_max_i) {$/;"	f	class:Scene
findBestScoreForObject	gaussian_map.cpp	/^void Scene::findBestScoreForObject(int class_idx, int num_orientations, int * l_max_x, int * l_max_y, int * l_max_orient, double * l_max_theta, double * l_max_score, int * l_max_i) {$/;"	f	class:Scene
findClosestBlueBoxMemory	ein.cpp	/^int findClosestBlueBoxMemory(MachineState * ms, eePose targetPose, int classToSearch) {$/;"	f
findDarkness	ein.cpp	/^void findDarkness(MachineState * ms, int * xout, int * yout) {$/;"	f
findExeNameStart	opencl/oclNbody/inc/shrQATest.h	/^inline int findExeNameStart(const char *exec_name)$/;"	f
findLight	ein.cpp	/^void findLight(MachineState * ms, int * xout, int * yout) {$/;"	f
findOptimum	ein.cpp	/^void findOptimum(MachineState * ms, int * xout, int * yout, int sign) {$/;"	f
findStringInDogBuffer	ein_aibo.cpp	/^int findStringInDogBuffer(MachineState * ms, int member, string toFind, int start) {$/;"	f
firstCReticleIndexDepth	config.h	/^  constexpr static double firstCReticleIndexDepth = .08;$/;"	m	class:EinConfig
firstTableHeightTime	config.h	/^  ros::Time firstTableHeightTime;$/;"	m	class:EinConfig
firstTime	config.h	/^  time_t firstTime = 0;$/;"	m	class:EinConfig
firstTimeRange	config.h	/^  time_t firstTimeRange = 0;$/;"	m	class:EinConfig
fit_line_result	slu/math2d.h	/^struct fit_line_result {$/;"	s
float3	opencl/oclNbody/src/oclBodySystemCpu.cpp	/^struct float3 { float x, y, z; };$/;"	s	file:
flopsPerInteraction	opencl/oclNbody/src/oclNbody.cpp	/^int flopsPerInteraction = 20;$/;"	v
flushDogBuffer	ein_aibo.cpp	/^void flushDogBuffer(MachineState * ms, int member) {$/;"	f
fm	randomkit.h	/^    double fm;$/;"	m	struct:rk_state_
fmul	ikfast/ikfast.h	/^    T fmul, foffset; \/\/\/< joint value is fmul*sol[freeind]+foffset$/;"	m	class:ikfast::IkSingleDOFSolutionBase
fn	cephes/fresnl.c	/^static double fn[10] = {$/;"	v	file:
fn	cephes/fresnl.c	/^static unsigned short fn[40] = {$/;"	v	file:
focusedClass	config.h	/^  int focusedClass = -1;$/;"	m	class:EinConfig
focusedClassLabel	config.h	/^  string focusedClassLabel;$/;"	m	class:EinConfig
focusedMember	config.h	/^  int focusedMember = 0;$/;"	m	class:MachineState
foffset	ikfast/ikfast.h	/^    T fmul, foffset; \/\/\/< joint value is fmul*sol[freeind]+foffset$/;"	m	class:ikfast::IkSingleDOFSolutionBase
font	opencl/oclNbody/inc/paramgl.h	/^          void *font;$/;"	m	class:ParamListGL
font_h	opencl/oclNbody/inc/paramgl.h	/^          int font_h;$/;"	m	class:ParamListGL
form	cephes/polyn.c	/^static char *form = "abcdefghijk";$/;"	v	file:
formatTime	ein_util.cpp	/^string formatTime(ros::Time time) {$/;"	f
forthCommand	config.h	/^  std::string forthCommand;$/;"	m	class:EinConfig
forthCommandCallback	ein.cpp	/^void MachineState::forthCommandCallback(const std_msgs::String::ConstPtr& msg) {$/;"	f	class:MachineState
forthCommandPublisher	config.h	/^  ros::Publisher forthCommandPublisher;$/;"	m	class:EinConfig
forthCommandSubscriber	config.h	/^  ros::Subscriber forthCommandSubscriber;$/;"	m	class:EinConfig
frameGraySobel	config.h	/^  Mat frameGraySobel;$/;"	m	class:EinConfig
freeind	ikfast/ikfast.h	/^    signed char freeind; \/\/\/< if >= 0, mimics another joint$/;"	m	class:ikfast::IkSingleDOFSolutionBase
fresnl	cephes/cephes_names.h	28;"	d
fresnl	cephes/fresnl.c	/^int fresnl(xxa, ssa, cca)$/;"	f
fromGeometryMsgPose	eePose.cpp	/^_eePose _eePose::fromGeometryMsgPose(geometry_msgs::Pose pose) {$/;"	f	class:_eePose
fromRectCentroid	eePose.cpp	/^eePose _eePose::fromRectCentroid(Rect rect) {$/;"	f	class:_eePose
fuseBlueBoxes	config.h	/^  int fuseBlueBoxes = 1;$/;"	m	class:EinConfig
fusePasses	config.h	/^  int fusePasses = 5;$/;"	m	class:EinConfig
g	config.h	/^  double r, g, b;$/;"	m	struct:MapCell
g	gaussian_map.h	/^  double r,g,b,a;$/;"	m	class:OrientedRay
g1xe	config.h	/^  int g1xe = 295;$/;"	m	class:EinConfig
g1xs	config.h	/^  int g1xs = 200;$/;"	m	class:EinConfig
g1ye	config.h	/^  int g1ye = 75;$/;"	m	class:EinConfig
g1ys	config.h	/^  int g1ys = 0;$/;"	m	class:EinConfig
g2xe	config.h	/^  int g2xe = 560;$/;"	m	class:EinConfig
g2xs	config.h	/^  int g2xs = 420;$/;"	m	class:EinConfig
g2ye	config.h	/^  int g2ye = 75;$/;"	m	class:EinConfig
g2ys	config.h	/^  int g2ys = 0;$/;"	m	class:EinConfig
gBoxH	config.h	/^  int gBoxH = 10;$/;"	m	class:EinConfig
gBoxIndicator	config.h	/^  double *gBoxIndicator;$/;"	m	class:EinConfig
gBoxStrideX	config.h	/^  int gBoxStrideX;$/;"	m	class:EinConfig
gBoxStrideY	config.h	/^  int gBoxStrideY;$/;"	m	class:EinConfig
gBoxW	config.h	/^  int gBoxW = 10;$/;"	m	class:EinConfig
gConfig	opencl/ein_opencl.cpp	/^  shared_ptr<EinGpuConfig> gConfig;$/;"	m	struct:GaussianMapGpu	file:
gXFactor	config.h	/^  double gXFactor;$/;"	m	struct:pixelToGlobalCache
gYFactor	config.h	/^  double gYFactor;$/;"	m	struct:pixelToGlobalCache
gZ	config.h	/^  double gZ;$/;"	m	struct:pixelToGlobalCache
gamma	cephes/mconf.h	162;"	d
gauss	randomkit.h	/^    double gauss;$/;"	m	struct:rk_state_
gaussianMapGpuEchoTest	opencl/ein_opencl.cpp	/^void gaussianMapGpuEchoTest(shared_ptr<GaussianMap> gm_in) {$/;"	f
gaussian_map_register	config.h	/^  shared_ptr<GaussianMap> gaussian_map_register;$/;"	m	class:EinConfig
gd	cephes/fresnl.c	/^static double gd[11] = {$/;"	v	file:
gd	cephes/fresnl.c	/^static unsigned short gd[44] = {$/;"	v	file:
gdtr	cephes/cephes_names.h	31;"	d
gdtr	cephes/gdtr.c	/^double gdtr(a, b, x)$/;"	f
gdtrc	cephes/cephes_names.h	32;"	d
gdtrc	cephes/gdtr.c	/^double gdtrc(a, b, x)$/;"	f
gdtri	cephes/cephes_names.h	33;"	d
gdtri	cephes/gdtr.c	/^double gdtri(a, b, y)$/;"	f
gear0offset	config.h	/^  Eigen::Quaternionf gear0offset;$/;"	m	class:EinConfig
gels	cephes/gels.c	/^int gels(A, R, M, EPS, AUX)$/;"	f
getArg	opencl/oclNbody/inc/cmd_arg_reader.h	/^CmdArgReader::getArg( const std::string& name) $/;"	f	class:CmdArgReader
getArgHelper	opencl/oclNbody/inc/cmd_arg_reader.h	/^CmdArgReader::getArgHelper( const std::string& name) $/;"	f	class:CmdArgReader
getArray	opencl/oclNbody/src/oclBodySystemCpu.cpp	/^float* BodySystemCPU::getArray(BodyArray array)$/;"	f	class:BodySystemCPU
getArray	opencl/oclNbody/src/oclBodySystemOpencl.cpp	/^float* BodySystemOpenCL::getArray(BodyArray array)$/;"	f	class:BodySystemOpenCL
getBoxMemoryOfLabel	ein.cpp	/^int getBoxMemoryOfLabel(MachineState * ms, string label, int * idxOfLabel, BoxMemory * out) {$/;"	f
getBytesFromDog	ein_aibo.cpp	/^int getBytesFromDog(MachineState * ms, int member, int bytesToGet, int timeout) {$/;"	f
getCCRotation	ein.cpp	/^Eigen::Quaternionf getCCRotation(MachineState * ms, int givenGraspGear, double angle) {$/;"	f
getCRColor	ein.cpp	/^cv::Vec3b getCRColor(MachineState * ms) {$/;"	f
getCRColor	ein.cpp	/^cv::Vec3b getCRColor(MachineState * ms, Mat im) {$/;"	f
getColorReticleX	ein.cpp	/^int getColorReticleX(MachineState * ms) {$/;"	f
getColorReticleY	ein.cpp	/^int getColorReticleY(MachineState * ms) {$/;"	f
getCurrentReadBuffer	opencl/oclNbody/inc/oclBodySystemCpu.h	/^            virtual size_t getCurrentReadBuffer() const { return m_currentRead; }$/;"	f	class:BodySystemCPU
getCurrentReadBuffer	opencl/oclNbody/inc/oclBodySystemOpencl.h	/^        virtual size_t getCurrentReadBuffer() const $/;"	f	class:BodySystemOpenCL
getGGRotation	ein.cpp	/^Eigen::Quaternionf getGGRotation(MachineState * ms, int givenGraspGear) {$/;"	f
getGlobalGraspGear	ein.cpp	/^int getGlobalGraspGear(MachineState * ms, int localGraspGearIn) {$/;"	f
getInterpolation	eePose.cpp	/^_eePose _eePose::getInterpolation(_eePose inB, double mu) const {$/;"	f	class:_eePose
getIsbIdxNoLoadNoKick	ein.cpp	/^streamImage * getIsbIdxNoLoadNoKick(MachineState * ms, int idx) {$/;"	f
getLocalGraspGear	ein.cpp	/^int getLocalGraspGear(MachineState * ms, int globalGraspGearIn) {$/;"	f
getMostRecentRingImageAndPose	ein.cpp	/^int getMostRecentRingImageAndPose(MachineState * ms, Mat * image, eePose * pose, ros::Time * time, bool debug) {$/;"	f
getNormalized	eePose.cpp	/^_eePose _eePose::getNormalized() const {$/;"	f	class:_eePose
getNumBodies	opencl/oclNbody/inc/oclBodySystem.h	/^        virtual int    getNumBodies() const { return m_numBodies; }$/;"	f	class:BodySystem
getPoseRelativeTo	eePose.cpp	/^_eePose _eePose::getPoseRelativeTo(_eePose in) const {$/;"	f	class:_eePose
getPredictedObject	gaussian_map.cpp	/^shared_ptr<SceneObject> Scene::getPredictedObject(double x, double y, double theta, int class_idx) {$/;"	f	class:Scene
getRArgc	opencl/oclNbody/inc/cmd_arg_reader.h	/^CmdArgReader::getRArgc() $/;"	f	class:CmdArgReader
getRArgv	opencl/oclNbody/inc/cmd_arg_reader.h	/^CmdArgReader::getRArgv() $/;"	f	class:CmdArgReader
getRatio	qtgui/window_QT.cpp	/^double OpenGlEinViewPort::getRatio()$/;"	f	class:OpenGlEinViewPort
getReferencedWord	word.cpp	/^shared_ptr<Word> SymbolWord::getReferencedWord(MachineState * ms) {$/;"	f	class:SymbolWord
getRingImageAtTime	ein.cpp	/^int getRingImageAtTime(MachineState * ms, ros::Time t, Mat& value, int drawSlack, bool debug) {$/;"	f
getRingPoseAtTime	ein.cpp	/^int getRingPoseAtTime(MachineState * ms, ros::Time t, geometry_msgs::Pose &value, int drawSlack, bool debug) {$/;"	f
getRingRangeAtTime	ein.cpp	/^int getRingRangeAtTime(MachineState * ms, ros::Time t, double &value, int drawSlack) {$/;"	f
getRollPitchYaw	eePose.cpp	/^void _eePose::getRollPitchYaw(double * roll, double * pitch, double * yaw) {$/;"	f	class:_eePose
getStreamPoseAtTime	ein.cpp	/^int getStreamPoseAtTime(MachineState * ms, double tin, eePose * outArm, eePose * outBase) {$/;"	f
getStreamPoseAtTimeThreadSafe	ein.cpp	/^int getStreamPoseAtTimeThreadSafe(MachineState * ms, double tin, eePose * outArm, eePose * outBase) {$/;"	f
getWidget	qtgui/window_QT.cpp	/^QWidget* DefaultEinViewPort::getWidget()$/;"	f	class:DefaultEinViewPort
getWidget	qtgui/window_QT.cpp	/^QWidget* OpenGlEinViewPort::getWidget()$/;"	f	class:OpenGlEinViewPort
getWord	word.cpp	/^shared_ptr<Word> CompoundWord::getWord(int i) {$/;"	f	class:CompoundWord
ggT	config.h	/^  double ggT[totalGraspGears];$/;"	m	class:EinConfig
ggX	config.h	/^  double ggX[totalGraspGears];$/;"	m	class:EinConfig
ggY	config.h	/^  double ggY[totalGraspGears];$/;"	m	class:EinConfig
givenEEPose	config.h	/^  eePose givenEEPose;$/;"	m	struct:pixelToGlobalCache
glDrawCallback	qtgui/window_QT.h	/^    EinOpenGlDrawCallback glDrawCallback;$/;"	m	class:OpenGlEinViewPort
glDrawData	qtgui/window_QT.h	/^    void* glDrawData;$/;"	m	class:OpenGlEinViewPort
glPrint	opencl/oclNbody/src/paramgl.cpp	/^void glPrint(int x, int y, const char *s, void *font)$/;"	f
glPrintShadowed	opencl/oclNbody/src/paramgl.cpp	/^void glPrintShadowed(int x, int y, const char *s, void *font, float *color)$/;"	f
globalPngCompression	config.h	/^  int globalPngCompression = 0;$/;"	m	class:EinConfig
globalToMapBackground	ein.cpp	/^void globalToMapBackground(MachineState * ms, double gX, double gY, double zToUse, int * mapGpPx, int * mapGpPy) {$/;"	f
globalToPixel	ein.cpp	/^void globalToPixel(MachineState * ms, int * pX, int * pY, double gZ, double gX, double gY) {$/;"	f
globalToPixel	ein.cpp	/^void globalToPixel(MachineState * ms, int * pX, int * pY, double gZ, double gX, double gY, eePose givenEEPose) {$/;"	f
globalToPixelPrint	ein.cpp	/^void globalToPixelPrint(MachineState * ms, int * pX, int * pY, double gZ, double gX, double gY) {$/;"	f
gmTargetX	config.h	/^  int gmTargetX = -1;$/;"	m	class:EinConfig
gmTargetY	config.h	/^  int gmTargetY = -1;$/;"	m	class:EinConfig
gn	cephes/fresnl.c	/^static double gn[11] = {$/;"	v	file:
gn	cephes/fresnl.c	/^static unsigned short gn[44] = {$/;"	v	file:
goCalculateDensity	ein.cpp	/^void goCalculateDensity(MachineState * ms) {$/;"	f
goClassifyBlueBoxes	ein.cpp	/^void goClassifyBlueBoxes(MachineState * ms) {$/;"	f
goFindBlueBoxes	ein.cpp	/^void goFindBlueBoxes(MachineState * ms) {$/;"	f
goodIkInitialized	config.h	/^  int goodIkInitialized = 0;$/;"	m	class:EinConfig
gradKp	config.h	/^  double gradKp = 0.00025;\/\/0.0005;$/;"	m	class:EinConfig
gradServoPixelThresh	config.h	/^  int gradServoPixelThresh = 5;$/;"	m	class:EinConfig
gradServoThetaThresh	config.h	/^  int gradServoThetaThresh = 2;$/;"	m	class:EinConfig
gradientFeatureWidth	config.h	/^  int gradientFeatureWidth = 50;$/;"	m	class:EinConfig
gradientServo	ein.cpp	/^void gradientServo(MachineState * ms) {$/;"	f
gradientServoDuringHeightLearning	config.h	/^  int gradientServoDuringHeightLearning = 1;$/;"	m	class:EinConfig
gradientServoLatentClass	ein.cpp	/^void gradientServoLatentClass(MachineState * ms) {$/;"	f
gradientServoMode	config.h	/^} gradientServoMode;$/;"	t	typeref:enum:__anon26
gradientServoResetThresh	config.h	/^  double gradientServoResetThresh = 0.7\/(6.0e5);$/;"	m	class:EinConfig
gradientTakeClosest	config.h	/^  int gradientTakeClosest = 0;$/;"	m	class:EinConfig
gradientViewerImage	config.h	/^  Mat gradientViewerImage;$/;"	m	class:EinConfig
gradientViewerWindow	config.h	/^  EinWindow * gradientViewerWindow;$/;"	m	class:EinConfig
grandTotalDescriptors	config.h	/^  int grandTotalDescriptors = 0;$/;"	m	class:EinConfig
graspAttemptCounter	config.h	/^  double graspAttemptCounter = 0;$/;"	m	class:EinConfig
graspBackoffDistance	config.h	/^  double graspBackoffDistance = 0.20;$/;"	m	class:EinConfig
graspDepthOffset	config.h	/^  double graspDepthOffset = -0.02;\/\/-0.01;$/;"	m	class:EinConfig
graspLearningMaxTries	config.h	/^  int graspLearningMaxTries = 10;$/;"	m	class:EinConfig
graspMemoryCallbackFunc	ein.cpp	/^void graspMemoryCallbackFunc(int event, int x, int y, int flags, void* userdata) {$/;"	f
graspMemoryImage	config.h	/^  Mat graspMemoryImage;$/;"	m	class:EinConfig
graspMemoryPicks	config.h	/^  double graspMemoryPicks[4*rmWidth*rmWidth];$/;"	m	class:EinConfig
graspMemoryReg1	config.h	/^  double graspMemoryReg1[4*rmWidth*rmWidth];$/;"	m	class:EinConfig
graspMemorySample	config.h	/^  double graspMemorySample[4*rmWidth*rmWidth];$/;"	m	class:EinConfig
graspMemorySampleImage	config.h	/^  Mat graspMemorySampleImage;$/;"	m	class:EinConfig
graspMemorySampleWindow	config.h	/^  EinWindow * graspMemorySampleWindow;$/;"	m	class:EinConfig
graspMemoryTries	config.h	/^  double graspMemoryTries[4*rmWidth*rmWidth];$/;"	m	class:EinConfig
graspMemoryWindow	config.h	/^  EinWindow * graspMemoryWindow;$/;"	m	class:EinConfig
graspMode	config.h	/^} graspMode;$/;"	t	typeref:enum:__anon21
graspSuccessCounter	config.h	/^  double graspSuccessCounter = 0;$/;"	m	class:EinConfig
graspSuccessRate	config.h	/^  double graspSuccessRate = 0;$/;"	m	class:EinConfig
graspTrialStart	config.h	/^  ros::Time graspTrialStart;$/;"	m	class:EinConfig
grasp_pose	config.h	/^  eePose grasp_pose;$/;"	m	struct:Grasp
gravityCompCallback	ein.cpp	/^void MachineState::gravityCompCallback(const baxter_core_msgs::SEAJointState& seaJ) {$/;"	f	class:MachineState
gravity_comp_sub	config.h	/^  ros::Subscriber gravity_comp_sub;$/;"	m	class:EinConfig
grayBlur	config.h	/^  constexpr static double grayBlur = 1.0;$/;"	m	class:EinConfig
grayBot	config.h	/^  cv::Point grayBot;$/;"	m	class:EinConfig
grayTop	config.h	/^  cv::Point grayTop;$/;"	m	class:EinConfig
green	gaussian_map.h	/^  GaussianMapChannel green;$/;"	m	struct:_GaussianMapCell
green_halo_pub	config.h	/^  ros::Publisher green_halo_pub;$/;"	m	class:EinConfig
green_halo_state	config.h	/^  double green_halo_state = 100.0;$/;"	m	class:EinConfig
gridKeypoints	ein.cpp	/^void gridKeypoints(MachineState * ms, int gImW, int gImH, cv::Point top, cv::Point bot, int strideX, int strideY, vector<KeyPoint>& keypoints, int period) {$/;"	f
gripState	config.h	/^  ros::Subscriber gripState;$/;"	m	class:EinConfig
gripStateCallback	ein.cpp	/^void MachineState::gripStateCallback(const baxter_core_msgs::EndEffectorState& ees) {$/;"	f	class:MachineState
gripperGripping	config.h	/^  int gripperGripping = 0;$/;"	m	class:EinConfig
gripperLastUpdated	config.h	/^  ros::Time gripperLastUpdated;$/;"	m	class:EinConfig
gripperMask	config.h	/^  Mat gripperMask;$/;"	m	class:EinConfig
gripperMaskCounts	config.h	/^  int gripperMaskCounts;$/;"	m	class:EinConfig
gripperMaskFirstContrast	config.h	/^  Mat gripperMaskFirstContrast;$/;"	m	class:EinConfig
gripperMaskMean	config.h	/^  Mat gripperMaskMean;$/;"	m	class:EinConfig
gripperMaskSecondContrast	config.h	/^  Mat gripperMaskSecondContrast;$/;"	m	class:EinConfig
gripperMaskSquares	config.h	/^  Mat gripperMaskSquares;$/;"	m	class:EinConfig
gripperMaskThresh	config.h	/^  double gripperMaskThresh = 0.02;$/;"	m	class:EinConfig
gripperMoving	config.h	/^  int gripperMoving = 0;$/;"	m	class:EinConfig
gripperNotMovingConfirmTime	config.h	/^  double gripperNotMovingConfirmTime = 0.25;$/;"	m	class:EinConfig
gripperPosition	config.h	/^  double gripperPosition = 0;$/;"	m	class:EinConfig
gripperPub	config.h	/^  ros::Publisher gripperPub;$/;"	m	class:EinConfig
gripperThresh	config.h	/^  double gripperThresh = 3.5;\/\/6.0;\/\/7.0;$/;"	m	class:EinConfig
gshCounts	config.h	/^  double gshCounts;$/;"	m	class:EinConfig
gshHistogram	config.h	/^  eePose gshHistogram;$/;"	m	class:EinConfig
gshPose	config.h	/^  eePose gshPose;$/;"	m	class:EinConfig
guard3dGrasps	ein.cpp	/^void guard3dGrasps(MachineState * ms) {$/;"	f
guardGraspMemory	ein.cpp	/^void guardGraspMemory(MachineState * ms) {$/;"	f
guardHeightMemory	ein.cpp	/^void guardHeightMemory(MachineState * ms) {$/;"	f
guardSceneModels	ein.cpp	/^void guardSceneModels(MachineState * ms) {$/;"	f
guardViewers	ein.cpp	/^void guardViewers(MachineState * ms) {$/;"	f
hColor	opencl/oclNbody/src/oclNbody.cpp	/^float* hColor = 0;$/;"	v
hPos	opencl/oclNbody/src/oclNbody.cpp	/^float* hPos = 0;$/;"	v
hVel	opencl/oclNbody/src/oclNbody.cpp	/^float* hVel = 0;$/;"	v
handCameraOffset	config.h	/^  eePose handCameraOffset = {0.03815,0.01144,0.01589, 0,0,0,1};$/;"	m	class:EinConfig
handEndEffectorOffset	config.h	/^  eePose handEndEffectorOffset = {0,0,0.028838, 0,0,0,1};$/;"	m	class:EinConfig
handFromEndEffectorTransform	config.h	/^  eePose handFromEndEffectorTransform = {0,0,0, 0,0,0,1};$/;"	m	class:EinConfig
handRangeOffset	config.h	/^  eePose handRangeOffset = {0.03192,-0.02046,0.028838, 0,0,0,1};$/;"	m	class:EinConfig
handToRethinkEndPointTransform	config.h	/^  eePose handToRethinkEndPointTransform = {0,0,0, 0,0,0,1};$/;"	m	class:EinConfig
handingPose	config.h	/^  eePose handingPose;$/;"	m	class:EinConfig
hankel	cephes/jv.c	/^static double hankel(double n, double x)$/;"	f	file:
happy	ein.cpp	/^void happy(MachineState * ms) {$/;"	f
hardMaxGradientServoIterations	config.h	/^  int hardMaxGradientServoIterations = 5;\/\/10;\/\/2;\/\/5;\/\/5;\/\/3;\/\/10;\/\/20;\/\/3;\/\/10;$/;"	m	class:EinConfig
has_binomial	randomkit.h	/^    int has_binomial; \/* !=0: following parameters initialized for$/;"	m	struct:rk_state_
has_gauss	randomkit.h	/^    int has_gauss; \/* !=0: gauss contains a gaussian deviate *\/$/;"	m	struct:rk_state_
headPan	ein_aibo.h	/^  double headPan;$/;"	m	class:EinAiboJoints
headPub	config.h	/^  ros::Publisher headPub;$/;"	m	class:EinConfig
headTilt	ein_aibo.h	/^  double headTilt;$/;"	m	class:EinAiboJoints
headTouch	ein_aibo.h	/^  double headTouch;$/;"	m	class:EinAiboSensors
headerData	qtgui/stackmodel.cpp	/^QVariant StackModel::headerData(int section \/* section *\/,$/;"	f	class:StackModel
heartBeatCounter	config.h	/^  int heartBeatCounter = 0;$/;"	m	class:EinConfig
heartBeatPeriod	config.h	/^  int heartBeatPeriod = 150;$/;"	m	class:EinConfig
height	gaussian_map.h	/^  int height; \/\/ or rows$/;"	m	class:GaussianMap
height	gaussian_map.h	/^  int height; \/\/ or rows$/;"	m	class:Scene
heightAttemptCounter	config.h	/^  double heightAttemptCounter = 0;$/;"	m	class:EinConfig
heightEccentricity	config.h	/^  double heightEccentricity = 1.0;$/;"	m	class:EinConfig
heightLearningServoTimeout	config.h	/^  int heightLearningServoTimeout = 10;$/;"	m	class:EinConfig
heightMemoryPicks	config.h	/^  double heightMemoryPicks[hmWidth];$/;"	m	class:EinConfig
heightMemorySample	config.h	/^  double heightMemorySample[hmWidth];$/;"	m	class:EinConfig
heightMemorySampleImage	config.h	/^  Mat heightMemorySampleImage;$/;"	m	class:EinConfig
heightMemorySampleWindow	config.h	/^  EinWindow * heightMemorySampleWindow;$/;"	m	class:EinConfig
heightMemoryTries	config.h	/^  double heightMemoryTries[hmWidth];$/;"	m	class:EinConfig
heightReticles	config.h	/^  eePose heightReticles[4];$/;"	m	class:EinConfig
heightSuccessCounter	config.h	/^  double heightSuccessCounter = 0;$/;"	m	class:EinConfig
heightView	qtgui/gaussianmapwidget.h	/^    DefaultEinViewPort heightView;$/;"	m	class:GaussianMapWidget
hiColorRangeMapAccumulator	config.h	/^  double hiColorRangeMapAccumulator[3*hrmWidth*hrmWidth];$/;"	m	class:EinConfig
hiColorRangeMapMass	config.h	/^  double hiColorRangeMapMass[hrmWidth*hrmWidth];$/;"	m	class:EinConfig
hiColorRangemapImage	config.h	/^  Mat hiColorRangemapImage;$/;"	m	class:EinConfig
hiColorRangemapWindow	config.h	/^  EinWindow * hiColorRangemapWindow;$/;"	m	class:EinConfig
hiRangeMap	config.h	/^  double hiRangeMap[hrmWidth*hrmWidth];$/;"	m	class:EinConfig
hiRangeMapAccumulator	config.h	/^  double hiRangeMapAccumulator[hrmWidth*hrmWidth];$/;"	m	class:EinConfig
hiRangeMapMass	config.h	/^  double hiRangeMapMass[hrmWidth*hrmWidth];$/;"	m	class:EinConfig
hiRangeMapReg1	config.h	/^  double hiRangeMapReg1[hrmWidth*hrmWidth];$/;"	m	class:EinConfig
hiRangeMapReg2	config.h	/^  double hiRangeMapReg2[hrmWidth*hrmWidth];$/;"	m	class:EinConfig
hiRangemapImage	config.h	/^  Mat hiRangemapImage;$/;"	m	class:EinConfig
hiRangemapWindow	config.h	/^  EinWindow * hiRangemapWindow;$/;"	m	class:EinConfig
hiTrackbarVariable	config.h	/^  int hiTrackbarVariable = 35;\/\/40;\/\/50;$/;"	m	class:EinConfig
hmWidth	config.h	/^  const static int hmWidth = 4; $/;"	m	class:EinConfig
hmiCellWidth	config.h	/^  int hmiCellWidth = 100;$/;"	m	class:EinConfig
hmiHeight	config.h	/^  int hmiHeight = hmiCellWidth*hmWidth;$/;"	m	class:EinConfig
hmiWidth	config.h	/^  int hmiWidth = hmiCellWidth;$/;"	m	class:EinConfig
hoverAngleThresh	config.h	/^  double hoverAngleThresh = 0.02;$/;"	m	class:EinConfig
hoverGoThresh	config.h	/^  double hoverGoThresh = 0.02;$/;"	m	class:EinConfig
hoverThreshold	config.h	/^  double hoverThreshold = 0.003; $/;"	m	class:EinConfig
hoverTimeout	config.h	/^  double hoverTimeout = 3.0;\/\/2.0; \/\/ seconds$/;"	m	class:EinConfig
hrmDelta	config.h	/^  constexpr static double hrmDelta = 0.001;$/;"	m	class:EinConfig
hrmHalfWidth	config.h	/^  const static int hrmHalfWidth = (hrmWidth-1)\/2; \/\/ must be odd$/;"	m	class:EinConfig
hrmWidth	config.h	/^  const static int hrmWidth = 211; \/\/ must be odd$/;"	m	class:EinConfig
hrmiHeight	config.h	/^  int hrmiHeight = hrmWidth;$/;"	m	class:EinConfig
hrmiWidth	config.h	/^  int hrmiWidth = hrmWidth;$/;"	m	class:EinConfig
htj0	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
htj0	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
htj1	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
htj1	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
htj2	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
htj2	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
htj3	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
htj3	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
htj4	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
htj4	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
htj5	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
htj5	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
htj6	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
htj6	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
hy1f1a	cephes/hyperg.c	/^static double hy1f1a(a, b, x, err)$/;"	f	file:
hy1f1p	cephes/hyperg.c	/^static double hy1f1p(a, b, x, err)$/;"	f	file:
hyp2f0	cephes/cephes_names.h	36;"	d
hyp2f0	cephes/hyperg.c	/^double hyp2f0(a, b, x, type, err)$/;"	f
hyp2f1	cephes/cephes_names.h	34;"	d
hyp2f1	cephes/hyp2f1.c	/^double hyp2f1(a, b, c, x)$/;"	f
hyp2f1ra	cephes/hyp2f1.c	/^static double hyp2f1ra(double a, double b, double c, double x,$/;"	f	file:
hyp3f0	cephes/shichi.c	/^static double hyp3f0(double a1, double a2, double a3, double z)$/;"	f	file:
hyperg	cephes/cephes_names.h	35;"	d
hyperg	cephes/hyperg.c	/^double hyperg(a, b, x)$/;"	f
hys2f1	cephes/hyp2f1.c	/^static double hys2f1(a, b, c, x, loss)$/;"	f	file:
hyt2f1	cephes/hyp2f1.c	/^static double hyt2f1(a, b, c, x, loss)$/;"	f	file:
i	cephes/cpmul.c	/^    double i;$/;"	m	struct:__anon37	file:
i	cephes/protos.h	/^    double i;$/;"	m	struct:__anon38
i0	cephes/cephes_names.h	39;"	d
i0	cephes/i0.c	/^double i0(x)$/;"	f
i0e	cephes/cephes_names.h	40;"	d
i0e	cephes/i0.c	/^double i0e(x)$/;"	f
i1	cephes/cephes_names.h	41;"	d
i1	cephes/i1.c	/^double i1(x)$/;"	f
i1e	cephes/cephes_names.h	42;"	d
i1e	cephes/i1.c	/^double i1e(x)$/;"	f
iFrameCount	opencl/oclNbody/src/oclNbody.cpp	/^int iFrameCount = 0;                \/\/ FPS count for averaging$/;"	v
iFrameTrigger	opencl/oclNbody/src/oclNbody.cpp	/^int iFrameTrigger = 90;             \/\/ FPS trigger for sampling$/;"	v
iFramesPerSec	opencl/oclNbody/src/oclNbody.cpp	/^int iFramesPerSec = 60;             \/\/ frames per second$/;"	v
iGLUTWindowHandle	opencl/oclNbody/src/oclNbody.cpp	/^int iGLUTWindowHandle;              \/\/ handle to the GLUT window$/;"	v
iGraphicsWinHeight	opencl/oclNbody/src/oclNbody.cpp	/^int iGraphicsWinHeight = 768;       \/\/ GL Window height$/;"	v
iGraphicsWinPosX	opencl/oclNbody/src/oclNbody.cpp	/^int iGraphicsWinPosX = 0;           \/\/ GLUT Window X location$/;"	v
iGraphicsWinPosY	opencl/oclNbody/src/oclNbody.cpp	/^int iGraphicsWinPosY = 0;           \/\/ GLUT Window Y location$/;"	v
iGraphicsWinWidth	opencl/oclNbody/src/oclNbody.cpp	/^int iGraphicsWinWidth = 1024;       \/\/ GLUT Window width$/;"	v
iTestSets	opencl/oclNbody/src/oclNbody.cpp	/^int iTestSets = 3;$/;"	v
iVsyncState	opencl/oclNbody/src/oclNbody.cpp	/^GLint iVsyncState;                  \/\/ state var to cache startup Vsync setting$/;"	v
icvmouseHandler	qtgui/window_QT.cpp	/^void DefaultEinViewPort::icvmouseHandler(QMouseEvent *evnt, type_mouse_event category, int &cv_event, int &flags)$/;"	f	class:DefaultEinViewPort
icvmouseHandler	qtgui/window_QT.cpp	/^void OpenGlEinViewPort::icvmouseHandler(QMouseEvent* evnt, type_mouse_event category, int& cv_event, int& flags)$/;"	f	class:OpenGlEinViewPort
icvmouseProcessing	qtgui/window_QT.cpp	/^void DefaultEinViewPort::icvmouseProcessing(QPointF pt, int cv_event, int flags)$/;"	f	class:DefaultEinViewPort
icvmouseProcessing	qtgui/window_QT.cpp	/^void OpenGlEinViewPort::icvmouseProcessing(QPointF pt, int cv_event, int flags)$/;"	f	class:OpenGlEinViewPort
identity	eePose.cpp	/^_eePose _eePose::identity() {$/;"	f	class:_eePose
idleMode	config.h	/^} idleMode;$/;"	t	typeref:enum:__anon15
igam	cephes/cephes_names.h	44;"	d
igam	cephes/igam.c	/^double igam(a, x)$/;"	f
igamc	cephes/cephes_names.h	43;"	d
igamc	cephes/igam.c	/^double igamc(a, x)$/;"	f
igami	cephes/cephes_names.h	45;"	d
igami	cephes/igami.c	/^double igami(a, y0)$/;"	f
ikAtPose	ein_ik.cpp	/^ikMapState ikAtPose(MachineState * ms, eePose pose) {$/;"	f
ikAtPoses	ein_ik.cpp	/^vector<ikMapState> ikAtPoses(MachineState * ms, vector<eePose> poses) {$/;"	f
ikBoundaryMode	config.h	/^} ikBoundaryMode;$/;"	t	typeref:enum:__anon18
ikClient	config.h	/^  ros::ServiceClient ikClient;$/;"	m	class:EinConfig
ikFastMode	config.h	/^} ikFastMode;$/;"	t	typeref:enum:__anon20
ikInitialized	config.h	/^  int ikInitialized = 0;$/;"	m	class:EinConfig
ikMap	config.h	/^  int ikMap[mapWidth * mapHeight];$/;"	m	class:EinConfig
ikMapAtHeight	config.h	/^  int ikMapAtHeight[mapWidth * mapHeight * numIkMapHeights];$/;"	m	class:EinConfig
ikMapEndHeight	config.h	/^  double ikMapEndHeight;$/;"	m	class:EinConfig
ikMapStartHeight	config.h	/^  double ikMapStartHeight;$/;"	m	class:EinConfig
ikMapState	config.h	/^} ikMapState;$/;"	t	typeref:enum:__anon8
ikMode	config.h	/^} ikMode;$/;"	t	typeref:enum:__anon19
ikModeToString	config.cpp	/^string ikModeToString(ikMode mode) {$/;"	f
ikRequest	config.h	/^  baxter_core_msgs::SolvePositionIK ikRequest;$/;"	m	class:EinConfig
ikShare	config.h	/^  double ikShare = 1.0;$/;"	m	class:EinConfig
ik_reset_counter	config.h	/^  int ik_reset_counter = 0;$/;"	m	class:EinConfig
ik_reset_eePose	config.h	/^  eePose ik_reset_eePose;$/;"	m	class:EinConfig
ik_reset_thresh	config.h	/^  int ik_reset_thresh = 20;$/;"	m	class:EinConfig
ikfast	ikfast/ikfast.h	/^namespace ikfast {$/;"	n
ikfast_computeFK	ikfast/ikfast_wrapper.cpp	/^eePose ikfast_computeFK(MachineState * ms, vector<double> joint_angles) {$/;"	f	namespace:MY_NAMESPACE
ikfast_getSolution	ikfast/ikfast_wrapper.cpp	/^void ikfast_getSolution(const IkSolutionList<IkReal> &solutions, int i, std::vector<double>& solution) {$/;"	f	namespace:MY_NAMESPACE
ikfast_joint_error	ikfast/ikfast_wrapper.cpp	/^double ikfast_joint_error(vector<double> p1, vector<double> p2) {$/;"	f	namespace:MY_NAMESPACE
ikfast_joint_error_weighted	ikfast/ikfast_wrapper.cpp	/^double ikfast_joint_error_weighted(vector<double> p1, vector<double> p2, vector<double> weights) {$/;"	f	namespace:MY_NAMESPACE
ikfast_obeys_limits	ikfast/ikfast_wrapper.cpp	/^bool ikfast_obeys_limits(vector<double> joints, vector<double> joint_min_vector, vector<double> joint_max_vector, double tolerance) {$/;"	f	namespace:MY_NAMESPACE
ikfast_search	ikfast/ikfast_wrapper.cpp	/^bool ikfast_search(MachineState * ms, geometry_msgs::Pose pose, double free, std::vector<double>& outsol)  {$/;"	f	namespace:MY_NAMESPACE
ikfast_solve	ikfast/ikfast_wrapper.cpp	/^int ikfast_solve(MachineState * ms, geometry_msgs::Pose pose, double free, IkSolutionList<IkReal> &solutions) {$/;"	f	namespace:MY_NAMESPACE
ikv_asymptotic_uniform	cephes/scipy_iv.c	/^void ikv_asymptotic_uniform(double v, double x,$/;"	f
ikv_temme	cephes/scipy_iv.c	/^void ikv_temme(double v, double x, double *Iv_p, double *Kv_p)$/;"	f
imRBTimes	config.h	/^  std::vector<ros::Time> imRBTimes;$/;"	m	class:EinConfig
imRingBuffer	config.h	/^  std::vector<Mat> imRingBuffer;$/;"	m	class:EinConfig
imRingBufferAdvance	ein.cpp	/^void imRingBufferAdvance(MachineState * ms) {$/;"	f
imRingBufferEnd	config.h	/^  int imRingBufferEnd = 0;$/;"	m	class:EinConfig
imRingBufferSize	config.h	/^  const int imRingBufferSize = 300;$/;"	m	class:EinConfig
imRingBufferStart	config.h	/^  int imRingBufferStart = 0;$/;"	m	class:EinConfig
image	config.h	/^  Mat image;$/;"	m	struct:Sprite
image	config.h	/^  Mat image;$/;"	m	struct:streamImage
image2Draw_mat	qtgui/window_QT.h	/^    CvMat* image2Draw_mat;$/;"	m	class:DefaultEinViewPort
image2Draw_qt	qtgui/window_QT.h	/^    QImage image2Draw_qt;$/;"	m	class:DefaultEinViewPort
imageCallback	ein.cpp	/^void MachineState::imageCallback(const sensor_msgs::ImageConstPtr& msg){$/;"	f	class:MachineState
image_sub	config.h	/^  image_transport::Subscriber image_sub;$/;"	m	class:EinConfig
image_topic	config.h	/^  std::string image_topic = "\/camera\/rgb\/image_raw"; $/;"	m	class:EinConfig
imgRegion	qtgui/window_QT.cpp	/^void DefaultEinViewPort::imgRegion()$/;"	f	class:DefaultEinViewPort
inCollision	config.h	/^  bool inCollision;$/;"	m	struct:CollisionDetection
incbcf	cephes/incbet.c	/^static double incbcf(a, b, x)$/;"	f	file:
incbd	cephes/incbet.c	/^static double incbd(a, b, x)$/;"	f	file:
incbet	cephes/cephes_names.h	46;"	d
incbet	cephes/incbet.c	/^double incbet(aa, bb, xx)$/;"	f
incbi	cephes/cephes_names.h	47;"	d
incbi	cephes/incbi.c	/^double incbi(aa, bb, yy0)$/;"	f
indices	ikfast/ikfast.h	/^    unsigned char indices[5]; \/\/\/< unique index of the solution used to keep track on what part it came from. sometimes a solution can be repeated for different indices. store at least another repeated root$/;"	m	class:ikfast::IkSingleDOFSolutionBase
inertia	opencl/oclNbody/src/oclNbody.cpp	/^const float inertia      = 0.1f;$/;"	v
infoText	qtgui/window_QT.h	/^    QString infoText;$/;"	m	class:DefaultEinViewPort
init	opencl/oclNbody/src/cmd_arg_reader.cpp	/^CmdArgReader::init( const int argc, const char** argv) $/;"	f	class:CmdArgReader
initClassFolders	ein.cpp	/^void initClassFolders(MachineState * ms, string folderName) {$/;"	f
initCounts	gaussian_map.cpp	/^void TransitionTable::initCounts() {$/;"	f	class:TransitionTable
initRangeMaps	ein.cpp	/^void initRangeMaps(MachineState * ms) {$/;"	f
initRangeMapsNoLoad	ein.cpp	/^void initRangeMapsNoLoad(MachineState * ms) {$/;"	f
initVectorArcTan	ein.cpp	/^void initVectorArcTan(MachineState * ms) {$/;"	f
initialize3DParzen	ein.cpp	/^void initialize3DParzen(MachineState * ms) {$/;"	f
initializeAndFocusOnNewClass	ein_scanning.cpp	/^void initializeAndFocusOnNewClass(MachineState * ms) {$/;"	f
initializeAndFocusOnTempClass	ein_scanning.cpp	/^void initializeAndFocusOnTempClass(MachineState * ms) {$/;"	f
initializeArm	ein.cpp	/^void initializeArm(MachineState * ms, string left_or_right_arm) {$/;"	f
initializeArmGui	ein.cpp	/^void initializeArmGui(MachineState * ms, MainWindow * einMainWindow) {$/;"	f
initializeGL	qtgui/window_QT.cpp	/^void OpenGlEinViewPort::initializeGL()$/;"	f	class:OpenGlEinViewPort
initializeMachine	ein_util.cpp	/^void initializeMachine(MachineState * ms) {$/;"	f
initializeMap	ein.cpp	/^void initializeMap(MachineState * ms) {$/;"	f
initializeParzen	ein.cpp	/^void initializeParzen(MachineState * ms) {$/;"	f
initializePredictedMapWithBackground	gaussian_map.cpp	/^void Scene::initializePredictedMapWithBackground() {$/;"	f	class:Scene
initializeWords	word.cpp	/^void initializeWords() {$/;"	f
initialized	faces.cpp	/^int initialized = 0;$/;"	v
initialized	slu/math3d.h	/^  int initialized; \/\/ should change all args to use pointers, because this doesn't play nice with swig.$/;"	m	struct:__anon7
innerProduct	gaussian_map.cpp	/^double _GaussianMapCell::innerProduct(_GaussianMapCell * other, double * rterm_out, double * gterm_out, double * bterm_out) {$/;"	f	class:_GaussianMapCell
instanceSprites	config.h	/^  vector<Sprite> instanceSprites;$/;"	m	class:EinConfig
integralDensity	config.h	/^  double *integralDensity = NULL;$/;"	m	class:EinConfig
intendedEnableState	config.h	/^  int intendedEnableState = 1;$/;"	m	class:EinConfig
intendedGain	ein_aibo.h	/^  EinAiboJoints intendedGain[3];$/;"	m	class:EinAiboConfig
intendedIndicators	ein_aibo.h	/^  EinAiboIndicators intendedIndicators;$/;"	m	class:EinAiboConfig
intendedPose	ein_aibo.h	/^  EinAiboJoints intendedPose;$/;"	m	class:EinAiboConfig
intercept	slu/math2d.h	/^  double intercept;$/;"	m	struct:fit_line_result
interpolateM_xAndM_yFromZ	ein.cpp	/^void interpolateM_xAndM_yFromZ(MachineState * ms, double dZ, double * m_x, double * m_y) {$/;"	f
invQ	eePose.cpp	/^_eePose _eePose::invQ() const {$/;"	f	class:_eePose
ip_string	ein_aibo.h	/^  string ip_string;$/;"	m	class:EinAiboConfig
irGlobalPositionEEFrame	config.h	/^  Quaternionf irGlobalPositionEEFrame;$/;"	m	class:EinConfig
isBlueBoxIkPossible	ein.cpp	/^bool isBlueBoxIkPossible(MachineState * ms, cv::Point tbTop, cv::Point tbBot) {$/;"	f
isBoxMemoryIkPossible	ein.cpp	/^bool isBoxMemoryIkPossible(MachineState * ms, BoxMemory b) {$/;"	f
isCellIkColliding	ein.cpp	/^bool isCellIkColliding(MachineState * ms, int i, int j) {$/;"	f
isCellIkImpossible	ein.cpp	/^bool isCellIkImpossible(MachineState * ms, int i, int j) {$/;"	f
isCellIkPossible	ein.cpp	/^bool isCellIkPossible(MachineState * ms, int i, int j) {$/;"	f
isCellInPatrolZone	ein.cpp	/^bool isCellInPatrolZone(MachineState * ms, int i, int j) {$/;"	f
isCellInPursuitZone	ein.cpp	/^bool isCellInPursuitZone(MachineState * ms, int i, int j) {$/;"	f
isCellInteresting	ein.cpp	/^bool isCellInteresting(MachineState * ms, int i, int j) {$/;"	f
isComment	word.cpp	/^bool CommentWord::isComment(string token) {$/;"	f	class:CommentWord
isDiscrepantCell	gaussian_map.cpp	/^bool Scene::isDiscrepantCell(double threshold, int x, int y) {$/;"	f	class:Scene
isDiscrepantCellBilin	gaussian_map.cpp	/^bool Scene::isDiscrepantCellBilin(double threshold, double x, double y) {$/;"	f	class:Scene
isDiscrepantMetersBilin	gaussian_map.cpp	/^bool Scene::isDiscrepantMetersBilin(double threshold, double x, double y) {$/;"	f	class:Scene
isDouble	word.cpp	/^bool DoubleWord::isDouble(string token) {$/;"	f	class:DoubleWord
isFiniteNumber	ein.cpp	/^bool isFiniteNumber(double x) {$/;"	f
isFocusedClassValid	ein.cpp	/^bool isFocusedClassValid(MachineState * ms) {$/;"	f
isGripperGripping	ein.cpp	/^bool isGripperGripping(MachineState * ms) {$/;"	f
isInGripperMask	ein.cpp	/^bool isInGripperMask(MachineState * ms, int x, int y) {$/;"	f
isInGripperMaskBlocks	ein.cpp	/^bool isInGripperMaskBlocks(MachineState * ms, int x, int y) {$/;"	f
isInteger	repl.cpp	/^  static bool isInteger(string token) {$/;"	f	class:Integer
isInteger	word.h	/^  static bool isInteger(string token) {$/;"	f	class:AiboPoseWord
isInteger	word.h	/^  static bool isInteger(string token) {$/;"	f	class:ArmPoseWord
isInteger	word.h	/^  static bool isInteger(string token) {$/;"	f	class:EePoseWord
isInteger	word.h	/^  static bool isInteger(string token) {$/;"	f	class:IntegerWord
isMinus	repl.cpp	/^  static bool isMinus(string token) {$/;"	f	class:Minus
isPlus	repl.cpp	/^  static bool isPlus(string token) {$/;"	f	class:Plus
isSameSize	qtgui/window_QT.cpp	/^inline bool DefaultEinViewPort::isSameSize(IplImage* img1, IplImage* img2)$/;"	f	class:DefaultEinViewPort
isSketchyMat	ein_util.cpp	/^bool isSketchyMat(Mat sketchy) {$/;"	f
isString	word.h	/^  static bool isString(string token) {$/;"	f	class:StringWord
isSymbol	word.cpp	/^bool SymbolWord::isSymbol(string token)$/;"	f	class:SymbolWord
isThisGraspMaxedOut	ein.cpp	/^int isThisGraspMaxedOut(MachineState * ms, int i) {$/;"	f
is_base64	base64.cpp	/^static inline bool is_base64(unsigned char c) {$/;"	f	file:
is_c	tokenizer.hpp	/^  bool is_c(Char e) {$/;"	f	class:escaped_forth_separator
is_escape	tokenizer.hpp	/^  bool is_escape(Char e) {$/;"	f	class:escaped_forth_separator
is_quote	tokenizer.hpp	/^  bool is_quote(Char e) {$/;"	f	class:escaped_forth_separator
is_static	word.h	/^  virtual bool is_static() {$/;"	f	class:AiboPoseWord
is_static	word.h	/^  virtual bool is_static() {$/;"	f	class:ArmPoseWord
is_static	word.h	/^  virtual bool is_static() {$/;"	f	class:CommentWord
is_static	word.h	/^  virtual bool is_static() {$/;"	f	class:DoubleWord
is_static	word.h	/^  virtual bool is_static() {$/;"	f	class:EePoseWord
is_static	word.h	/^  virtual bool is_static() {$/;"	f	class:IntegerWord
is_static	word.h	/^  virtual bool is_static() {$/;"	f	class:StringWord
is_static	word.h	/^  virtual bool is_static() {$/;"	f	class:SymbolWord
is_value	word.h	/^  virtual bool is_value() {$/;"	f	class:AiboPoseWord
is_value	word.h	/^  virtual bool is_value() {$/;"	f	class:ArmPoseWord
is_value	word.h	/^  virtual bool is_value() {$/;"	f	class:CommentWord
is_value	word.h	/^  virtual bool is_value() {$/;"	f	class:DoubleWord
is_value	word.h	/^  virtual bool is_value() {$/;"	f	class:EePoseWord
is_value	word.h	/^  virtual bool is_value() {$/;"	f	class:IntegerWord
is_value	word.h	/^  virtual bool is_value() {$/;"	f	class:StringWord
is_value	word.h	/^  virtual bool is_value() {$/;"	f	class:SymbolWord
is_value	word.h	/^  virtual bool is_value() {$/;"	f	class:Word
isnan	ikfast/baxter_left_arm_ikfast_solver.cpp	68;"	d	file:
isnan	ikfast/baxter_right_arm_ikfast_solver.cpp	68;"	d	file:
isnan	ikfast/ikfast_wrapper.cpp	3;"	d	file:
it	config.h	/^  shared_ptr<image_transport::ImageTransport> it;$/;"	m	class:EinConfig
iter	opencl/oclNbody/inc/cmd_arg_reader.h	/^    ArgsMapIter iter;$/;"	m	class:CmdArgReader
iter_unprocessed	opencl/oclNbody/inc/cmd_arg_reader.h	/^    UnpMapIter iter_unprocessed;$/;"	m	class:CmdArgReader
iv	cephes/cephes_names.h	48;"	d
iv	cephes/scipy_iv.c	/^double iv(double v, double x)$/;"	f
iv_asymptotic	cephes/scipy_iv.c	/^static double iv_asymptotic(double v, double x)$/;"	f	file:
j0	cephes/cephes_names.h	49;"	d
j0	cephes/j0.c	/^double j0(x)$/;"	f
j0	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
j0	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
j1	cephes/cephes_names.h	51;"	d
j1	cephes/j1.c	/^double j1(x)$/;"	f
j1	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
j1	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
j2	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
j2	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
j3	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
j3	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
j4	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
j4	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
j5	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
j5	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
j6	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
j6	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
jams	config.h	/^  double jams;$/;"	m	struct:Grasp
jn	cephes/cephes_names.h	53;"	d
jnt	cephes/jv.c	/^static double jnt(double n, double x)$/;"	f	file:
jnx	cephes/jv.c	/^static double jnx(double n, double x)$/;"	f	file:
jointCallback	ein.cpp	/^void MachineState::jointCallback(const sensor_msgs::JointState& js) {$/;"	f	class:MachineState
jointEfforts	config.h	/^  double jointEfforts[NUM_JOINTS];$/;"	m	struct:streamJoints
jointNames	config.h	/^  std::vector<std::string> jointNames;$/;"	m	class:EinConfig
jointNamesInit	config.h	/^  int jointNamesInit = 0;$/;"	m	class:EinConfig
jointPositions	config.h	/^  double jointPositions[NUM_JOINTS];$/;"	m	struct:streamJoints
jointSubscriber	config.h	/^  ros::Subscriber jointSubscriber;$/;"	m	class:EinConfig
jointVelocities	config.h	/^  double jointVelocities[NUM_JOINTS];$/;"	m	struct:streamJoints
joint_max	config.h	/^  double joint_max[NUM_JOINTS];$/;"	m	class:EinConfig
joint_min	config.h	/^  double joint_min[NUM_JOINTS];$/;"	m	class:EinConfig
joint_mover	config.h	/^  ros::Publisher joint_mover;$/;"	m	class:EinConfig
joints	eePose.h	/^  double joints[7];$/;"	m	struct:_armPose
jointtype	ikfast/ikfast.h	/^    unsigned char jointtype; \/\/\/< joint type, 0x01 is revolute, 0x11 is slider$/;"	m	class:ikfast::IkSingleDOFSolutionBase
jv	cephes/cephes_names.h	54;"	d
jv	cephes/jv.c	/^double jv(double n, double x)$/;"	f
jvs	cephes/jv.c	/^static double jvs(double n, double x)$/;"	f	file:
k0	cephes/cephes_names.h	55;"	d
k0	cephes/k0.c	/^double k0(x)$/;"	f
k0e	cephes/cephes_names.h	56;"	d
k0e	cephes/k0.c	/^double k0e(x)$/;"	f
k1	cephes/cephes_names.h	57;"	d
k1	cephes/k1.c	/^double k1(x)$/;"	f
k1e	cephes/cephes_names.h	58;"	d
k1e	cephes/k1.c	/^double k1e(x)$/;"	f
kNN	config.h	/^  CvKNearest *kNN = NULL;$/;"	m	class:EinConfig
kNNGetFeatures	ein.cpp	/^void kNNGetFeatures(MachineState * ms, std::string classDir, const char *className, int label, double sigma, Mat &kNNfeatures, Mat &kNNlabels, double sobel_sigma) {$/;"	f
kPThresh	config.h	/^  int kPThresh = 3;$/;"	m	class:EinConfig
kPtheta1	config.h	/^  double kPtheta1 = 1.0;\/\/0.75;$/;"	m	class:EinConfig
kPtheta2	config.h	/^  double kPtheta2 = 0.125;\/\/0.75;$/;"	m	class:EinConfig
kernelCreate	opencl/ein_opencl.cpp	/^void EinGpuConfig::kernelCreate(shared_ptr<GaussianMapGpu> gmgpu) {$/;"	f	class:EinGpuConfig
kernelReturn	opencl/ein_opencl.cpp	/^void EinGpuConfig::kernelReturn(shared_ptr<GaussianMapGpu> gmgpu) {$/;"	f	class:EinGpuConfig
kernelRun	opencl/ein_opencl.cpp	/^void EinGpuConfig::kernelRun(shared_ptr<GaussianMapGpu> gmgpu) {$/;"	f	class:EinGpuConfig
key	randomkit.h	/^    unsigned long key[RK_STATE_LEN];$/;"	m	struct:rk_state_
keyPressEvent	qtgui/capturelineedit.cpp	/^void CaptureLineEdit::keyPressEvent(QKeyEvent * event)$/;"	f	class:CaptureLineEdit
keyPressEvent	qtgui/einwindow.cpp	/^void EinWindow::keyPressEvent(QKeyEvent *evnt) {$/;"	f	class:EinWindow
keyPressEvent	qtgui/mainwindow.cpp	/^void MainWindow::keyPressEvent(QKeyEvent *event) {$/;"	f	class:MainWindow
keypointPeriod	config.h	/^  const int keypointPeriod = 1;$/;"	m	class:EinConfig
kn	cephes/cephes_names.h	59;"	d
kn	cephes/kn.c	/^double kn(nn, x)$/;"	f
knn_file	config.h	/^  std::string knn_file = "unspecified_kf";$/;"	m	class:EinConfig
kolmogi	cephes/cephes_names.h	95;"	d
kolmogi	cephes/kolmogorov.c	/^double kolmogi(p)$/;"	f
kolmogorov	cephes/cephes_names.h	94;"	d
kolmogorov	cephes/kolmogorov.c	/^double kolmogorov(y)$/;"	f
l2Normalize3DParzen	ein.cpp	/^void l2Normalize3DParzen(MachineState * ms) {$/;"	f
l2NormalizeFilter	ein.cpp	/^void l2NormalizeFilter(MachineState * ms) {$/;"	f
l2NormalizeParzen	ein.cpp	/^void l2NormalizeParzen(MachineState * ms) {$/;"	f
lARM	config.h	/^  int lARM = 150;$/;"	m	class:EinConfig
lGO	config.h	/^  int lGO = 60;$/;"	m	class:EinConfig
lPTthresh	config.h	/^  int lPTthresh = 3;$/;"	m	class:EinConfig
label	config.h	/^  string label;$/;"	m	struct:streamLabel
label_file	config.h	/^  std::string label_file = "unspecified_lf";$/;"	m	class:EinConfig
labeledClassIndex	config.h	/^  int labeledClassIndex;$/;"	m	struct:BoxMemory
labeled_class_index	gaussian_map.h	/^  int labeled_class_index;$/;"	m	class:SceneObject
lambda	cephes/jv.c	/^static double lambda[] = {$/;"	v	file:
laml	randomkit.h	/^    double laml;$/;"	m	struct:rk_state_
lamr	randomkit.h	/^    double lamr;$/;"	m	struct:rk_state_
lastAccelerometerCallbackReceived	config.h	/^  ros::Time lastAccelerometerCallbackReceived;$/;"	m	class:EinConfig
lastAccelerometerCallbackRequest	config.h	/^  ros::Time lastAccelerometerCallbackRequest;$/;"	m	class:EinConfig
lastArmBackButtonState	config.h	/^  int lastArmBackButtonState = 0;$/;"	m	class:EinConfig
lastArmOkButtonState	config.h	/^  int lastArmOkButtonState = 0;$/;"	m	class:EinConfig
lastArmShowButtonState	config.h	/^  int lastArmShowButtonState = 0;$/;"	m	class:EinConfig
lastCameraLogTime	config.h	/^  ros::Time lastCameraLogTime;$/;"	m	class:EinConfig
lastEndpointCallbackReceived	config.h	/^  ros::Time lastEndpointCallbackReceived;$/;"	m	class:EinConfig
lastEndpointCallbackRequest	config.h	/^  ros::Time lastEndpointCallbackRequest;$/;"	m	class:EinConfig
lastGoodEEPose	config.h	/^  eePose lastGoodEEPose;$/;"	m	class:EinConfig
lastGoodIkRequest	config.h	/^  baxter_core_msgs::SolvePositionIK lastGoodIkRequest;$/;"	m	class:EinConfig
lastGripperCallbackReceived	config.h	/^  ros::Time lastGripperCallbackReceived;$/;"	m	class:EinConfig
lastGripperCallbackRequest	config.h	/^  ros::Time lastGripperCallbackRequest;$/;"	m	class:EinConfig
lastHandEEPose	config.h	/^  eePose lastHandEEPose;$/;"	m	class:EinConfig
lastHoverRequest	config.h	/^  ros::Time lastHoverRequest;$/;"	m	class:EinConfig
lastHoverTrueEEPoseEEPose	config.h	/^  eePose lastHoverTrueEEPoseEEPose;$/;"	m	class:EinConfig
lastIkWasSuccessful	config.h	/^  bool lastIkWasSuccessful = true;$/;"	m	class:EinConfig
lastImageCallbackReceived	config.h	/^  ros::Time lastImageCallbackReceived;$/;"	m	class:EinConfig
lastImageCallbackRequest	config.h	/^  ros::Time lastImageCallbackRequest;$/;"	m	class:EinConfig
lastImageFromDensityReceived	config.h	/^  ros::Time lastImageFromDensityReceived;$/;"	m	class:EinConfig
lastImageStamp	config.h	/^  ros::Time lastImageStamp;$/;"	m	class:EinConfig
lastLabelLearned	config.h	/^  string lastLabelLearned;$/;"	m	class:EinConfig
lastLockedPose	config.h	/^  eePose lastLockedPose;$/;"	m	class:EinConfig
lastMappedTime	config.h	/^  ros::Time lastMappedTime;$/;"	m	struct:MapCell
lastMeasuredClosed	config.h	/^  double lastMeasuredClosed = 3.0;$/;"	m	class:EinConfig
lastMovementStateSet	config.h	/^  ros::Time lastMovementStateSet;$/;"	m	class:EinConfig
lastPickPose	config.h	/^  eePose lastPickPose;$/;"	m	class:EinConfig
lastPrePickPose	config.h	/^  eePose lastPrePickPose;$/;"	m	class:EinConfig
lastPtheta	config.h	/^  double lastPtheta = INFINITY;$/;"	m	class:EinConfig
lastScanStarted	config.h	/^  ros::Time lastScanStarted;$/;"	m	class:EinConfig
lastSensoryMotorUpdateTime	ein_aibo.h	/^  ros::Time lastSensoryMotorUpdateTime;$/;"	m	class:EinAiboConfig
lastShoulderState	config.h	/^  int lastShoulderState = 0;$/;"	m	class:EinConfig
lastTrueEEPoseEEPose	config.h	/^  eePose lastTrueEEPoseEEPose;$/;"	m	class:EinConfig
lastVisionCycle	config.h	/^  ros::Time lastVisionCycle;$/;"	m	class:EinConfig
last_	tokenizer.hpp	/^  bool last_;$/;"	m	class:escaped_forth_separator
last_joint_actual_effort	config.h	/^  double last_joint_actual_effort[NUM_JOINTS];$/;"	m	class:EinConfig
last_key	config.h	/^  int last_key;$/;"	m	class:EinConfig
last_key	qtgui/capturelineedit.h	/^  int last_key;$/;"	m	class:CaptureLineEdit
lastiX	config.h	/^  double lastiX = 0;$/;"	m	class:EinConfig
lastiY	config.h	/^  double lastiY = 0;$/;"	m	class:EinConfig
lbeta	cephes/beta.c	/^double lbeta(a, b)$/;"	f
lbeta	cephes/cephes_names.h	9;"	d
lbeta_asymp	cephes/beta.c	/^static double lbeta_asymp(double a, double b, int *sgn)$/;"	f	file:
lbeta_negint	cephes/beta.c	/^static double lbeta_negint(int a, double b)$/;"	f	file:
ldprec	cephes/setprec.c	/^int ldprec(void)$/;"	f
ledBFC	ein_aibo.h	/^  double ledBFC;$/;"	m	class:EinAiboIndicators
ledBFW	ein_aibo.h	/^  double ledBFW;$/;"	m	class:EinAiboIndicators
ledBMC	ein_aibo.h	/^  double ledBMC;$/;"	m	class:EinAiboIndicators
ledBMW	ein_aibo.h	/^  double ledBMW;$/;"	m	class:EinAiboIndicators
ledBRC	ein_aibo.h	/^  double ledBRC;$/;"	m	class:EinAiboIndicators
ledBRW	ein_aibo.h	/^  double ledBRW;$/;"	m	class:EinAiboIndicators
ledF1	ein_aibo.h	/^  double ledF1;$/;"	m	class:EinAiboIndicators
ledF10	ein_aibo.h	/^  double ledF10;$/;"	m	class:EinAiboIndicators
ledF11	ein_aibo.h	/^  double ledF11;$/;"	m	class:EinAiboIndicators
ledF12	ein_aibo.h	/^  double ledF12;$/;"	m	class:EinAiboIndicators
ledF13	ein_aibo.h	/^  double ledF13;$/;"	m	class:EinAiboIndicators
ledF14	ein_aibo.h	/^  double ledF14;$/;"	m	class:EinAiboIndicators
ledF2	ein_aibo.h	/^  double ledF2;$/;"	m	class:EinAiboIndicators
ledF3	ein_aibo.h	/^  double ledF3;$/;"	m	class:EinAiboIndicators
ledF4	ein_aibo.h	/^  double ledF4;$/;"	m	class:EinAiboIndicators
ledF5	ein_aibo.h	/^  double ledF5;$/;"	m	class:EinAiboIndicators
ledF6	ein_aibo.h	/^  double ledF6;$/;"	m	class:EinAiboIndicators
ledF7	ein_aibo.h	/^  double ledF7;$/;"	m	class:EinAiboIndicators
ledF8	ein_aibo.h	/^  double ledF8;$/;"	m	class:EinAiboIndicators
ledF9	ein_aibo.h	/^  double ledF9;$/;"	m	class:EinAiboIndicators
ledHC	ein_aibo.h	/^  double ledHC;$/;"	m	class:EinAiboIndicators
leftArmWidget	qtgui/mainwindow.h	/^    ArmWidget leftArmWidget;$/;"	m	class:MainWindow
leftTableZ	config.h	/^  double leftTableZ = 0.172;\/\/0.165;\/\/0.19;\/\/0.177;$/;"	m	class:EinConfig
left_arm	ein.cpp	/^MachineState * left_arm;$/;"	v
left_arm	qtgui/mainwindow.h	/^    MachineState * left_arm;$/;"	m	class:MainWindow
left_or_right_arm	config.h	/^  string left_or_right_arm = "right";$/;"	m	class:EinConfig
legLF1	ein_aibo.h	/^  double legLF1;$/;"	m	class:EinAiboJoints
legLF2	ein_aibo.h	/^  double legLF2;$/;"	m	class:EinAiboJoints
legLF3	ein_aibo.h	/^  double legLF3;$/;"	m	class:EinAiboJoints
legLH1	ein_aibo.h	/^  double legLH1;$/;"	m	class:EinAiboJoints
legLH2	ein_aibo.h	/^  double legLH2;$/;"	m	class:EinAiboJoints
legLH3	ein_aibo.h	/^  double legLH3;$/;"	m	class:EinAiboJoints
legRF1	ein_aibo.h	/^  double legRF1;$/;"	m	class:EinAiboJoints
legRF2	ein_aibo.h	/^  double legRF2;$/;"	m	class:EinAiboJoints
legRF3	ein_aibo.h	/^  double legRF3;$/;"	m	class:EinAiboJoints
legRH1	ein_aibo.h	/^  double legRH1;$/;"	m	class:EinAiboJoints
legRH2	ein_aibo.h	/^  double legRH2;$/;"	m	class:EinAiboJoints
legRH3	ein_aibo.h	/^  double legRH3;$/;"	m	class:EinAiboJoints
lgam	cephes/cephes_names.h	30;"	d
lgam	cephes/gamma.c	/^double lgam(double x)$/;"	f
loTrackbarVariable	config.h	/^  int loTrackbarVariable = 20;\/\/30;\/\/45;\/\/75;$/;"	m	class:EinConfig
loadCalibration	ein.cpp	/^void loadCalibration(MachineState * ms, string inFileName) {$/;"	f
loadFromFile	gaussian_map.cpp	/^void GaussianMap::loadFromFile(string filename) {$/;"	f	class:GaussianMap
loadFromFile	gaussian_map.cpp	/^void Scene::loadFromFile(string filename) {$/;"	f	class:Scene
loadFromFile	gaussian_map.cpp	/^void TransitionTable::loadFromFile(string filename) {$/;"	f	class:TransitionTable
loadGlobalTargetClassRangeMap	ein.cpp	/^void loadGlobalTargetClassRangeMap(MachineState * ms, double * rangeMapRegA, double * rangeMapRegB) {$/;"	f
loadLocalTargetClassRangeMap	ein.cpp	/^void loadLocalTargetClassRangeMap(MachineState * ms, double * rangeMapRegA, double * rangeMapRegB) {$/;"	f
loadMarginalGraspMemory	ein.cpp	/^void loadMarginalGraspMemory(MachineState * ms) {$/;"	f
loadMarginalHeightMemory	ein.cpp	/^void loadMarginalHeightMemory(MachineState * ms) {$/;"	f
loadPPM	opencl/oclNbody/src/shrUtils.cpp	/^shrBOOL loadPPM(const char* file, unsigned char** data, $/;"	f
loadPriorGraspMemory	ein.cpp	/^void loadPriorGraspMemory(MachineState * ms, priorType prior) {$/;"	f
loadPriorHeightMemory	ein.cpp	/^void loadPriorHeightMemory(MachineState * ms, priorType prior) {$/;"	f
loadROSParamsFromArgs	ein.cpp	/^void loadROSParamsFromArgs(MachineState * ms) {$/;"	f
loadSampledGraspMemory	ein.cpp	/^void loadSampledGraspMemory(MachineState * ms) {$/;"	f
loadSampledHeightMemory	ein.cpp	/^void loadSampledHeightMemory(MachineState * ms) {$/;"	f
loaded	config.h	/^  int loaded;$/;"	m	struct:streamImage
localMaxGG	config.h	/^  int localMaxGG = 0;$/;"	m	class:EinConfig
localMaxX	config.h	/^  int localMaxX = 0;$/;"	m	class:EinConfig
localMaxY	config.h	/^  int localMaxY = 0;$/;"	m	class:EinConfig
lockStatus	config.h	/^  memoryLockType lockStatus;$/;"	m	struct:BoxMemory
lockedPose	config.h	/^  eePose lockedPose;$/;"	m	struct:BoxMemory
log1p	cephes/cephes_names.h	86;"	d
log1p	cephes/unity.c	/^double log1p(double x)$/;"	f
log_ndtr	cephes/ndtr.c	/^double log_ndtr(double a)$/;"	f
loggam	distributions.c	/^static double loggam(double x)$/;"	f	file:
loglikelihood_score	gaussian_map.h	/^  double loglikelihood_score;$/;"	m	struct:SceneObjectScore
loglikelihood_valid	gaussian_map.h	/^  bool loglikelihood_valid;$/;"	m	struct:SceneObjectScore
lossth	cephes/sindg.c	/^static double lossth = 1.0e14;$/;"	v	file:
lossth	cephes/sindg.c	/^static double lossth = 8.0e14;$/;"	v	file:
lossth	cephes/tandg.c	/^static double lossth = 1.0e14;$/;"	v	file:
lossth	cephes/tandg.c	/^static double lossth = 8.0e14;$/;"	v	file:
m	randomkit.h	/^    long m;$/;"	m	struct:rk_state_
m_XQ	config.h	/^  double m_XQ[3] = {0,0,0};$/;"	m	class:EinConfig
m_YQ	config.h	/^  double m_YQ[3] = {0,0,0};$/;"	m	class:EinConfig
m_bDouble	opencl/oclNbody/inc/oclBodySystemOpencl.h	/^		bool m_bDouble;$/;"	m	class:BodySystemOpenCL
m_bInitialized	opencl/oclNbody/inc/oclBodySystem.h	/^        bool m_bInitialized;$/;"	m	class:BodySystem
m_bUsePBO	opencl/oclNbody/inc/oclBodySystemOpencl.h	/^        bool m_bUsePBO;$/;"	m	class:BodySystemOpenCL
m_clusterScale	opencl/oclNbody/src/oclNbody.cpp	/^    float m_clusterScale;$/;"	m	struct:NBodyParams	file:
m_current	opencl/oclNbody/inc/param.h	/^          std::vector<ParamBase *>::const_iterator m_current;$/;"	m	class:ParamList
m_currentRead	opencl/oclNbody/inc/oclBodySystemCpu.h	/^            unsigned int m_currentRead;$/;"	m	class:BodySystemCPU
m_currentRead	opencl/oclNbody/inc/oclBodySystemOpencl.h	/^        unsigned int m_currentRead;$/;"	m	class:BodySystemOpenCL
m_currentWrite	opencl/oclNbody/inc/oclBodySystemCpu.h	/^            unsigned int m_currentWrite;$/;"	m	class:BodySystemCPU
m_currentWrite	opencl/oclNbody/inc/oclBodySystemOpencl.h	/^        unsigned int m_currentWrite;$/;"	m	class:BodySystemOpenCL
m_dPos	opencl/oclNbody/inc/oclBodySystemOpencl.h	/^        cl_mem m_dPos[2];$/;"	m	class:BodySystemOpenCL
m_dVel	opencl/oclNbody/inc/oclBodySystemOpencl.h	/^        cl_mem m_dVel[2];$/;"	m	class:BodySystemOpenCL
m_damping	opencl/oclNbody/inc/oclBodySystemCpu.h	/^            float m_damping;$/;"	m	class:BodySystemCPU
m_damping	opencl/oclNbody/inc/oclBodySystemOpencl.h	/^        float m_damping;$/;"	m	class:BodySystemOpenCL
m_damping	opencl/oclNbody/src/oclNbody.cpp	/^    float m_damping;$/;"	m	struct:NBodyParams	file:
m_default	opencl/oclNbody/inc/param.h	/^          T m_default, m_min, m_max;$/;"	m	class:Param
m_force	opencl/oclNbody/inc/oclBodySystemCpu.h	/^            float* m_force;$/;"	m	class:BodySystemCPU
m_hPos	opencl/oclNbody/inc/oclBodySystemOpencl.h	/^        float* m_hPos;$/;"	m	class:BodySystemOpenCL
m_hVel	opencl/oclNbody/inc/oclBodySystemOpencl.h	/^        float* m_hVel;$/;"	m	class:BodySystemOpenCL
m_map	opencl/oclNbody/inc/param.h	/^          std::map<std::string, ParamBase *> m_map;$/;"	m	class:ParamList
m_max	opencl/oclNbody/inc/param.h	/^          T m_default, m_min, m_max;$/;"	m	class:Param
m_min	opencl/oclNbody/inc/param.h	/^          T m_default, m_min, m_max;$/;"	m	class:Param
m_name	opencl/oclNbody/inc/param.h	/^          std::string m_name;$/;"	m	class:ParamBase
m_numBodies	opencl/oclNbody/inc/oclBodySystem.h	/^        int m_numBodies;$/;"	m	class:BodySystem
m_numParticles	opencl/oclNbody/inc/oclRenderParticles.h	/^            int m_numParticles;$/;"	m	class:ParticleRenderer
m_p	opencl/oclNbody/inc/oclBodySystemOpencl.h	/^        unsigned int m_p;$/;"	m	class:BodySystemOpenCL
m_params	opencl/oclNbody/inc/param.h	/^          std::vector<ParamBase *> m_params;$/;"	m	class:ParamList
m_pbo	opencl/oclNbody/inc/oclRenderParticles.h	/^            size_t m_pbo;$/;"	m	class:ParticleRenderer
m_pboCL	opencl/oclNbody/inc/oclBodySystemOpencl.h	/^        cl_mem       m_pboCL[2];$/;"	m	class:BodySystemOpenCL
m_pboGL	opencl/oclNbody/inc/oclBodySystemOpencl.h	/^        unsigned int m_pboGL[2];$/;"	m	class:BodySystemOpenCL
m_pixelShader	opencl/oclNbody/inc/oclRenderParticles.h	/^            unsigned int m_pixelShader;$/;"	m	class:ParticleRenderer
m_pointSize	opencl/oclNbody/inc/oclRenderParticles.h	/^            float m_pointSize;$/;"	m	class:ParticleRenderer
m_pointSize	opencl/oclNbody/src/oclNbody.cpp	/^    float m_pointSize;$/;"	m	struct:NBodyParams	file:
m_pos	opencl/oclNbody/inc/oclBodySystemCpu.h	/^            float* m_pos[2];$/;"	m	class:BodySystemCPU
m_pos	opencl/oclNbody/inc/oclRenderParticles.h	/^            float *m_pos;$/;"	m	class:ParticleRenderer
m_program	opencl/oclNbody/inc/oclRenderParticles.h	/^            unsigned int m_program;$/;"	m	class:ParticleRenderer
m_ptr	opencl/oclNbody/inc/param.h	/^          T *m_ptr;   \/\/ pointer to value declared elsewhere$/;"	m	class:Param
m_q	opencl/oclNbody/inc/oclBodySystemOpencl.h	/^        unsigned int m_q;$/;"	m	class:BodySystemOpenCL
m_softening	opencl/oclNbody/src/oclNbody.cpp	/^    float m_softening;$/;"	m	struct:NBodyParams	file:
m_softeningSq	opencl/oclNbody/inc/oclBodySystemOpencl.h	/^        float m_softeningSq;$/;"	m	class:BodySystemOpenCL
m_softeningSquared	opencl/oclNbody/inc/oclBodySystemCpu.h	/^            float m_softeningSquared;$/;"	m	class:BodySystemCPU
m_spriteSize	opencl/oclNbody/inc/oclRenderParticles.h	/^            float m_spriteSize;$/;"	m	class:ParticleRenderer
m_step	opencl/oclNbody/inc/param.h	/^          T m_step;$/;"	m	class:Param
m_texture	opencl/oclNbody/inc/oclRenderParticles.h	/^            unsigned int m_texture;$/;"	m	class:ParticleRenderer
m_timestep	opencl/oclNbody/src/oclNbody.cpp	/^    float m_timestep;$/;"	m	struct:NBodyParams	file:
m_value	opencl/oclNbody/inc/param.h	/^          T m_value;$/;"	m	class:Param
m_vboColor	opencl/oclNbody/inc/oclRenderParticles.h	/^            unsigned int m_vboColor;$/;"	m	class:ParticleRenderer
m_vel	opencl/oclNbody/inc/oclBodySystemCpu.h	/^            float* m_vel[2];$/;"	m	class:BodySystemCPU
m_velocityScale	opencl/oclNbody/src/oclNbody.cpp	/^    float m_velocityScale;$/;"	m	struct:NBodyParams	file:
m_vertexShader	opencl/oclNbody/inc/oclRenderParticles.h	/^            unsigned int m_vertexShader;$/;"	m	class:ParticleRenderer
m_x	config.h	/^  double m_x = 1.08;$/;"	m	class:EinConfig
m_x	opencl/oclNbody/src/oclNbody.cpp	/^    float m_x, m_y, m_z;$/;"	m	struct:NBodyParams	file:
m_x_h	config.h	/^  double m_x_h[4];$/;"	m	class:EinConfig
m_y	config.h	/^  double m_y = 0.94;$/;"	m	class:EinConfig
m_y	opencl/oclNbody/src/oclNbody.cpp	/^    float m_x, m_y, m_z;$/;"	m	struct:NBodyParams	file:
m_y_h	config.h	/^  double m_y_h[4];$/;"	m	class:EinConfig
m_z	opencl/oclNbody/src/oclNbody.cpp	/^    float m_x, m_y, m_z;$/;"	m	struct:NBodyParams	file:
machineStates	ein.cpp	/^vector< MachineState * > machineStates;$/;"	v
main	ein.cpp	/^int main(int argc, char **argv) {$/;"	f
main	ikfast/baxter_left_arm_ikfast_solver.cpp	/^int main(int argc, char** argv)$/;"	f
main	ikfast/baxter_right_arm_ikfast_solver.cpp	/^int main(int argc, char** argv)$/;"	f
main	opencl/oclNbody/src/oclNbodyMain.cpp	/^int main(int argc, char** argv)  {$/;"	f
main	qtgui/main.cpp	/^int main(int argc, char *argv[])$/;"	f
main	repl.cpp	/^int main(int argc, char **argv) {$/;"	f
major_end	slu/math2d.h	/^  gsl_vector * major_end;$/;"	m	struct:axes
major_st	slu/math2d.h	/^  gsl_vector * major_st;$/;"	m	struct:axes
makeCurrentOpenGlContext	qtgui/window_QT.cpp	/^void DefaultEinViewPort::makeCurrentOpenGlContext()$/;"	f	class:DefaultEinViewPort
makeCurrentOpenGlContext	qtgui/window_QT.cpp	/^void OpenGlEinViewPort::makeCurrentOpenGlContext()$/;"	f	class:OpenGlEinViewPort
makeGCrop	ein.cpp	/^Mat makeGCrop(MachineState * ms, int etaX, int etaY) {$/;"	f
mapAutoPick	config.h	/^  bool mapAutoPick = false;$/;"	m	class:EinConfig
mapBackgroundBufferMeters	config.h	/^  double mapBackgroundBufferMeters = 1.0;$/;"	m	class:EinConfig
mapBackgroundImage	config.h	/^  Mat mapBackgroundImage;$/;"	m	class:EinConfig
mapBackgroundViewWindow	config.h	/^  EinWindow * mapBackgroundViewWindow;$/;"	m	class:EinConfig
mapBackgroundXMax	config.h	/^  double mapBackgroundXMax;$/;"	m	class:EinConfig
mapBackgroundXMin	config.h	/^  double mapBackgroundXMin;$/;"	m	class:EinConfig
mapBackgroundYMax	config.h	/^  double mapBackgroundYMax;$/;"	m	class:EinConfig
mapBackgroundYMin	config.h	/^  double mapBackgroundYMin;$/;"	m	class:EinConfig
mapBlueBox	ein.cpp	/^void mapBlueBox(MachineState * ms, cv::Point tbTop, cv::Point tbBot, int detectedClass, ros::Time timeToMark) {$/;"	f
mapBlueBoxCooldown	config.h	/^  double mapBlueBoxCooldown = 180; \/\/ cooldown is a temporal skirt$/;"	m	class:EinConfig
mapBlueBoxPixelSkirt	config.h	/^  int mapBlueBoxPixelSkirt = 50;$/;"	m	class:EinConfig
mapBox	ein.cpp	/^void mapBox(MachineState * ms, BoxMemory boxMemory) {$/;"	f
mapCellToPolygon	ein.cpp	/^gsl_matrix * mapCellToPolygon(MachineState * ms, int map_i, int map_j) {$/;"	f
mapFreeSpacePixelSkirt	config.h	/^  int mapFreeSpacePixelSkirt = 25;$/;"	m	class:EinConfig
mapGrayBoxPixelSkirtCols	config.h	/^  int mapGrayBoxPixelSkirtCols = 110;$/;"	m	class:EinConfig
mapGrayBoxPixelSkirtRows	config.h	/^  int mapGrayBoxPixelSkirtRows = 60;$/;"	m	class:EinConfig
mapGrayBoxPixelWaistCols	config.h	/^  int mapGrayBoxPixelWaistCols = 0;$/;"	m	class:EinConfig
mapGrayBoxPixelWaistRows	config.h	/^  int mapGrayBoxPixelWaistRows = 0;$/;"	m	class:EinConfig
mapHeight	config.h	/^  const static int mapHeight = (mapYMax - mapYMin) \/ mapStep;$/;"	m	class:EinConfig
mapPixelToWorld	ein.cpp	/^void mapPixelToWorld(Mat mapImage, double xMin, double xMax, double yMin, double yMax, int px, int py, double &x, double &y) {$/;"	f
mapRejectFenceXMax	config.h	/^  double mapRejectFenceXMax;$/;"	m	class:EinConfig
mapRejectFenceXMin	config.h	/^  double mapRejectFenceXMin;$/;"	m	class:EinConfig
mapRejectFenceYMax	config.h	/^  double mapRejectFenceYMax;$/;"	m	class:EinConfig
mapRejectFenceYMin	config.h	/^  double mapRejectFenceYMin;$/;"	m	class:EinConfig
mapSearchFenceXMax	config.h	/^  double mapSearchFenceXMax;$/;"	m	class:EinConfig
mapSearchFenceXMin	config.h	/^  double mapSearchFenceXMin;$/;"	m	class:EinConfig
mapSearchFenceYMax	config.h	/^  double mapSearchFenceYMax;$/;"	m	class:EinConfig
mapSearchFenceYMin	config.h	/^  double mapSearchFenceYMin;$/;"	m	class:EinConfig
mapServoMode	config.h	/^} mapServoMode;$/;"	t	typeref:enum:__anon25
mapStep	config.h	/^  constexpr static double mapStep = 0.01;$/;"	m	class:EinConfig
mapWidth	config.h	/^  const static int mapWidth = (mapXMax - mapXMin) \/ mapStep;$/;"	m	class:EinConfig
mapXMax	config.h	/^  constexpr static double mapXMax = 0.9375;$/;"	m	class:EinConfig
mapXMin	config.h	/^  constexpr static double mapXMin = -0.9375;$/;"	m	class:EinConfig
mapYMax	config.h	/^  constexpr static double mapYMax = 1.5;$/;"	m	class:EinConfig
mapYMin	config.h	/^  constexpr static double mapYMin = -1.5;$/;"	m	class:EinConfig
mapijToxy	ein.cpp	/^void mapijToxy(double xmin, double ymin, double mapStep, int i, int j, double * x, double * y) $/;"	f
mappingHeightIdx	config.h	/^  const int mappingHeightIdx = 1;$/;"	m	class:EinConfig
mappingServoTimeout	config.h	/^  int mappingServoTimeout = 5;$/;"	m	class:EinConfig
mapxyToij	ein.cpp	/^void mapxyToij(double xmin, double ymin, double mapStep, double x, double y, int * i, int * j) $/;"	f
markCellAsInteresting	ein.cpp	/^void markCellAsInteresting(MachineState * ms, int i, int j) {$/;"	f
markCellAsNotInteresting	ein.cpp	/^void markCellAsNotInteresting(MachineState * ms, int i, int j) {$/;"	f
markMapAsCompleted	ein.cpp	/^void markMapAsCompleted(MachineState * ms) {$/;"	f
markers_blue_memory	config.h	/^  ros::Publisher markers_blue_memory;$/;"	m	class:EinConfig
mask_gripper	config.h	/^  int mask_gripper = 1;$/;"	m	class:EinConfig
mask_gripper_blocks	config.h	/^  int mask_gripper_blocks = 0;$/;"	m	class:EinConfig
masterSprites	config.h	/^  vector<Sprite> masterSprites;$/;"	m	class:EinConfig
matcher	config.h	/^  DescriptorMatcher *matcher = NULL;$/;"	m	class:EinConfig
math2d_angle	slu/math2d.cpp	/^double math2d_angle(gsl_vector * vector)$/;"	f
math2d_angle_between_points	slu/math2d.cpp	/^double math2d_angle_between_points(gsl_vector * p1, $/;"	f
math2d_angle_between_segments	slu/math2d.cpp	/^double math2d_angle_between_segments(gsl_vector * s1_start, gsl_vector * s1_end,$/;"	f
math2d_angle_to_octant	slu/math2d.cpp	/^int math2d_angle_to_octant(double theta) $/;"	f
math2d_angle_to_quadrant	slu/math2d.cpp	/^int math2d_angle_to_quadrant(double theta) $/;"	f
math2d_area	slu/math2d.cpp	/^double math2d_area(gsl_matrix * polygon)$/;"	f
math2d_axes_free	slu/math2d.cpp	/^void math2d_axes_free(struct axes in) $/;"	f
math2d_bbox	slu/math2d.cpp	/^gsl_vector* math2d_bbox(gsl_matrix* pts_xy){$/;"	f
math2d_bbox_area	slu/math2d.cpp	/^double math2d_bbox_area(gsl_vector* bbox)$/;"	f
math2d_bbox_to_polygon	slu/math2d.cpp	/^gsl_matrix * math2d_bbox_to_polygon(gsl_vector * bbox)$/;"	f
math2d_between	slu/math2d.cpp	/^bool math2d_between(const double bound1, const double bound2, const double d){$/;"	f
math2d_center_of_mass	slu/math2d.cpp	/^gsl_vector * math2d_center_of_mass(gsl_matrix * points)$/;"	f
math2d_centroid	slu/math2d.cpp	/^gsl_vector * math2d_centroid(gsl_matrix * polygon)$/;"	f
math2d_closest_point_on_line	slu/math2d.cpp	/^gsl_vector* math2d_closest_point_on_line(gsl_matrix* l_xy, gsl_vector* p_xy) \/\/ DANGER$/;"	f
math2d_closest_point_on_polygon	slu/math2d.cpp	/^gsl_vector* math2d_closest_point_on_polygon(gsl_matrix* polygon_xy, gsl_vector* p_xy)$/;"	f
math2d_closest_point_on_segment	slu/math2d.cpp	/^gsl_vector* math2d_closest_point_on_segment(gsl_vector* seg_st_xy, $/;"	f
math2d_closest_point_on_segment_line	slu/math2d.cpp	/^gsl_vector* math2d_closest_point_on_segment_line(gsl_vector* seg_st_xy, $/;"	f
math2d_cmp	slu/math2d.cpp	/^int math2d_cmp(double v1, double v2) $/;"	f
math2d_cmp_points	slu/math2d.cpp	/^int math2d_cmp_points(const gsl_vector * p1, const gsl_vector * p2)$/;"	f
math2d_combined_matrix	slu/math2d.cpp	/^gsl_matrix* math2d_combined_matrix(gsl_matrix* figure, gsl_matrix* ground){$/;"	f
math2d_compute_axes	slu/math2d.cpp	/^struct axes math2d_compute_axes(gsl_matrix* ground_xy, gsl_matrix* figure_xy){$/;"	f
math2d_compute_boundary_line	slu/math2d.cpp	/^gsl_matrix* math2d_compute_boundary_line(gsl_matrix* landmark_xy, gsl_matrix* figure_xy) $/;"	f
math2d_copy_point_list_up_to	slu/math2d.cpp	/^gsl_matrix * math2d_copy_point_list_up_to(gsl_matrix * source, int copy_to_idx) $/;"	f
math2d_dist	slu/math2d.h	/^inline double math2d_dist(gsl_vector* pt1, gsl_vector* pt2)$/;"	f
math2d_dist_along_line	slu/math2d.cpp	/^double math2d_dist_along_line(gsl_matrix * l_xy, gsl_vector * p_xy)$/;"	f
math2d_dist_along_segment	slu/math2d.cpp	/^double math2d_dist_along_segment(gsl_vector * seg_st_xy, gsl_vector * seg_end_xy, gsl_vector * pt) $/;"	f
math2d_dist_between_points_along_line	slu/math2d.cpp	/^double math2d_dist_between_points_along_line(gsl_matrix * line, gsl_vector * p1, gsl_vector * p2)$/;"	f
math2d_dist_between_points_along_polygon	slu/math2d.cpp	/^double math2d_dist_between_points_along_polygon(gsl_matrix * polygon, gsl_vector * p1, gsl_vector * p2)$/;"	f
math2d_double_equal	slu/math2d.cpp	/^bool math2d_double_equal(double p1, double p2){$/;"	f
math2d_eigen_axes	slu/math2d.cpp	/^struct axes math2d_eigen_axes(gsl_matrix * polygon)$/;"	f
math2d_eigenvectors	slu/math2d.cpp	/^struct eigenstuff math2d_eigenvectors(gsl_matrix * polygon)$/;"	f
math2d_empty_axes	slu/math2d.cpp	/^struct axes math2d_empty_axes() $/;"	f
math2d_equal_threshold	slu/math2d.cpp	/^double math2d_equal_threshold = 0.0001;$/;"	v
math2d_fit_line	slu/math2d.cpp	/^struct fit_line_result math2d_fit_line(gsl_matrix * points)$/;"	f
math2d_free_eigenstuff	slu/math2d.cpp	/^void math2d_free_eigenstuff(struct eigenstuff in) $/;"	f
math2d_get_scale	slu/math2d.cpp	/^double math2d_get_scale(gsl_vector* bbox){$/;"	f
math2d_height_in_direction	slu/math2d.cpp	/^double math2d_height_in_direction(gsl_vector * point, $/;"	f
math2d_highest_point	slu/math2d.cpp	/^gsl_vector * math2d_highest_point(gsl_matrix * points, $/;"	f
math2d_intersect_line_segment_line	slu/math2d.cpp	/^gsl_vector* math2d_intersect_line_segment_line(gsl_vector* pt1_seg, gsl_vector* pt2_seg, double m, double b){$/;"	f
math2d_intersect_lines	slu/math2d.cpp	/^gsl_matrix * math2d_intersect_lines(gsl_matrix * line1_xy, gsl_matrix * line2_xy)$/;"	f
math2d_intersect_polygon_line	slu/math2d.cpp	/^gsl_matrix * math2d_intersect_polygon_line(gsl_matrix * polygon_xy, gsl_matrix * line_xy)$/;"	f
math2d_intersect_polygon_line_analytic	slu/math2d.cpp	/^gsl_matrix* math2d_intersect_polygon_line_analytic(gsl_matrix* polygon, double m, double b) {$/;"	f
math2d_intersect_polygon_polygon	slu/math2d.cpp	/^gsl_matrix* math2d_intersect_polygon_polygon(gsl_matrix* polygon1_xy, gsl_matrix* polygon2_xy){$/;"	f
math2d_intersect_segments	slu/math2d.cpp	/^gsl_vector* math2d_intersect_segments(gsl_vector* pt1_seg1, gsl_vector* pt2_seg1, $/;"	f
math2d_is_degenerate	slu/math2d.cpp	/^bool math2d_is_degenerate(gsl_vector * s1_start, gsl_vector * s1_end)$/;"	f
math2d_is_interior_point	slu/math2d.cpp	/^bool math2d_is_interior_point(gsl_vector* pt, gsl_matrix* polygon_xy){$/;"	f
math2d_is_on_line	slu/math2d.cpp	/^bool math2d_is_on_line(gsl_matrix* line_xy, $/;"	f
math2d_is_on_polygon	slu/math2d.cpp	/^bool math2d_is_on_polygon(gsl_matrix* line_xy, $/;"	f
math2d_is_on_segment	slu/math2d.cpp	/^bool math2d_is_on_segment(gsl_vector* seg_st_xy, $/;"	f
math2d_is_vertical	slu/math2d.cpp	/^bool math2d_is_vertical(gsl_vector * s1_start, gsl_vector * s1_end)$/;"	f
math2d_is_visible	slu/math2d.cpp	/^bool math2d_is_visible(gsl_matrix * polygon, gsl_vector * p1, gsl_vector * p2)$/;"	f
math2d_line_equation	slu/math2d.cpp	/^gsl_vector* math2d_line_equation(gsl_vector* pt1, gsl_vector* pt2){$/;"	f
math2d_line_length	slu/math2d.cpp	/^double math2d_line_length(gsl_matrix * line_xy) $/;"	f
math2d_lowest_point	slu/math2d.cpp	/^gsl_vector * math2d_lowest_point(gsl_matrix * points, $/;"	f
math2d_matrix_copy	slu/math2d.cpp	/^gsl_matrix * math2d_matrix_copy(gsl_matrix * source)$/;"	f
math2d_midpoint_segment	slu/math2d.cpp	/^gsl_vector * math2d_midpoint_segment(gsl_vector * p1, gsl_vector * p2)$/;"	f
math2d_overlaps	slu/math2d.cpp	/^bool math2d_overlaps(gsl_matrix * polygon1, gsl_matrix * polygon2)$/;"	f
math2d_perimeter	slu/math2d.cpp	/^double math2d_perimeter(gsl_matrix * polygon_xy)$/;"	f
math2d_perpendicular_segment	slu/math2d.cpp	/^gsl_matrix* math2d_perpendicular_segment(gsl_vector* seg_st, gsl_vector* seg_end, gsl_vector* start_point){$/;"	f
math2d_point	slu/math2d.cpp	/^gsl_vector * math2d_point(double x, double y)$/;"	f
math2d_point_equal	slu/math2d.cpp	/^bool math2d_point_equal(gsl_vector* p1, gsl_vector* p2){$/;"	f
math2d_point_length	slu/math2d.cpp	/^double math2d_point_length(gsl_vector * point) $/;"	f
math2d_point_list_append	slu/math2d.cpp	/^gsl_matrix * math2d_point_list_append(gsl_matrix * l1, gsl_matrix * l2)$/;"	f
math2d_point_on_segment	slu/math2d.cpp	/^void math2d_point_on_segment(gsl_vector * seg_st_xy, gsl_vector * seg_end_xy, double distance, $/;"	f
math2d_points_printf	slu/math2d.cpp	/^void math2d_points_printf(gsl_matrix * points) $/;"	f
math2d_polygon_to_line	slu/math2d.cpp	/^gsl_matrix * math2d_polygon_to_line(gsl_matrix * polygon) $/;"	f
math2d_range	slu/math2d.h	/^struct math2d_range {$/;"	s
math2d_range_overlaps	slu/math2d.cpp	/^bool math2d_range_overlaps(double r1_s, double r1_e, double r2_s, double r2_e) $/;"	f
math2d_rotate	slu/math2d.cpp	/^gsl_vector * math2d_rotate(gsl_vector * vector,$/;"	f
math2d_set_point	slu/math2d.cpp	/^void math2d_set_point(gsl_vector * ret, double x, double y)$/;"	f
math2d_signed_area	slu/math2d.cpp	/^double math2d_signed_area(gsl_matrix * polygon)$/;"	f
math2d_slope	slu/math2d.cpp	/^double math2d_slope(gsl_vector* seg_st_xy, gsl_vector* seg_end_xy){$/;"	f
math2d_smallest_window	slu/math2d.cpp	/^struct math2d_range math2d_smallest_window(gsl_vector * lst, int window_size)$/;"	f
math2d_sort_points	slu/math2d.cpp	/^gsl_matrix * math2d_sort_points(gsl_matrix * points)$/;"	f
math2d_square_dist	slu/math2d.h	/^inline double math2d_square_dist(gsl_vector* pt1, gsl_vector* pt2)$/;"	f
math2d_step_along_line	slu/math2d.cpp	/^gsl_matrix * math2d_step_along_line(gsl_matrix * line_xy, double step_size) $/;"	f
math2d_step_along_polygon	slu/math2d.cpp	/^gsl_matrix * math2d_step_along_polygon(gsl_matrix * polygon, double step_size) $/;"	f
math2d_top	slu/math2d.cpp	/^gsl_matrix * math2d_top(gsl_matrix * polygon, gsl_vector * direction_xy)$/;"	f
math2d_trim_line	slu/math2d.cpp	/^gsl_matrix * math2d_trim_line(gsl_matrix * line_xy, gsl_vector * p1, gsl_vector * p2) $/;"	f
math2d_trim_polygon	slu/math2d.cpp	/^gsl_matrix* math2d_trim_polygon(gsl_matrix * polygon, gsl_vector * p1, gsl_vector * p2) $/;"	f
math2d_vector_copy	slu/math2d.cpp	/^gsl_vector * math2d_vector_copy(gsl_vector * source)$/;"	f
math2d_vector_printf	slu/math2d.cpp	/^void math2d_vector_printf(gsl_vector * points) $/;"	f
math2d_vector_sum	slu/math2d.cpp	/^double math2d_vector_sum(gsl_vector* vec, int start_idx, int end_idx)$/;"	f
math2d_vector_to_unit_vector	slu/math2d.cpp	/^gsl_vector * math2d_vector_to_unit_vector(gsl_vector * direction_xy)$/;"	f
math3d_compress	slu/math3d.cpp	/^gsl_matrix * math3d_compress(gsl_vector * timestamps,$/;"	f
math3d_dist	slu/math3d.cpp	/^double math3d_dist(gsl_vector* pt1, gsl_vector * pt2)$/;"	f
math3d_higher_than	slu/math3d.cpp	/^bool math3d_higher_than(math3d_prism_t p1, math3d_prism_t p2) $/;"	f
math3d_intersect_line_plane	slu/math3d.cpp	/^gsl_vector * math3d_intersect_line_plane(gsl_matrix * line_xyz, $/;"	f
math3d_intersect_prisms	slu/math3d.cpp	/^bool math3d_intersect_prisms(math3d_prism_t p1, math3d_prism_t p2)$/;"	f
math3d_point	slu/math3d.cpp	/^gsl_vector * math3d_point(double x, double y, double z)$/;"	f
math3d_prism_free	slu/math3d.cpp	/^void math3d_prism_free(math3d_prism_t p)$/;"	f
math3d_prism_init	slu/math3d.cpp	/^math3d_prism_t math3d_prism_init()$/;"	f
math3d_prism_t	slu/math3d.h	/^} math3d_prism_t;$/;"	t	typeref:struct:__anon7
math3d_set_point	slu/math3d.cpp	/^void math3d_set_point(gsl_vector * ret, double x, double y, double z)$/;"	f
math3d_square_dist	slu/math3d.cpp	/^double math3d_square_dist(gsl_vector* pt1, gsl_vector * pt2) $/;"	f
math3d_starts_higher_than	slu/math3d.cpp	/^bool math3d_starts_higher_than(math3d_prism_t p1, math3d_prism_t p2) $/;"	f
math3d_supports	slu/math3d.cpp	/^bool math3d_supports(math3d_prism_t p1, math3d_prism_t p2)$/;"	f
matrixWorld_inv	qtgui/window_QT.h	/^    QTransform matrixWorld_inv;$/;"	m	class:DefaultEinViewPort
max	distributions.c	50;"	d	file:
maxD	config.h	/^  double maxD = 0;$/;"	m	class:EinConfig
maxDensity	config.h	/^  double maxDensity = 0;$/;"	m	class:EinConfig
maxGG	config.h	/^  int maxGG = 0;$/;"	m	class:EinConfig
maxHeight	config.h	/^  constexpr static double maxHeight = 0.655;\/\/0.49;\/\/0.3;$/;"	m	class:EinConfig
maxX	config.h	/^  int maxX = 0;$/;"	m	class:EinConfig
maxY	config.h	/^  int maxY = 0;$/;"	m	class:EinConfig
maxsolutions	ikfast/ikfast.h	/^    unsigned char maxsolutions; \/\/\/< max possible indices, 0 if controlled by free index or a free joint itself$/;"	m	class:ikfast::IkSingleDOFSolutionBase
mbiHeight	config.h	/^  int mbiHeight = 2000;$/;"	m	class:EinConfig
mbiWidth	config.h	/^  int mbiWidth = 2000;$/;"	m	class:EinConfig
meanView	qtgui/gaussianmapwidget.h	/^    DefaultEinViewPort meanView;$/;"	m	class:GaussianMapWidget
measureDiscrepancy	gaussian_map.cpp	/^void Scene::measureDiscrepancy() {$/;"	f	class:Scene
measureScoreRegion	gaussian_map.cpp	/^double Scene::measureScoreRegion(int _x1, int _y1, int _x2, int _y2) {$/;"	f	class:Scene
measureTimePeriod	config.h	/^  double measureTimePeriod = 1.0;$/;"	m	class:EinConfig
measureTimeStart	config.h	/^  ros::Time measureTimeStart;$/;"	m	class:EinConfig
measureTimeTarget	config.h	/^  ros::Time measureTimeTarget;$/;"	m	class:EinConfig
memoriesForClass	ein.cpp	/^vector<BoxMemory> memoriesForClass(MachineState * ms, int classIdx) {$/;"	f
memoriesForClass	ein.cpp	/^vector<BoxMemory> memoriesForClass(MachineState * ms, int classIdx, int * memoryIdxOfFirst) {$/;"	f
memoryLockType	config.h	/^} memoryLockType;$/;"	t	typeref:enum:__anon33
menu	qtgui/windowmanager.h	/^  QMenu * menu;$/;"	m	class:WindowManager
merror	cephes/mtherr.c	/^int merror = 0;$/;"	v
metersToCell	gaussian_map.cpp	/^void GaussianMap::metersToCell(double xm, double ym, double * xc, double * yc) {$/;"	f	class:GaussianMap
metersToCell	gaussian_map.cpp	/^void GaussianMap::metersToCell(double xm, double ym, int * xc, int * yc) {$/;"	f	class:GaussianMap
metersToCell	gaussian_map.cpp	/^void Scene::metersToCell(double xm, double ym, double * xc, double * yc) {$/;"	f	class:Scene
metersToCell	gaussian_map.cpp	/^void Scene::metersToCell(double xm, double ym, int * xc, int * yc) {$/;"	f	class:Scene
min	distributions.c	49;"	d	file:
min	opencl/oclNbody/src/oclNbody.cpp	36;"	d	file:
minHeight	config.h	/^  constexpr static double minHeight = 0.255;\/\/0.09;\/\/-0.10;$/;"	m	class:EinConfig
minor_end	slu/math2d.h	/^  gsl_vector * minor_end;$/;"	m	struct:axes
minor_st	slu/math2d.h	/^  gsl_vector * minor_st;$/;"	m	struct:axes
minusP	eePose.cpp	/^_eePose _eePose::minusP(const Vector3d& a) const {$/;"	f	class:_eePose
minusP	eePose.cpp	/^_eePose _eePose::minusP(const _eePose& a) const {$/;"	f	class:_eePose
mmmpy	cephes/mmmpy.c	/^void mmmpy(r, c, A, B, Y)$/;"	f
modeB	ein_aibo.h	/^  double modeB;$/;"	m	class:EinAiboIndicators
modeG	ein_aibo.h	/^  double modeG;$/;"	m	class:EinAiboIndicators
modeR	ein_aibo.h	/^  double modeR;$/;"	m	class:EinAiboIndicators
mostRecentUntabledZ	config.h	/^  double mostRecentUntabledZ = 0.0;$/;"	m	class:EinConfig
mostRecentUntabledZDecay	config.h	/^  double mostRecentUntabledZDecay = 0.97;$/;"	m	class:EinConfig
mostRecentUntabledZLastValue	config.h	/^  double mostRecentUntabledZLastValue = INFINITY;$/;"	m	class:EinConfig
mostRecentUntabledZWait	config.h	/^  double mostRecentUntabledZWait = 2.0;$/;"	m	class:EinConfig
mouseCallback	qtgui/window_QT.h	/^    EinMouseCallback mouseCallback;$/;"	m	class:OpenGlEinViewPort
mouseCoordinate	qtgui/window_QT.h	/^    QPoint mouseCoordinate;$/;"	m	class:DefaultEinViewPort
mouseData	qtgui/window_QT.h	/^    void* mouseData;$/;"	m	class:OpenGlEinViewPort
mouseDoubleClickEvent	qtgui/window_QT.cpp	/^void DefaultEinViewPort::mouseDoubleClickEvent(QMouseEvent* evnt)$/;"	f	class:DefaultEinViewPort
mouseDoubleClickEvent	qtgui/window_QT.cpp	/^void OpenGlEinViewPort::mouseDoubleClickEvent(QMouseEvent* evnt)$/;"	f	class:OpenGlEinViewPort
mouseMoveEvent	qtgui/window_QT.cpp	/^void DefaultEinViewPort::mouseMoveEvent(QMouseEvent* evnt)$/;"	f	class:DefaultEinViewPort
mouseMoveEvent	qtgui/window_QT.cpp	/^void OpenGlEinViewPort::mouseMoveEvent(QMouseEvent* evnt)$/;"	f	class:OpenGlEinViewPort
mousePressEvent	qtgui/window_QT.cpp	/^void DefaultEinViewPort::mousePressEvent(QMouseEvent* evnt)$/;"	f	class:DefaultEinViewPort
mousePressEvent	qtgui/window_QT.cpp	/^void OpenGlEinViewPort::mousePressEvent(QMouseEvent* evnt)$/;"	f	class:OpenGlEinViewPort
mouseReleaseEvent	qtgui/window_QT.cpp	/^void DefaultEinViewPort::mouseReleaseEvent(QMouseEvent* evnt)$/;"	f	class:DefaultEinViewPort
mouseReleaseEvent	qtgui/window_QT.cpp	/^void OpenGlEinViewPort::mouseReleaseEvent(QMouseEvent* evnt)$/;"	f	class:OpenGlEinViewPort
mouse_dbclick	qtgui/window_QT.h	/^enum type_mouse_event { mouse_up = 0, mouse_down = 1, mouse_dbclick = 2, mouse_move = 3 };$/;"	e	enum:type_mouse_event
mouse_down	qtgui/window_QT.h	/^enum type_mouse_event { mouse_up = 0, mouse_down = 1, mouse_dbclick = 2, mouse_move = 3 };$/;"	e	enum:type_mouse_event
mouse_move	qtgui/window_QT.h	/^enum type_mouse_event { mouse_up = 0, mouse_down = 1, mouse_dbclick = 2, mouse_move = 3 };$/;"	e	enum:type_mouse_event
mouse_up	qtgui/window_QT.h	/^enum type_mouse_event { mouse_up = 0, mouse_down = 1, mouse_dbclick = 2, mouse_move = 3 };$/;"	e	enum:type_mouse_event
mouth	ein_aibo.h	/^  double mouth;$/;"	m	class:EinAiboJoints
moveCurrentGripperRayToCameraVanishingRay	ein.cpp	/^void moveCurrentGripperRayToCameraVanishingRay(MachineState * ms) {$/;"	f
moveEndEffectorCommandCallback	ein.cpp	/^void MachineState::moveEndEffectorCommandCallback(const geometry_msgs::Pose& msg) {$/;"	f	class:MachineState
moveEndEffectorCommandCallbackSub	config.h	/^  ros::Subscriber moveEndEffectorCommandCallbackSub;$/;"	m	class:EinConfig
moveSpeedPub	config.h	/^  ros::Publisher moveSpeedPub;$/;"	m	class:EinConfig
moveView	qtgui/window_QT.cpp	/^void DefaultEinViewPort::moveView(QPointF delta)$/;"	f	class:DefaultEinViewPort
movementState	config.h	/^} movementState;$/;"	t	typeref:enum:__anon11
movingThreshold	config.h	/^  double movingThreshold = 0.02;$/;"	m	class:EinConfig
ms	config.h	/^  MachineState * ms;$/;"	m	class:MachineState
ms	gaussian_map.h	/^  MachineState * ms;$/;"	m	class:GaussianMap
ms	gaussian_map.h	/^  MachineState * ms;$/;"	m	class:Scene
ms	qtgui/armwidget.h	/^    MachineState * ms;$/;"	m	class:ArmWidget
ms	qtgui/einwindow.h	/^    MachineState * ms;$/;"	m	class:EinWindow
ms	qtgui/gaussianmapwidget.h	/^    shared_ptr<MachineState> ms;$/;"	m	class:GaussianMapWidget
ms	qtgui/wordaction.h	/^  MachineState * ms;$/;"	m	class:WordAction
mtherr	cephes/mtherr.c	/^int mtherr(char *name, int code)$/;"	f
mtransp	cephes/mtransp.c	/^void mtransp(n, A, T)$/;"	f
mu	cephes/jv.c	/^static double mu[] = {$/;"	v	file:
mu	gaussian_map.h	/^  double mu;$/;"	m	struct:_GaussianMapChannel
multP	eePose.cpp	/^_eePose _eePose::multP(const double& a) const {$/;"	f	class:_eePose
multQ	eePose.cpp	/^_eePose _eePose::multQ(const _eePose& a) const {$/;"	f	class:_eePose
multS	gaussian_map.cpp	/^void GaussianMap::multS(double scalar) {$/;"	f	class:GaussianMap
multS	gaussian_map.cpp	/^void _GaussianMapCell::multS(double scalar) {$/;"	f	class:_GaussianMapCell
multS	gaussian_map.cpp	/^void _GaussianMapChannel::multS(double scalar) {$/;"	f	class:_GaussianMapChannel
mvmpy	cephes/mvmpy.c	/^void mvmpy(int r, int c, double *A, double *V, double *Y)$/;"	f
myImage	qtgui/einwindow.h	/^    Mat myImage;$/;"	m	class:EinWindow
myMap	qtgui/gaussianmapwidget.h	/^    shared_ptr<GaussianMap> myMap;$/;"	m	class:GaussianMapWidget
myView	qtgui/einwindow.h	/^    DefaultEinViewPort myView;$/;"	m	class:EinWindow
n	repl.cpp	/^  int n;$/;"	m	class:Integer	file:
n	word.h	/^  double n;$/;"	m	class:DoubleWord
n	word.h	/^  int n;$/;"	m	class:IntegerWord
name	cephes/rgamma.c	/^static char name[] = "rgamma";$/;"	v	file:
name	config.h	/^  string name; \/\/ unique identifier$/;"	m	struct:Sprite
name	word.cpp	/^string CompoundWord::name() {$/;"	f	class:CompoundWord
name	word.h	/^  string name() {$/;"	f	class:AiboPoseWord
name	word.h	/^  string name() {$/;"	f	class:ArmPoseWord
name	word.h	/^  string name() {$/;"	f	class:CommentWord
name	word.h	/^  string name() {$/;"	f	class:DoubleWord
name	word.h	/^  string name() {$/;"	f	class:EePoseWord
name	word.h	/^  string name() {$/;"	f	class:IntegerWord
name	word.h	/^  string name() {$/;"	f	class:StringWord
name	word.h	/^  string name() {$/;"	f	class:SymbolWord
nameToWord	word.cpp	/^std::shared_ptr<Word> nameToWord(string name) {$/;"	f
name_to_word	word.cpp	/^std::map<string, std::shared_ptr<Word> > name_to_word;$/;"	v
names	ein_misc.cpp	/^virtual vector<string> names() {$/;"	f	namespace:ein_words
names	word.h	/^  virtual vector<string> names() {$/;"	f	class:Word
nbChannelOriginImage	qtgui/window_QT.h	/^    int nbChannelOriginImage;$/;"	m	class:DefaultEinViewPort
nbdtr	cephes/cephes_names.h	61;"	d
nbdtr	cephes/nbdtr.c	/^double nbdtr(k, n, p)$/;"	f
nbdtrc	cephes/cephes_names.h	60;"	d
nbdtrc	cephes/nbdtr.c	/^double nbdtrc(k, n, p)$/;"	f
nbdtri	cephes/cephes_names.h	62;"	d
nbdtri	cephes/nbdtr.c	/^double nbdtri(k, n, p)$/;"	f
nbody	opencl/oclNbody/src/oclNbody.cpp	/^BodySystem *nbody         = 0;$/;"	v
nbodyGPU	opencl/oclNbody/src/oclNbody.cpp	/^BodySystemOpenCL *nbodyGPU = 0;$/;"	v
ndtr	cephes/cephes_names.h	63;"	d
ndtr	cephes/ndtr.c	/^double ndtr(double a)$/;"	f
ndtri	cephes/cephes_names.h	66;"	d
ndtri	cephes/ndtri.c	/^double ndtri(y0)$/;"	f
neck	ein_aibo.h	/^  double neck;$/;"	m	class:EinAiboJoints
need_i	cephes/scipy_iv.c	/^    need_i = 0x1,$/;"	e	enum:__anon39	file:
need_k	cephes/scipy_iv.c	/^    need_k = 0x2$/;"	e	enum:__anon39	file:
negativeP	eePose.cpp	/^_eePose _eePose::negativeP() const {$/;"	f	class:_eePose
negativeQ	eePose.cpp	/^_eePose _eePose::negativeQ() const {$/;"	f	class:_eePose
neutral	ein.cpp	/^void neutral(MachineState * ms) {$/;"	f
newObservation	gaussian_map.cpp	/^void _GaussianMapCell::newObservation(const Vec3b & obs) {$/;"	f	class:_GaussianMapCell
newObservation	gaussian_map.cpp	/^void _GaussianMapCell::newObservation(const Vec3b & obs, double zobs) {$/;"	f	class:_GaussianMapCell
newObservation	gaussian_map.cpp	/^void _GaussianMapCell::newObservation(const Vec3d & obs) {$/;"	f	class:_GaussianMapCell
newObservation	gaussian_map.cpp	/^void _GaussianMapCell::newObservation(const Vec3d & obs, double zobs) {$/;"	f	class:_GaussianMapCell
newObservation	gaussian_map.cpp	/^void _GaussianMapCell::newObservation(uchar r, uchar g, uchar b) {$/;"	f	class:_GaussianMapCell
newObservation	gaussian_map.cpp	/^void _GaussianMapCell::newObservation(uchar r, uchar g, uchar b, double zobs) {$/;"	f	class:_GaussianMapCell
new_px	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
new_px	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
new_py	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
new_py	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
new_pz	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
new_pz	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
new_r00	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
new_r00	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
new_r01	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
new_r01	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
new_r02	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
new_r02	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
new_r10	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
new_r10	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
new_r11	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
new_r11	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
new_r12	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
new_r12	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
new_r20	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
new_r20	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
new_r21	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
new_r21	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
new_r22	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
new_r22	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
noMT_kernel	opencl/oclNbody/inc/oclBodySystemOpencl.h	/^        cl_kernel noMT_kernel;$/;"	m	class:BodySystemOpenCL
nodPub	config.h	/^  ros::Publisher nodPub;$/;"	m	class:EinConfig
nodeInit	ein.cpp	/^void nodeInit(MachineState * ms) {$/;"	f
noisyOrDiscrepancy	gaussian_map.cpp	/^double _GaussianMapCell::noisyOrDiscrepancy(_GaussianMapCell * other, double * rterm_out, double * gterm_out, double * bterm_out) {$/;"	f	class:_GaussianMapCell
normal_pdf	gaussian_map.cpp	/^double normal_pdf(double mu, double sigma, double x) {$/;"	f
normalize	opencl/oclNbody/src/oclBodySystemCpu.cpp	/^float normalize(float3& vector)$/;"	f
normalizeDiscrepancy	gaussian_map.cpp	/^double _GaussianMapCell::normalizeDiscrepancy(double rlikelihood,  double glikelihood, double blikelihood) {$/;"	f	class:_GaussianMapCell
normalizeForCrossCorrelation	ein.cpp	/^void normalizeForCrossCorrelation(MachineState * ms, Mat input, Mat& output) {$/;"	f
npx	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
npx	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
npy	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
npy	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
npy_isfinite	cephes/mconf.h	79;"	d
npy_isinf	cephes/mconf.h	80;"	d
npy_isnan	cephes/mconf.h	78;"	d
npz	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
npz	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
nsave	randomkit.h	/^    long nsave;$/;"	m	struct:rk_state_
numBodies	opencl/oclNbody/src/oclNbody.cpp	/^int numBodies = 7680;               \/\/ default # of bodies in sim (can be overridden by command line switch --n=<N>)$/;"	v
numCReticleIndeces	config.h	/^  const static int numCReticleIndeces = 14;$/;"	m	class:EinConfig
numClasses	config.h	/^  int numClasses = 0;$/;"	m	class:EinConfig
numCollisions	config.h	/^  int numCollisions() {$/;"	f	class:EinConfig
numCornellTables	config.h	/^  int numCornellTables = 10;$/;"	m	class:EinConfig
numDemos	opencl/oclNbody/src/oclNbody.cpp	/^int numDemos = sizeof(demoParams) \/ sizeof(NBodyParams);$/;"	v
numIkMapHeights	config.h	/^  const static int numIkMapHeights = 10;$/;"	m	class:EinConfig
numberOfEqualCharacters	gaussian_map.cpp	/^int numberOfEqualCharacters(string first, string second) {$/;"	f	namespace:ein_words
objectInHandLabel	config.h	/^  int objectInHandLabel = -1;$/;"	m	class:EinConfig
objectMap	config.h	/^  MapCell objectMap[mapWidth * mapHeight];$/;"	m	class:EinConfig
objectMapCallbackFunc	ein.cpp	/^void objectMapCallbackFunc(int event, int x, int y, int flags, void* userdata) {$/;"	f
objectMapView	qtgui/mainwindow.h	/^    DefaultEinViewPort objectMapView;$/;"	m	class:MainWindow
objectMapViewerImage	config.h	/^  Mat objectMapViewerImage;$/;"	m	class:EinConfig
objectMapViewerWindow	config.h	/^  EinWindow * objectMapViewerWindow;$/;"	m	class:EinConfig
objectViewerGrayBlur	config.h	/^  Mat objectViewerGrayBlur;$/;"	m	class:EinConfig
objectViewerImage	config.h	/^  Mat objectViewerImage;$/;"	m	class:EinConfig
objectViewerWindow	config.h	/^  EinWindow * objectViewerWindow;$/;"	m	class:EinConfig
objectViewerYCbCrBlur	config.h	/^  Mat objectViewerYCbCrBlur;$/;"	m	class:EinConfig
object_label	gaussian_map.h	/^  string object_label;$/;"	m	class:SceneObject
observedCameraExposure	config.h	/^  int observedCameraExposure = -1;$/;"	m	class:EinConfig
observedCameraFlip	config.h	/^  bool observedCameraFlip;$/;"	m	class:EinConfig
observedCameraGain	config.h	/^  int observedCameraGain = -1;$/;"	m	class:EinConfig
observedCameraMirror	config.h	/^  bool observedCameraMirror;$/;"	m	class:EinConfig
observedCameraWhiteBalanceBlue	config.h	/^  int observedCameraWhiteBalanceBlue = -1;$/;"	m	class:EinConfig
observedCameraWhiteBalanceGreen	config.h	/^  int observedCameraWhiteBalanceGreen = -1;$/;"	m	class:EinConfig
observedCameraWhiteBalanceRed	config.h	/^  int observedCameraWhiteBalanceRed = -1;$/;"	m	class:EinConfig
observedCameraWindowX	config.h	/^  int observedCameraWindowX = -1;$/;"	m	class:EinConfig
observedCameraWindowY	config.h	/^  int observedCameraWindowY = -1;$/;"	m	class:EinConfig
observedStdDevWindow	config.h	/^  EinWindow * observedStdDevWindow;$/;"	m	class:EinConfig
observedWindow	config.h	/^  EinWindow * observedWindow;$/;"	m	class:EinConfig
observed_map	gaussian_map.h	/^  shared_ptr<GaussianMap> observed_map;$/;"	m	class:Scene
oclCheckError	opencl/oclNbody/inc/oclUtils.h	64;"	d
oclCheckErrorEX	opencl/oclNbody/inc/oclUtils.h	60;"	d
oclDeleteMemObjs	opencl/oclNbody/src/oclUtils.cpp	/^void oclDeleteMemObjs(cl_mem* cmMemObjs, int iNumObjs)$/;"	f
oclErrorString	opencl/oclNbody/src/oclUtils.cpp	/^const char* oclErrorString(cl_int error)$/;"	f
oclGetDev	opencl/oclNbody/src/oclUtils.cpp	/^cl_device_id oclGetDev(cl_context cxGPUContext, unsigned int nr)$/;"	f
oclGetDevCap	opencl/oclNbody/src/oclUtils.cpp	/^int oclGetDevCap(cl_device_id device)$/;"	f
oclGetFirstDev	opencl/oclNbody/src/oclUtils.cpp	/^cl_device_id oclGetFirstDev(cl_context cxGPUContext)$/;"	f
oclGetMaxFlopsDev	opencl/oclNbody/src/oclUtils.cpp	/^cl_device_id oclGetMaxFlopsDev(cl_context cxGPUContext)$/;"	f
oclGetPlatformID	opencl/oclNbody/src/oclUtils.cpp	/^cl_int oclGetPlatformID(cl_platform_id* clSelectedPlatformID)$/;"	f
oclGetProgBinary	opencl/oclNbody/src/oclUtils.cpp	/^void oclGetProgBinary( cl_program cpProgram, cl_device_id cdDevice, char** binary, size_t* length)$/;"	f
oclImageFormatString	opencl/oclNbody/src/oclUtils.cpp	/^const char* oclImageFormatString(cl_uint uiImageFormat)$/;"	f
oclLoadProgSource	opencl/oclNbody/src/oclUtils.cpp	/^char* oclLoadProgSource(const char* cFilename, const char* cPreamble, size_t* szFinalLength)$/;"	f
oclLogBuildInfo	opencl/oclNbody/src/oclUtils.cpp	/^void oclLogBuildInfo(cl_program cpProgram, cl_device_id cdDevice)$/;"	f
oclLogPtx	opencl/oclNbody/src/oclUtils.cpp	/^void oclLogPtx(cl_program cpProgram, cl_device_id cdDevice, const char* cPtxFileName)$/;"	f
oclPrintDevInfo	opencl/oclNbody/src/oclUtils.cpp	/^void oclPrintDevInfo(int iLogMode, cl_device_id device)$/;"	f
oclPrintDevName	opencl/oclNbody/src/oclUtils.cpp	/^void oclPrintDevName(int iLogMode, cl_device_id device)$/;"	f
offX	config.h	/^  double offX = 0;$/;"	m	class:EinConfig
offY	config.h	/^  double offY = 0;$/;"	m	class:EinConfig
on_mouse	qtgui/window_QT.h	/^    EinMouseCallback on_mouse;$/;"	m	class:DefaultEinViewPort
on_mouse_param	qtgui/window_QT.h	/^    void* on_mouse_param;$/;"	m	class:DefaultEinViewPort
oneTable	config.h	/^  double oneTable = 0.175;$/;"	m	class:EinConfig
onef2	cephes/cephes_names.h	37;"	d
onef2	cephes/struve.c	/^double onef2(a, b, c, x, err)$/;"	f
opencvError	ein.cpp	/^int opencvError (int status, const char *func_name, const char *err_msg, const char *file_name, int line, void *userdata) {$/;"	f
operationStatusToString	ein_util.cpp	/^std::string operationStatusToString(operationStatusType mode) $/;"	f
operationStatusType	config.h	/^} operationStatusType;$/;"	t	typeref:enum:__anon22
operator ()	tokenizer.hpp	/^    bool operator()(Char c) {$/;"	f	struct:escaped_forth_separator::char_eq
operator ()	tokenizer.hpp	/^  bool operator()(InputIterator& next,InputIterator end,Token& tok) {$/;"	f	class:escaped_forth_separator
operator <<	config.cpp	/^ostream & operator<<(ostream & os, const Grasp& toPrint)$/;"	f
operator <<	eePose.cpp	/^ostream & operator<<(ostream & os, const _armPose& toPrint)$/;"	f
operator <<	eePose.cpp	/^ostream & operator<<(ostream & os, const _eePose& toPrint)$/;"	f
orient_i	gaussian_map.h	/^  int orient_i;$/;"	m	struct:SceneObjectScore
orientationCascade	config.h	/^  int orientationCascade = 0;$/;"	m	class:EinConfig
orientationCascadeHalfWidth	config.h	/^  int orientationCascadeHalfWidth = 2;$/;"	m	class:EinConfig
orientedFilterType	ein_util.h	/^} orientedFilterType;$/;"	t	typeref:enum:__anon41
origin	slu/math2d.cpp	/^gsl_vector * origin = math2d_point(0, 0);$/;"	v
originalMapBackgroundImage	config.h	/^  Mat originalMapBackgroundImage;$/;"	m	class:EinConfig
oscAmpX	config.h	/^  double oscAmpX = 0.10;\/\/.0.16;\/\/0.08;\/\/0.1;$/;"	m	class:EinConfig
oscAmpY	config.h	/^  double oscAmpY = 0.10;\/\/0.16;\/\/0.2;$/;"	m	class:EinConfig
oscAmpZ	config.h	/^  double oscAmpZ = 0.0;$/;"	m	class:EinConfig
oscCenX	config.h	/^  double oscCenX = 0.0;$/;"	m	class:EinConfig
oscCenY	config.h	/^  double oscCenY = 0.0;$/;"	m	class:EinConfig
oscCenZ	config.h	/^  double oscCenZ = 0.0;$/;"	m	class:EinConfig
oscFreqX	config.h	/^  double oscFreqX = commonFreq*1.0\/3.0;$/;"	m	class:EinConfig
oscFreqY	config.h	/^  double oscFreqY = commonFreq*1.0\/20.0;$/;"	m	class:EinConfig
oscFreqZ	config.h	/^  double oscFreqZ = commonFreq*1.0;$/;"	m	class:EinConfig
oscilStart	config.h	/^  ros::Time oscilStart;$/;"	m	class:EinConfig
other_arm	config.h	/^  string other_arm = "left";$/;"	m	class:EinConfig
ox	opencl/oclNbody/src/oclNbody.cpp	/^int ox = 0, oy = 0;$/;"	v
oy	opencl/oclNbody/src/oclNbody.cpp	/^int ox = 0, oy = 0;$/;"	v
p1	randomkit.h	/^    double p1;$/;"	m	struct:rk_state_
p1evl	cephes/polevl.c	/^double p1evl(x, coef, N)$/;"	f
p2	randomkit.h	/^    double p2;$/;"	m	struct:rk_state_
p3	randomkit.h	/^    double p3;$/;"	m	struct:rk_state_
p4	randomkit.h	/^    double p4;$/;"	m	struct:rk_state_
pArgc	opencl/oclNbody/src/oclNbody.cpp	/^int *pArgc = NULL;$/;"	v
pArgv	opencl/oclNbody/src/oclNbody.cpp	/^char **pArgv = NULL;$/;"	v
pBoxIndicator	config.h	/^  double *pBoxIndicator = NULL;$/;"	m	class:EinConfig
pCleanup	opencl/ein_opencl.cpp	/^void (*pCleanup)(int) = &Cleanup;$/;"	v
pCleanup	opencl/oclNbody/src/oclNbody.cpp	/^void (*pCleanup)(int) = &Cleanup;$/;"	v
pa	gaussian_map.h	/^  eePose pa;$/;"	m	class:OrientedRay
pack	config.h	/^  std::vector<EinAiboConfig> pack;$/;"	m	class:MachineState
paintEEPoseOnWrist	ein.cpp	/^void paintEEPoseOnWrist(MachineState * ms, eePose toPaint, cv::Scalar theColor) {$/;"	f
paintEEandReg1OnWrist	config.h	/^  int paintEEandReg1OnWrist = 1;$/;"	m	class:EinConfig
paintEvent	qtgui/window_QT.cpp	/^void DefaultEinViewPort::paintEvent(QPaintEvent* evnt)$/;"	f	class:DefaultEinViewPort
paintGL	qtgui/window_QT.cpp	/^void OpenGlEinViewPort::paintGL()$/;"	f	class:OpenGlEinViewPort
pantryTableZ	config.h	/^  double pantryTableZ = oneTable;\/\/0.165;\/\/0.19;\/\/0.18;\/\/0.209123; \/\/0.195;$/;"	m	class:EinConfig
param_keepRatio	qtgui/window_QT.h	/^    int param_keepRatio;$/;"	m	class:DefaultEinViewPort
param_matrixWorld	qtgui/window_QT.h	/^    QTransform param_matrixWorld;$/;"	m	class:DefaultEinViewPort
paramlist	opencl/oclNbody/src/oclNbody.cpp	/^ParamListGL *paramlist;      \/\/ parameter list$/;"	v
parse	repl.cpp	/^  static Integer * parse(string token) {$/;"	f	class:Integer
parse	repl.cpp	/^  static Minus * parse(string token) {$/;"	f	class:Minus
parse	repl.cpp	/^  static Plus * parse(string token) {$/;"	f	class:Plus
parse	repl.cpp	/^ToyWord * parse(string token) {$/;"	f
parse	word.cpp	/^std::shared_ptr<CommentWord> CommentWord::parse(string token)  {$/;"	f	class:CommentWord
parse	word.cpp	/^std::shared_ptr<DoubleWord> DoubleWord::parse(string token) {$/;"	f	class:DoubleWord
parse	word.cpp	/^std::shared_ptr<IntegerWord> IntegerWord::parse(string token) {$/;"	f	class:IntegerWord
parse	word.h	/^  static std::shared_ptr<AiboPoseWord> parse(string token) {$/;"	f	class:AiboPoseWord
parse	word.h	/^  static std::shared_ptr<ArmPoseWord> parse(string token) {$/;"	f	class:ArmPoseWord
parse	word.h	/^  static std::shared_ptr<EePoseWord> parse(string token) {$/;"	f	class:EePoseWord
parse	word.h	/^  static std::shared_ptr<StringWord> parse(string token) {$/;"	f	class:StringWord
parse	word.h	/^  static std::shared_ptr<SymbolWord> parse(string token) {$/;"	f	class:SymbolWord
parseToken	word.cpp	/^std::shared_ptr<Word> parseToken(MachineState * ms, string token) {$/;"	f
parzen3DKernel	config.h	/^  double parzen3DKernel[parzen3DKernelWidth*parzen3DKernelWidth*parzen3DKernelWidth];$/;"	m	class:EinConfig
parzen3DKernelHalfWidth	config.h	/^  const static int parzen3DKernelHalfWidth = 9;$/;"	m	class:EinConfig
parzen3DKernelSigma	config.h	/^  double parzen3DKernelSigma = 2.0; $/;"	m	class:EinConfig
parzen3DKernelWidth	config.h	/^  const static int parzen3DKernelWidth = 2*parzen3DKernelHalfWidth+1;$/;"	m	class:EinConfig
parzenKernel	config.h	/^  double parzenKernel[parzenKernelWidth*parzenKernelWidth];$/;"	m	class:EinConfig
parzenKernelHalfWidth	config.h	/^  const static int parzenKernelHalfWidth = 15;$/;"	m	class:EinConfig
parzenKernelSigma	config.h	/^  double parzenKernelSigma = 4.0;$/;"	m	class:EinConfig
parzenKernelWidth	config.h	/^  const static int parzenKernelWidth = 2*parzenKernelHalfWidth+1;$/;"	m	class:EinConfig
pasin	cephes/polmisc.c	/^double pasin[N + 1] = {$/;"	v
patan	cephes/polmisc.c	/^double patan[N + 1] = {$/;"	v
patrolMode	config.h	/^} patrolMode;$/;"	t	typeref:enum:__anon13
patrolState	config.h	/^} patrolState;$/;"	t	typeref:enum:__anon12
pawLF	ein_aibo.h	/^  double pawLF;$/;"	m	class:EinAiboSensors
pawLH	ein_aibo.h	/^  double pawLH;$/;"	m	class:EinAiboSensors
pawRF	ein_aibo.h	/^  double pawRF;$/;"	m	class:EinAiboSensors
pawRH	ein_aibo.h	/^  double pawRH;$/;"	m	class:EinAiboSensors
pb	gaussian_map.h	/^  eePose pb;$/;"	m	class:OrientedRay
pcos	cephes/polmisc.c	/^double pcos[N + 1] = {$/;"	v
pdtr	cephes/cephes_names.h	68;"	d
pdtr	cephes/pdtr.c	/^double pdtr(k, m)$/;"	f
pdtrc	cephes/cephes_names.h	67;"	d
pdtrc	cephes/pdtr.c	/^double pdtrc(k, m)$/;"	f
pdtri	cephes/cephes_names.h	69;"	d
pdtri	cephes/pdtr.c	/^double pdtri(k, y)$/;"	f
performed_action	gaussian_map.h	/^  int performed_action;$/;"	m	class:TransitionTable
pfmAnchorPose	config.h	/^  eePose pfmAnchorPose;$/;"	m	class:EinConfig
pfmWidth	config.h	/^  constexpr static int pfmWidth = 70;$/;"	m	class:EinConfig
photoPinPose	config.h	/^  eePose photoPinPose;$/;"	m	class:EinConfig
pickEccentricity	config.h	/^  double pickEccentricity = 100.0;$/;"	m	class:EinConfig
pickFixMap	config.h	/^  double pickFixMap[pfmWidth];$/;"	m	class:EinConfig
pickFlushFactor	config.h	/^  double pickFlushFactor = 0.108;\/\/0.08;\/\/0.09;\/\/0.11;$/;"	m	class:EinConfig
pickMode	config.h	/^} pickMode;$/;"	t	typeref:enum:__anon23
pickModeToString	config.cpp	/^string pickModeToString(pickMode mode) {$/;"	f
pickObjectUnderEndEffectorCommandCallback	ein.cpp	/^void MachineState::pickObjectUnderEndEffectorCommandCallback(const std_msgs::Empty& msg) {$/;"	f	class:MachineState
pickObjectUnderEndEffectorCommandCallbackSub	config.h	/^  ros::Subscriber pickObjectUnderEndEffectorCommandCallbackSub;$/;"	m	class:EinConfig
pickedPose	config.h	/^  eePose pickedPose;$/;"	m	struct:BoxMemory
pilotCallbackFunc	ein.cpp	/^void pilotCallbackFunc(int event, int x, int y, int flags, void* userdata) {$/;"	f
pilotClosestBlueBoxNumber	config.h	/^  int pilotClosestBlueBoxNumber = -1;$/;"	m	class:EinConfig
pilotClosestTarget	config.h	/^  eePose pilotClosestTarget;$/;"	m	class:EinConfig
pilotInit	ein.cpp	/^void pilotInit(MachineState * ms) {$/;"	f
pilotTarget	config.h	/^  eePose pilotTarget;$/;"	m	class:EinConfig
pilotTargetBlueBoxNumber	config.h	/^  int pilotTargetBlueBoxNumber = -1;$/;"	m	class:EinConfig
pixelCount	config.h	/^  double pixelCount;$/;"	m	struct:MapCell
pixelServo	ein.cpp	/^void pixelServo(MachineState * ms, int servoDeltaX, int servoDeltaY, double servoDeltaTheta) {$/;"	f
pixelShader	opencl/oclNbody/src/oclRenderParticles.cpp	/^const char pixelShader[] =$/;"	v
pixelToGlobal	ein.cpp	/^void pixelToGlobal(MachineState * ms, int pX, int pY, double gZ, double * gX, double * gY) {$/;"	f
pixelToGlobal	ein.cpp	/^void pixelToGlobal(MachineState * ms, int pX, int pY, double gZ, double * gX, double * gY, eePose givenEEPose) {$/;"	f
pixelToGlobalCache	config.h	/^typedef struct pixelToGlobalCache {$/;"	s
pixelToGlobalCache	config.h	/^} pixelToGlobalCache;$/;"	t	typeref:struct:pixelToGlobalCache
pixelToGlobalEEPose	ein.cpp	/^eePose pixelToGlobalEEPose(MachineState * ms, int pX, int pY, double gZ) {$/;"	f
pixelToGlobalFromCache	ein.cpp	/^void pixelToGlobalFromCache(MachineState * ms, int pX, int pY, double * gX, double * gY, pixelToGlobalCache * cache) {$/;"	f
pixelToGlobalFromCacheBackCast	ein.cpp	/^void pixelToGlobalFromCacheBackCast(MachineState * ms, int pX, int pY, double * gX, double * gY, pixelToGlobalCache * cache) {$/;"	f
pixelToPlane	ein.cpp	/^void pixelToPlane(MachineState * ms, int pX, int pY, double gZ, double * gX, double * gY, eePose givenEEPose, eePose referenceFrame) {$/;"	f
placeMode	config.h	/^} placeMode;$/;"	t	typeref:enum:__anon14
placeObjectInEndEffectorCommandCallback	ein.cpp	/^void MachineState::placeObjectInEndEffectorCommandCallback(const std_msgs::Empty& msg) {$/;"	f	class:MachineState
placeObjectInEndEffectorCommandCallbackSub	config.h	/^  ros::Subscriber placeObjectInEndEffectorCommandCallbackSub;$/;"	m	class:EinConfig
placeTarget	config.h	/^  eePose placeTarget;$/;"	m	class:EinConfig
placementPoseHeldAboveLabel2By	ein.cpp	/^int placementPoseHeldAboveLabel2By(MachineState * ms, string label2, double zAbove, eePose * out) {$/;"	f
placementPoseLabel1AboveLabel2By	ein.cpp	/^int placementPoseLabel1AboveLabel2By(MachineState * ms, string label1, string label2, double zAbove, eePose * out) {$/;"	f
placementPoseLabel1AboveLabel2By3dFirst	ein.cpp	/^int placementPoseLabel1AboveLabel2By3dFirst(MachineState * ms, string label1, string label2, double zAbove, eePose * out) {$/;"	f
placementPoseLabel1BetweenLabel2AndLabel3	ein.cpp	/^int placementPoseLabel1BetweenLabel2AndLabel3(MachineState * ms, string label1, $/;"	f
plusP	eePose.cpp	/^_eePose _eePose::plusP(const Vector3d& a) const {$/;"	f	class:_eePose
plusP	eePose.cpp	/^_eePose _eePose::plusP(const _eePose& a) const {$/;"	f	class:_eePose
pointDiscrepancy	gaussian_map.cpp	/^double _GaussianMapCell::pointDiscrepancy(_GaussianMapCell * other, double * rterm_out, double * gterm_out, double * bterm_out) {$/;"	f	class:_GaussianMapCell
points_xy	slu/math3d.h	/^  gsl_matrix * points_xy;$/;"	m	struct:__anon7
poladd	cephes/polyn.c	/^void poladd(a, na, b, nb, c)$/;"	f
polatn	cephes/polmisc.c	/^void polatn(num, den, ans, nn)$/;"	f
polclr	cephes/polyn.c	/^void polclr(a, n)$/;"	f
polcos	cephes/polmisc.c	/^void polcos(x, y, nn)$/;"	f
poldiv	cephes/polyn.c	/^int poldiv(a, na, b, nb, c)$/;"	f
poleva	cephes/polyn.c	/^double poleva(a, na, x)$/;"	f
polevl	cephes/polevl.c	/^double polevl(x, coef, N)$/;"	f
polini	cephes/polyn.c	/^void polini(maxdeg)$/;"	f
polmov	cephes/polyn.c	/^void polmov(a, na, b)$/;"	f
polmul	cephes/polyn.c	/^void polmul(a, na, b, nb, c)$/;"	f
polprt	cephes/polyn.c	/^void polprt(a, na, d)$/;"	f
polrt	cephes/polrt.c	/^int polrt(xcof, cof, m, root)$/;"	f
polsbt	cephes/polyn.c	/^void polsbt(a, na, b, nb, c)$/;"	f
polsin	cephes/polmisc.c	/^void polsin(x, y, nn)$/;"	f
polsqt	cephes/polmisc.c	/^void polsqt(pol, ans, nn)$/;"	f
polsub	cephes/polyn.c	/^void polsub(a, na, b, nb, c)$/;"	f
pop	repl.cpp	/^ToyWord * pop() {$/;"	f
popData	word.cpp	/^shared_ptr<Word> MachineState::popData() {$/;"	f	class:MachineState
popWord	word.cpp	/^shared_ptr<Word> CompoundWord::popWord() {$/;"	f	class:CompoundWord
popWord	word.cpp	/^shared_ptr<Word> MachineState::popWord() {$/;"	f	class:MachineState
populateStreamImageBuffer	ein.cpp	/^void populateStreamImageBuffer(MachineState * ms) {$/;"	f
populateStreamJointsBuffer	ein.cpp	/^void populateStreamJointsBuffer(MachineState * ms) {$/;"	f
populateStreamLabelBuffer	ein.cpp	/^void populateStreamLabelBuffer(MachineState * ms) {$/;"	f
populateStreamPoseBuffer	ein.cpp	/^void populateStreamPoseBuffer(MachineState * ms) {$/;"	f
populateStreamRangeBuffer	ein.cpp	/^void populateStreamRangeBuffer(MachineState * ms) {$/;"	f
populateStreamWordBuffer	ein.cpp	/^void populateStreamWordBuffer(MachineState * ms) {$/;"	f
pos	randomkit.h	/^    int pos;$/;"	m	struct:rk_state_
pose	config.h	/^  eePose pose;$/;"	m	struct:Sprite
pose	word.h	/^  EinAiboJoints pose;$/;"	m	class:AiboPoseWord
pose	word.h	/^  armPose pose;$/;"	m	class:ArmPoseWord
pose	word.h	/^  eePose pose;$/;"	m	class:EePoseWord
poseVarianceOfEvaluationScenes	gaussian_map.cpp	/^vector<double> poseVarianceOfEvaluationScenes(MachineState * ms, vector<string> scene_files) {$/;"	f	namespace:ein_words
posekNNGetFeatures	ein.cpp	/^void posekNNGetFeatures(MachineState * ms, std::string classDir, const char *className, double sigma, Mat &kNNfeatures, Mat &kNNlabels,$/;"	f
positionCorners	qtgui/window_QT.h	/^    QRect  positionCorners;$/;"	m	class:DefaultEinViewPort
positionGrabbing	qtgui/window_QT.h	/^    QPointF positionGrabbing;$/;"	m	class:DefaultEinViewPort
positionIsMapped	ein.cpp	/^bool positionIsMapped(MachineState * ms, double x, double y) {$/;"	f
positionIsSearched	ein.cpp	/^bool positionIsSearched(double fenceXMin, double fenceXMax, double fenceYMin, double fenceYMax, double x, double y) {$/;"	f
postDensitySigmaTrackbarVariable	config.h	/^  int postDensitySigmaTrackbarVariable = 10.0;$/;"	m	class:EinConfig
postscene	gaussian_map.h	/^  shared_ptr<Scene> postscene;$/;"	m	class:TransitionTable
powi	cephes/powi.c	/^double powi(x, nn)$/;"	f
pp	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
pp	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
preDensity	config.h	/^  double *preDensity = NULL;$/;"	m	class:EinConfig
preFrameGraySobel	config.h	/^  Mat preFrameGraySobel;$/;"	m	class:EinConfig
predictedStdDevWindow	config.h	/^  EinWindow * predictedStdDevWindow;$/;"	m	class:EinConfig
predictedWindow	config.h	/^  EinWindow * predictedWindow;$/;"	m	class:EinConfig
predicted_class_name	gaussian_map.h	/^  string predicted_class_name;$/;"	m	class:Scene
predicted_map	gaussian_map.h	/^  shared_ptr<GaussianMap> predicted_map;$/;"	m	class:Scene
predicted_objects	gaussian_map.h	/^  vector<shared_ptr<SceneObject> > predicted_objects;$/;"	m	class:Scene
predicted_segmentation	gaussian_map.h	/^  Mat predicted_segmentation;$/;"	m	class:Scene
prepareForCrossCorrelation	ein.cpp	/^void prepareForCrossCorrelation(MachineState * ms, Mat input, Mat& output, int thisOrient, int numOrientations, double thisScale, Size toBecome) {$/;"	f
prepareGraspFilter	ein.cpp	/^void prepareGraspFilter(MachineState * ms, int i) {$/;"	f
prepareGraspFilter1	ein.cpp	/^void prepareGraspFilter1(MachineState * ms) {$/;"	f
prepareGraspFilter2	ein.cpp	/^void prepareGraspFilter2(MachineState * ms) {$/;"	f
prepareGraspFilter3	ein.cpp	/^void prepareGraspFilter3(MachineState * ms) {$/;"	f
prepareGraspFilter4	ein.cpp	/^void prepareGraspFilter4(MachineState * ms) {$/;"	f
prescene	gaussian_map.h	/^  shared_ptr<Scene> prescene;$/;"	m	class:TransitionTable
pressPose	config.h	/^  eePose pressPose;$/;"	m	class:EinConfig
pressUntilEffortStart	config.h	/^  ros::Time pressUntilEffortStart;$/;"	m	class:EinConfig
pressUntilEffortTimeout	config.h	/^  double pressUntilEffortTimeout = 30.0;$/;"	m	class:EinConfig
print	eePose.cpp	/^void _eePose::print(eePose toPrint) {$/;"	f	class:_eePose
print	opencl/oclNbody/src/oclNbody.cpp	/^    void print()$/;"	f	struct:NBodyParams
printStack	repl.cpp	/^void printStack() {$/;"	f
priorType	ein_util.h	/^} priorType;$/;"	t	typeref:enum:__anon40
probeReticle	config.h	/^  eePose probeReticle = defaultReticle;$/;"	m	class:EinConfig
processImage	ein.cpp	/^void processImage(Mat &image, Mat& gray_image, Mat& yCrCb_image, double sigma) {$/;"	f
processSaliency	ein.cpp	/^void processSaliency(Mat in, Mat out) {$/;"	f
programBuild	opencl/ein_opencl.cpp	/^void EinGpuConfig::programBuild() {$/;"	f	class:EinGpuConfig
promoteBlueBoxes	ein.cpp	/^void promoteBlueBoxes(MachineState * ms) {$/;"	f
proposeObject	gaussian_map.cpp	/^void Scene::proposeObject() {$/;"	f	class:Scene
proposeRegion	gaussian_map.cpp	/^void Scene::proposeRegion() {$/;"	f	class:Scene
psave	randomkit.h	/^    double psave;$/;"	m	struct:rk_state_
pseries	cephes/incbet.c	/^static double pseries(a, b, x)$/;"	f	file:
psi	cephes/cephes_names.h	70;"	d
psi	cephes/psi.c	/^double psi(x)$/;"	f
psin	cephes/polmisc.c	/^double psin[N + 1] = {$/;"	v
psize	cephes/polyn.c	/^static int psize = 0;$/;"	v	file:
psqrt	cephes/polmisc.c	/^double psqrt[N + 1] = {$/;"	v
pt1	cephes/polyn.c	/^static double *pt1 = 0;$/;"	v	file:
pt2	cephes/polyn.c	/^static double *pt2 = 0;$/;"	v	file:
pt3	cephes/polyn.c	/^static double *pt3 = 0;$/;"	v	file:
publishConsoleMessage	ein.cpp	/^void publishConsoleMessage(MachineState * ms, string msg) {$/;"	f
publishVolumetricMap	ein.cpp	/^void publishVolumetricMap(MachineState * ms) {$/;"	f
pursuitProximity	config.h	/^  int pursuitProximity = 5;$/;"	m	class:EinConfig
push	repl.cpp	/^void push(ToyWord * word) {$/;"	f
pushControl	word.cpp	/^bool MachineState::pushControl(int code) {$/;"	f	class:MachineState
pushControl	word.cpp	/^bool MachineState::pushControl(std::shared_ptr<Word> word) {$/;"	f	class:MachineState
pushControl	word.cpp	/^bool MachineState::pushControl(string token) {$/;"	f	class:MachineState
pushCopies	word.cpp	/^void MachineState::pushCopies(int symbol, int times) {$/;"	f	class:MachineState
pushCopies	word.cpp	/^void MachineState::pushCopies(std::shared_ptr<Word> word, int times) {$/;"	f	class:MachineState
pushCopies	word.cpp	/^void MachineState::pushCopies(string symbol, int times) {$/;"	f	class:MachineState
pushData	word.cpp	/^bool MachineState::pushData(int code) {$/;"	f	class:MachineState
pushData	word.cpp	/^bool MachineState::pushData(std::shared_ptr<Word> word) {$/;"	f	class:MachineState
pushData	word.cpp	/^bool MachineState::pushData(string token) {$/;"	f	class:MachineState
pushGridSign	ein_util.cpp	/^void pushGridSign(MachineState * ms, double speed) {$/;"	f
pushNoOps	word.cpp	/^void MachineState::pushNoOps(int n) {$/;"	f	class:MachineState
pushWord	qtgui/wordaction.cpp	/^void WordAction::pushWord() {$/;"	f	class:WordAction
pushWord	word.cpp	/^bool MachineState::pushWord(int code) {$/;"	f	class:MachineState
pushWord	word.cpp	/^bool MachineState::pushWord(std::shared_ptr<Word> word) {$/;"	f	class:MachineState
pushWord	word.cpp	/^bool MachineState::pushWord(string token) {$/;"	f	class:MachineState
pushWord	word.cpp	/^void CompoundWord::pushWord(MachineState * ms, string token)$/;"	f	class:CompoundWord
pushWord	word.h	/^  void pushWord(shared_ptr<Word> word) {$/;"	f	class:CompoundWord
px	eePose.h	/^  double px;$/;"	m	struct:_eePose
px	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
px	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
py	eePose.h	/^  double py;$/;"	m	struct:_eePose
py	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
py	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
pz	eePose.h	/^  double pz;$/;"	m	struct:_eePose
pz	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
pz	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
q	randomkit.h	/^    double q;$/;"	m	struct:rk_state_
queryIK	ein_ik.cpp	/^void queryIK(MachineState * ms, int * thisResult, baxter_core_msgs::SolvePositionIK * thisRequest) {$/;"	f
queryIKFast	ikfast/ikfast_wrapper.cpp	/^void queryIKFast(MachineState * ms, int * thisResult, baxter_core_msgs::SolvePositionIK * thisRequest) {$/;"	f	namespace:MY_NAMESPACE
queryIKFastDebug	ikfast/ikfast_wrapper.cpp	/^void queryIKFastDebug(MachineState * ms, int * thisResult, baxter_core_msgs::SolvePositionIK * thisRequest) {      $/;"	f	namespace:MY_NAMESPACE
queryIKService	ein_ik.cpp	/^void queryIKService(MachineState * ms, int * thisResult, baxter_core_msgs::SolvePositionIK * thisRequest) {$/;"	f
quote_	tokenizer.hpp	/^  string_type  quote_;$/;"	m	class:escaped_forth_separator
qw	eePose.h	/^  double qw;$/;"	m	struct:_eePose
qx	eePose.h	/^  double qx;$/;"	m	struct:_eePose
qy	eePose.h	/^  double qy;$/;"	m	struct:_eePose
qz	eePose.h	/^  double qz;$/;"	m	struct:_eePose
r	cephes/cpmul.c	/^    double r;$/;"	m	struct:__anon37	file:
r	cephes/protos.h	/^    double r;$/;"	m	struct:__anon38
r	config.h	/^  double r, g, b;$/;"	m	struct:MapCell
r	gaussian_map.h	/^  double r,g,b,a;$/;"	m	class:OrientedRay
r	randomkit.h	/^    double r;$/;"	m	struct:rk_state_
r00	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
r00	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
r01	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
r01	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
r02	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
r02	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
r10	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
r10	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
r11	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
r11	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
r12	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
r12	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
r20	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
r20	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
r21	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
r21	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
r22	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
r22	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
rARM	config.h	/^  int rARM = 150;$/;"	m	class:EinConfig
rGO	config.h	/^  int rGO = 60;$/;"	m	class:EinConfig
radian	cephes/cephes_names.h	75;"	d
radian	cephes/sindg.c	/^double radian(d, m, s)$/;"	f
random_state	config.h	/^  rk_state random_state;$/;"	m	class:EinConfig
randomizeBodies	opencl/oclNbody/src/oclBodySystemCpu.cpp	/^void randomizeBodies(NBodyConfig config, float* pos, float* vel, float* color, float clusterScale, float velocityScale, int numBodies)$/;"	f
randomizeNanos	ein.cpp	/^void randomizeNanos(MachineState * ms, ros::Time * time) {$/;"	f
range	config.h	/^  double range;$/;"	m	struct:streamRange
rangeCallback	ein.cpp	/^void MachineState::rangeCallback(const sensor_msgs::Range& range) {$/;"	f	class:MachineState
rangeHistory	config.h	/^  double rangeHistory[totalRangeHistoryLength];$/;"	m	class:EinConfig
rangeMap	config.h	/^  double rangeMap[rmWidth*rmWidth];$/;"	m	class:EinConfig
rangeMapAccumulator	config.h	/^  double rangeMapAccumulator[rmWidth*rmWidth];$/;"	m	class:EinConfig
rangeMapMass	config.h	/^  double rangeMapMass[rmWidth*rmWidth];$/;"	m	class:EinConfig
rangeMapReg1	config.h	/^  double rangeMapReg1[rmWidth*rmWidth];$/;"	m	class:EinConfig
rangeMapReg2	config.h	/^  double rangeMapReg2[rmWidth*rmWidth];$/;"	m	class:EinConfig
rangeMapReg3	config.h	/^  double rangeMapReg3[rmWidth*rmWidth];$/;"	m	class:EinConfig
rangeMapReg4	config.h	/^  double rangeMapReg4[rmWidth*rmWidth];$/;"	m	class:EinConfig
rangeMapTargetSearchPadding	config.h	/^  int rangeMapTargetSearchPadding = 3;$/;"	m	class:EinConfig
rangemapImage	config.h	/^  Mat rangemapImage;$/;"	m	class:EinConfig
rangemapWindow	config.h	/^  EinWindow * rangemapWindow;$/;"	m	class:EinConfig
rangeogramImage	config.h	/^  Mat rangeogramImage;$/;"	m	class:EinConfig
rangeogramWindow	config.h	/^  EinWindow * rangeogramWindow;$/;"	m	class:EinConfig
rargc	opencl/oclNbody/inc/cmd_arg_reader.h	/^    static  int  rargc;$/;"	m	class:CmdArgReader
rargc	opencl/oclNbody/src/cmd_arg_reader.cpp	/^\/*static*\/ int CmdArgReader::rargc;$/;"	m	class:CmdArgReader	file:
rargv	opencl/oclNbody/inc/cmd_arg_reader.h	/^    static char**  rargv;$/;"	m	class:CmdArgReader
rargv	opencl/oclNbody/src/cmd_arg_reader.cpp	/^\/*static*\/ char** CmdArgReader::rargv;$/;"	m	class:CmdArgReader	file:
ratioX	qtgui/window_QT.h	/^    float ratioX, ratioY;$/;"	m	class:DefaultEinViewPort
ratioY	qtgui/window_QT.h	/^    float ratioX, ratioY;$/;"	m	class:DefaultEinViewPort
rayBuffer	config.h	/^  vector<OrientedRay> rayBuffer;$/;"	m	class:EinConfig
rayType	gaussian_map.h	/^} rayType;$/;"	t	typeref:enum:__anon35
read	repl.cpp	/^string read() {$/;"	f
readBinaryFromYaml	ein_util.cpp	/^string readBinaryFromYaml(FileNode & fn) {$/;"	f
readBytesFromDogUntilString	ein_aibo.cpp	/^int readBytesFromDogUntilString(MachineState * ms, int member, int timeout, string toFind) {$/;"	f
readFromFileNode	config.cpp	/^void Grasp::readFromFileNode(FileNode& it) {$/;"	f	class:Grasp
readFromFileNode	eePose.cpp	/^void _eePose::readFromFileNode(FileNode& it) {$/;"	f	class:_eePose
readFromFileNode	gaussian_map.cpp	/^void GaussianMap::readFromFileNode(FileNode& it) {$/;"	f	class:GaussianMap
readFromFileNode	gaussian_map.cpp	/^void Scene::readFromFileNode(FileNode& it) {$/;"	f	class:Scene
readFromFileNode	gaussian_map.cpp	/^void SceneObject::readFromFileNode(FileNode& it) {$/;"	f	class:SceneObject
readFromFileNode	gaussian_map.cpp	/^void TransitionTable::readFromFileNode(FileNode& it) {$/;"	f	class:TransitionTable
readFromFileNode	gaussian_map.cpp	/^void _GaussianMapCell::readFromFileNode(FileNode& it) {$/;"	f	class:_GaussianMapCell
readFromFileNodeIterator	config.cpp	/^void Grasp::readFromFileNodeIterator(FileNodeIterator& it) {$/;"	f	class:Grasp
readFromFileNodeIterator	eePose.cpp	/^void _eePose::readFromFileNodeIterator(FileNodeIterator& it) {$/;"	f	class:_eePose
readFromFileNodeIterator	gaussian_map.cpp	/^void GaussianMap::readFromFileNodeIterator(FileNodeIterator& it) {$/;"	f	class:GaussianMap
readFromFileNodeIterator	gaussian_map.cpp	/^void Scene::readFromFileNodeIterator(FileNodeIterator& it) {$/;"	f	class:Scene
readFromFileNodeIterator	gaussian_map.cpp	/^void SceneObject::readFromFileNodeIterator(FileNodeIterator& it) {$/;"	f	class:SceneObject
readFromFileNodeIterator	gaussian_map.cpp	/^void TransitionTable::readFromFileNodeIterator(FileNodeIterator& it) {$/;"	f	class:TransitionTable
readFromFileNodeIterator	gaussian_map.cpp	/^void _GaussianMapCell::readFromFileNodeIterator(FileNodeIterator& it) {$/;"	f	class:_GaussianMapCell
readMatFromYaml	ein_util.cpp	/^Mat readMatFromYaml(FileNode & fs) {$/;"	f
readPredictedObjects	gaussian_map.cpp	/^void Scene::readPredictedObjects(FileNode & fn) {$/;"	f	class:Scene
readSettings	qtgui/window_QT.cpp	/^void DefaultEinViewPort::readSettings(QSettings& settings)$/;"	f	class:DefaultEinViewPort
readSettings	qtgui/window_QT.cpp	/^void OpenGlEinViewPort::readSettings(QSettings& \/*settings*\/)$/;"	f	class:OpenGlEinViewPort
readSideAndSerialFromFileStorage	ein.cpp	/^void readSideAndSerialFromFileStorage(MachineState * ms, FileStorage fsvI, string * serial, string * side) {$/;"	f
reallocate	gaussian_map.cpp	/^void GaussianMap::reallocate() {$/;"	f	class:GaussianMap
reallocate	gaussian_map.cpp	/^void Scene::reallocate() {$/;"	f	class:Scene
rec_objs_blue_memory	config.h	/^  ros::Publisher rec_objs_blue_memory;$/;"	m	class:EinConfig
recalculateMusAndSigmas	gaussian_map.cpp	/^void GaussianMap::recalculateMusAndSigmas(MachineState * ms) {$/;"	f	class:GaussianMap
recalculateMusAndSigmas	gaussian_map.cpp	/^void GaussianMapCell::recalculateMusAndSigmas(MachineState * ms) {$/;"	f	class:GaussianMapCell
recalculateMusAndSigmas	gaussian_map.cpp	/^void GaussianMapChannel::recalculateMusAndSigmas(MachineState * ms) {$/;"	f	class:GaussianMapChannel
recomputeScore	gaussian_map.cpp	/^double Scene::recomputeScore(shared_ptr<SceneObject> obj, double threshold) {$/;"	f	class:Scene
recordBlueBoxInHistogram	ein.cpp	/^void recordBlueBoxInHistogram(MachineState * ms, int idx) {$/;"	f
recordBoundingBoxFailure	ein.cpp	/^void recordBoundingBoxFailure(MachineState * ms) {$/;"	f
recordBoundingBoxSuccess	ein.cpp	/^void recordBoundingBoxSuccess(MachineState * ms) {$/;"	f
recordRangeMap	config.h	/^  int recordRangeMap = 0;$/;"	m	class:EinConfig
recordReadyRangeReadings	ein.cpp	/^void recordReadyRangeReadings(MachineState * ms) {$/;"	f
recordTransitionSceneObject	gaussian_map.cpp	/^void TransitionTable::recordTransitionSceneObject() {$/;"	f	class:TransitionTable
recur	cephes/jv.c	/^static double recur(double *n, double x, double *newn, int cancel)$/;"	f	file:
red	gaussian_map.h	/^  GaussianMapChannel red;$/;"	m	struct:_GaussianMapCell
red_halo_pub	config.h	/^  ros::Publisher red_halo_pub;$/;"	m	class:EinConfig
red_halo_state	config.h	/^  double red_halo_state = 100.0;$/;"	m	class:EinConfig
reextract_knn	config.h	/^  int reextract_knn = 0;$/;"	m	class:EinConfig
refAtCell	gaussian_map.cpp	/^GaussianMapCell *GaussianMap::refAtCell(int x, int y) {$/;"	f	class:GaussianMap
register_word	ein_words.cpp	/^int register_word(std::shared_ptr<Word> word) {$/;"	f
rejectAreaScale	config.h	/^  double rejectAreaScale = 16;\/\/6*6$/;"	m	class:EinConfig
rejectScale	config.h	/^  double rejectScale = 2.0;$/;"	m	class:EinConfig
removeObjectFromPredictedMap	gaussian_map.cpp	/^void Scene::removeObjectFromPredictedMap(shared_ptr<SceneObject> obj) {$/;"	f	class:Scene
removeSpaceObjects	gaussian_map.cpp	/^void Scene::removeSpaceObjects() {$/;"	f	class:Scene
render	qtgui/gaussianmapwidget.cpp	/^void GaussianMapWidget::render() {$/;"	f	class:GaussianMapWidget
renderAccumulatedImageAndDensity	ein.cpp	/^void renderAccumulatedImageAndDensity(MachineState * ms) {$/;"	f
renderCoreView	word.cpp	/^void renderCoreView(MachineState * ms) {$/;"	f
renderInit	config.h	/^  int renderInit = 0;$/;"	m	class:EinConfig
renderInit	ein.cpp	/^int renderInit(MachineState * ms, bool converted, const sensor_msgs::ImageConstPtr& msg) {$/;"	f
renderObjectMapView	ein.cpp	/^void renderObjectMapView(MachineState * leftArm, MachineState * rightArm) {$/;"	f
renderObjectMapViewOneArm	ein.cpp	/^void renderObjectMapViewOneArm(MachineState * ms) {$/;"	f
renderRangeogramView	ein.cpp	/^void renderRangeogramView(MachineState * ms) {$/;"	f
renderWristViewImage	ein.cpp	/^void renderWristViewImage(MachineState * ms) {$/;"	f
renderedWristViewWindow	config.h	/^  EinWindow * renderedWristViewWindow;$/;"	m	class:EinConfig
renderer	opencl/oclNbody/src/oclNbody.cpp	/^ParticleRenderer *renderer = 0;$/;"	v
repeat_halo	config.h	/^  int repeat_halo = 1;$/;"	m	class:EinConfig
replReturnPressed	qtgui/armwidget.cpp	/^void ArmWidget::replReturnPressed() {$/;"	f	class:ArmWidget
repr	word.cpp	/^string AiboPoseWord::repr() {$/;"	f	class:AiboPoseWord
repr	word.cpp	/^string ArmPoseWord::repr() {$/;"	f	class:ArmPoseWord
repr	word.cpp	/^string CompoundWord::repr()  {$/;"	f	class:CompoundWord
repr	word.cpp	/^string EePoseWord::repr() {$/;"	f	class:EePoseWord
repr	word.cpp	/^string SymbolWord::repr() {$/;"	f	class:SymbolWord
repr	word.h	/^  virtual string repr() {$/;"	f	class:Word
reprojection_buffer	config.h	/^  shared_ptr<GaussianMap> reprojection_buffer;$/;"	m	class:EinConfig
reregisterBackground	gaussian_map.cpp	/^void Scene::reregisterBackground() {$/;"	f	class:Scene
reregisterObject	gaussian_map.cpp	/^void Scene::reregisterObject(int i) {$/;"	f	class:Scene
reseedIkRequest	ein_ik.cpp	/^void reseedIkRequest(MachineState * ms, eePose *givenEEPose, baxter_core_msgs::SolvePositionIK * givenIkRequest, int it, int itMax) {$/;"	f
reset	tokenizer.hpp	/^  void reset() {last_=false;}$/;"	f	class:escaped_forth_separator
resetAccumulatedImageAndMass	ein.cpp	/^void resetAccumulatedImageAndMass(MachineState * ms) {$/;"	f
resetAccumulatedStreamImage	ein.cpp	/^void resetAccumulatedStreamImage(MachineState * ms) {$/;"	f
resetZoom	qtgui/window_QT.cpp	/^void DefaultEinViewPort::resetZoom()$/;"	f	class:DefaultEinViewPort
resizeEvent	qtgui/window_QT.cpp	/^void DefaultEinViewPort::resizeEvent(QResizeEvent* evnt)$/;"	f	class:DefaultEinViewPort
resizeGL	qtgui/window_QT.cpp	/^void OpenGlEinViewPort::resizeGL(int w, int h)$/;"	f	class:OpenGlEinViewPort
restartBBLearning	ein.cpp	/^void restartBBLearning(MachineState * ms) {$/;"	f
reticle	config.h	/^  eePose reticle = defaultReticle;$/;"	m	class:EinConfig
reticlePixelX	config.h	/^  double reticlePixelX;$/;"	m	struct:pixelToGlobalCache
reticlePixelXOffset	config.h	/^  double reticlePixelXOffset;$/;"	m	struct:pixelToGlobalCache
reticlePixelY	config.h	/^  double reticlePixelY;$/;"	m	struct:pixelToGlobalCache
reticlePixelYOffset	config.h	/^  double reticlePixelYOffset;$/;"	m	struct:pixelToGlobalCache
retrain_vocab	config.h	/^  int retrain_vocab = 0;$/;"	m	class:EinConfig
rewrite_labels	config.h	/^  int rewrite_labels = 0;$/;"	m	class:EinConfig
rgRBTimes	config.h	/^  std::vector<ros::Time> rgRBTimes;$/;"	m	class:EinConfig
rgRingBuffer	config.h	/^  std::vector<double> rgRingBuffer;$/;"	m	class:EinConfig
rgRingBufferAdvance	ein.cpp	/^void rgRingBufferAdvance(MachineState * ms) {$/;"	f
rgRingBufferEnd	config.h	/^  int rgRingBufferEnd = 0;$/;"	m	class:EinConfig
rgRingBufferSize	config.h	/^  const int rgRingBufferSize = 100;$/;"	m	class:EinConfig
rgRingBufferStart	config.h	/^  int rgRingBufferStart = 0;$/;"	m	class:EinConfig
rgamma	cephes/cephes_names.h	71;"	d
rgamma	cephes/rgamma.c	/^double rgamma(x)$/;"	f
rgbCountsToMat	gaussian_map.cpp	/^void GaussianMap::rgbCountsToMat(Mat& out) {$/;"	f	class:GaussianMap
rgbDiscrepancyMuToMat	gaussian_map.cpp	/^void GaussianMap::rgbDiscrepancyMuToMat(MachineState * ms, Mat& out) {$/;"	f	class:GaussianMap
rgbMuToMat	gaussian_map.cpp	/^void GaussianMap::rgbMuToMat(Mat& out) {$/;"	f	class:GaussianMap
rgbSigmaSquaredToMat	gaussian_map.cpp	/^void GaussianMap::rgbSigmaSquaredToMat(Mat& out) {$/;"	f	class:GaussianMap
rgbSigmaToMat	gaussian_map.cpp	/^void GaussianMap::rgbSigmaToMat(Mat& out) {$/;"	f	class:GaussianMap
rgbSquaredCountsToMat	gaussian_map.cpp	/^void GaussianMap::rgbSquaredCountsToMat(Mat& out) {$/;"	f	class:GaussianMap
rggHeight	config.h	/^  const static int rggHeight = 300*rggScale;$/;"	m	class:EinConfig
rggScale	config.h	/^  const static int rggScale = 1;  $/;"	m	class:EinConfig
rggStride	config.h	/^  const static int rggStride = 5*rggScale;$/;"	m	class:EinConfig
rggWidth	config.h	/^  const static int rggWidth = totalRangeHistoryLength*rggStride;$/;"	m	class:EinConfig
rightArmWidget	qtgui/mainwindow.h	/^    ArmWidget rightArmWidget;$/;"	m	class:MainWindow
rightTableZ	config.h	/^  double rightTableZ = 0.172;\/\/0.165;\/\/0.19;\/\/0.18;$/;"	m	class:EinConfig
right_arm	ein.cpp	/^MachineState * right_arm;$/;"	v
right_arm	qtgui/mainwindow.h	/^    MachineState * right_arm;$/;"	m	class:MainWindow
rk_altfill	randomkit.c	/^rk_altfill(void *buffer, size_t size, int strong, rk_state *state)$/;"	f
rk_beta	distributions.c	/^double rk_beta(rk_state *state, double a, double b)$/;"	f
rk_binomial	distributions.c	/^long rk_binomial(rk_state *state, long n, double p)$/;"	f
rk_binomial_btpe	distributions.c	/^long rk_binomial_btpe(rk_state *state, long n, double p)$/;"	f
rk_binomial_inversion	distributions.c	/^long rk_binomial_inversion(rk_state *state, long n, double p)$/;"	f
rk_chisquare	distributions.c	/^double rk_chisquare(rk_state *state, double df)$/;"	f
rk_devfill	randomkit.c	/^rk_devfill(void *buffer, size_t size, int strong)$/;"	f
rk_double	randomkit.c	/^rk_double(rk_state *state)$/;"	f
rk_error	randomkit.h	/^} rk_error;$/;"	t	typeref:enum:__anon6
rk_exponential	distributions.c	/^double rk_exponential(rk_state *state, double scale)$/;"	f
rk_f	distributions.c	/^double rk_f(rk_state *state, double dfnum, double dfden)$/;"	f
rk_fill	randomkit.c	/^rk_fill(void *buffer, size_t size, rk_state *state)$/;"	f
rk_gamma	distributions.c	/^double rk_gamma(rk_state *state, double shape, double scale)$/;"	f
rk_gauss	randomkit.c	/^rk_gauss(rk_state *state)$/;"	f
rk_geometric	distributions.c	/^long rk_geometric(rk_state *state, double p)$/;"	f
rk_geometric_inversion	distributions.c	/^long rk_geometric_inversion(rk_state *state, double p)$/;"	f
rk_geometric_search	distributions.c	/^long rk_geometric_search(rk_state *state, double p)$/;"	f
rk_gumbel	distributions.c	/^double rk_gumbel(rk_state *state, double loc, double scale)$/;"	f
rk_hash	randomkit.c	/^rk_hash(unsigned long key)$/;"	f
rk_hypergeometric	distributions.c	/^long rk_hypergeometric(rk_state *state, long good, long bad, long sample)$/;"	f
rk_hypergeometric_hrua	distributions.c	/^long rk_hypergeometric_hrua(rk_state *state, long good, long bad, long sample)$/;"	f
rk_hypergeometric_hyp	distributions.c	/^long rk_hypergeometric_hyp(rk_state *state, long good, long bad, long sample)$/;"	f
rk_interval	randomkit.c	/^rk_interval(unsigned long max, rk_state *state)$/;"	f
rk_laplace	distributions.c	/^double rk_laplace(rk_state *state, double loc, double scale)$/;"	f
rk_logistic	distributions.c	/^double rk_logistic(rk_state *state, double loc, double scale)$/;"	f
rk_lognormal	distributions.c	/^double rk_lognormal(rk_state *state, double mean, double sigma)$/;"	f
rk_logseries	distributions.c	/^long rk_logseries(rk_state *state, double p)$/;"	f
rk_long	randomkit.c	/^rk_long(rk_state *state)$/;"	f
rk_negative_binomial	distributions.c	/^long rk_negative_binomial(rk_state *state, double n, double p)$/;"	f
rk_noncentral_chisquare	distributions.c	/^double rk_noncentral_chisquare(rk_state *state, double df, double nonc)$/;"	f
rk_noncentral_f	distributions.c	/^double rk_noncentral_f(rk_state *state, double dfnum, double dfden, double nonc)$/;"	f
rk_normal	distributions.c	/^double rk_normal(rk_state *state, double loc, double scale)$/;"	f
rk_pareto	distributions.c	/^double rk_pareto(rk_state *state, double a)$/;"	f
rk_poisson	distributions.c	/^long rk_poisson(rk_state *state, double lam)$/;"	f
rk_poisson_mult	distributions.c	/^long rk_poisson_mult(rk_state *state, double lam)$/;"	f
rk_poisson_ptrs	distributions.c	/^long rk_poisson_ptrs(rk_state *state, double lam)$/;"	f
rk_power	distributions.c	/^double rk_power(rk_state *state, double a)$/;"	f
rk_random	randomkit.c	/^rk_random(rk_state *state)$/;"	f
rk_randomseed	randomkit.c	/^rk_randomseed(rk_state *state)$/;"	f
rk_rayleigh	distributions.c	/^double rk_rayleigh(rk_state *state, double mode)$/;"	f
rk_seed	randomkit.c	/^rk_seed(unsigned long seed, rk_state *state)$/;"	f
rk_standard_cauchy	distributions.c	/^double rk_standard_cauchy(rk_state *state)$/;"	f
rk_standard_exponential	distributions.c	/^double rk_standard_exponential(rk_state *state)$/;"	f
rk_standard_gamma	distributions.c	/^double rk_standard_gamma(rk_state *state, double shape)$/;"	f
rk_standard_t	distributions.c	/^double rk_standard_t(rk_state *state, double df)$/;"	f
rk_state	randomkit.h	/^rk_state;$/;"	t	typeref:struct:rk_state_
rk_state_	randomkit.h	/^typedef struct rk_state_$/;"	s
rk_strerror	randomkit.c	/^char *rk_strerror[RK_ERR_MAX] =$/;"	v
rk_triangular	distributions.c	/^double rk_triangular(rk_state *state, double left, double mode, double right)$/;"	f
rk_ulong	randomkit.c	/^rk_ulong(rk_state *state)$/;"	f
rk_uniform	distributions.c	/^double rk_uniform(rk_state *state, double loc, double scale)$/;"	f
rk_vonmises	distributions.c	/^double rk_vonmises(rk_state *state, double mu, double kappa)$/;"	f
rk_wald	distributions.c	/^double rk_wald(rk_state *state, double mean, double scale)$/;"	f
rk_weibull	distributions.c	/^double rk_weibull(rk_state *state, double a)$/;"	f
rk_zipf	distributions.c	/^long rk_zipf(rk_state *state, double a)$/;"	f
rmDelta	config.h	/^  constexpr static double rmDelta = 0.01; $/;"	m	class:EinConfig
rmHalfWidth	config.h	/^  const static int rmHalfWidth = (rmWidth-1)\/2; \/\/ must be odd$/;"	m	class:EinConfig
rmWidth	config.h	/^  const static int rmWidth = 21; \/\/ must be odd$/;"	m	class:EinConfig
rmcX	config.h	/^  double rmcX;$/;"	m	class:EinConfig
rmcY	config.h	/^  double rmcY;$/;"	m	class:EinConfig
rmcZ	config.h	/^  double rmcZ;$/;"	m	class:EinConfig
rmiCellWidth	config.h	/^  const static int rmiCellWidth = 20;$/;"	m	class:EinConfig
rmiHeight	config.h	/^  const static int rmiHeight = rmiCellWidth*rmWidth;$/;"	m	class:EinConfig
rmiWidth	config.h	/^  const static int rmiWidth = rmiCellWidth*rmWidth;$/;"	m	class:EinConfig
robotMode	config.h	/^} robotMode;$/;"	t	typeref:enum:__anon17
robot_description	config.h	/^  string robot_description;$/;"	m	class:EinConfig
robot_mode	config.h	/^  string robot_mode = "";$/;"	m	class:EinConfig
robot_serial	config.h	/^  string robot_serial;$/;"	m	class:EinConfig
rockDiffA	config.h	/^  double rockDiffA = 0.0;$/;"	m	class:EinConfig
rockDiffB	config.h	/^  double rockDiffB = 0.0;$/;"	m	class:EinConfig
rosPoseToEEPose	ein_util.cpp	/^eePose rosPoseToEEPose(geometry_msgs::Pose pose) {$/;"	f
rosoutCallback	ein.cpp	/^void MachineState::rosoutCallback(const rosgraph_msgs::Log & msg) {$/;"	f	class:MachineState
rosout_sub	config.h	/^  ros::Subscriber rosout_sub;$/;"	m	class:EinConfig
rotx	config.h	/^  double rotx[3];$/;"	m	struct:pixelToGlobalCache
roty	config.h	/^  double roty[3];$/;"	m	struct:pixelToGlobalCache
round	cephes/cephes_names.h	72;"	d
round	cephes/round.c	/^double round(double x)$/;"	f
rowCount	qtgui/stackmodel.cpp	/^int StackModel::rowCount(const QModelIndex & \/* parent *\/) const$/;"	f	class:StackModel
runFunction	opencl/oclNbody/src/oclNbody.cpp	/^int runFunction(int argc, char** argv) $/;"	f
run_prefix	config.h	/^  std::string run_prefix = "";$/;"	m	class:EinConfig
rxp0_0	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
rxp0_0	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
rxp0_1	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
rxp0_1	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
rxp0_2	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
rxp0_2	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
rxp1_0	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
rxp1_0	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
rxp1_1	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
rxp1_1	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
rxp1_2	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
rxp1_2	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
rxp2_0	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
rxp2_0	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
rxp2_1	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
rxp2_1	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
rxp2_2	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
rxp2_2	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
s	word.h	/^  string s;$/;"	m	class:CommentWord
s	word.h	/^  string s;$/;"	m	class:StringWord
s	word.h	/^  string s;$/;"	m	class:SymbolWord
s2p	cephes/ndtri.c	/^static unsigned short s2p[] = { 0040440, 0066230, 0177661, 0034055 };$/;"	v	file:
s2p	cephes/ndtri.c	/^static unsigned short s2p[] = { 0x2706, 0x1ff6, 0x0d93, 0x4004 };$/;"	v	file:
s2p	cephes/ndtri.c	/^static unsigned short s2p[] = {$/;"	v	file:
s2pi	cephes/ndtri.c	/^static double s2pi = 2.50662827463100050242E0;$/;"	v	file:
s2pi	cephes/ndtri.c	65;"	d	file:
s2pi	cephes/ndtri.c	71;"	d	file:
s2pi	cephes/ndtri.c	79;"	d	file:
sad	ein.cpp	/^void sad(MachineState * ms) {$/;"	f
safeAt	gaussian_map.cpp	/^int GaussianMap::safeAt(int x, int y) {$/;"	f	class:GaussianMap
safeAt	gaussian_map.cpp	/^int Scene::safeAt(int x, int y) {$/;"	f	class:Scene
safeBilinAt	gaussian_map.cpp	/^int GaussianMap::safeBilinAt(int x, int y) {$/;"	f	class:GaussianMap
safeBilinAt	gaussian_map.cpp	/^int Scene::safeBilinAt(int x, int y) {$/;"	f	class:Scene
safeSigmaSquared	gaussian_map.cpp	/^double safeSigmaSquared(double sigmasquared) {$/;"	f
samples	gaussian_map.h	/^  double samples;$/;"	m	struct:_GaussianMapChannel
saveAccumulatedStreamToPath	ein.cpp	/^void saveAccumulatedStreamToPath(MachineState * ms, string path) {$/;"	f
saveCalibration	ein.cpp	/^void saveCalibration(MachineState * ms, string outFileName) {$/;"	f
saveImage	qtgui/einwindow.cpp	/^void EinWindow::saveImage() {$/;"	f	class:EinWindow
savePPM	opencl/oclNbody/src/shrUtils.cpp	/^shrBOOL savePPM( const char* file, unsigned char *data, $/;"	f
saveROSParams	ein.cpp	/^void saveROSParams(MachineState * ms) {$/;"	f
saveToFile	gaussian_map.cpp	/^void GaussianMap::saveToFile(string filename) {$/;"	f	class:GaussianMap
saveToFile	gaussian_map.cpp	/^void Scene::saveToFile(string filename) {$/;"	f	class:Scene
saveToFile	gaussian_map.cpp	/^void TransitionTable::saveToFile(string filename) {$/;"	f	class:TransitionTable
saveView	qtgui/window_QT.cpp	/^void DefaultEinViewPort::saveView()$/;"	f	class:DefaultEinViewPort
sawtoothWave	ein_aibo.cpp	/^double sawtoothWave(double t) {$/;"	f	namespace:ein_words
scale	config.h	/^  double scale; \/\/ this is pixels \/ cm$/;"	m	struct:Sprite
scaleView	qtgui/window_QT.cpp	/^void DefaultEinViewPort::scaleView(qreal factor,QPointF center)$/;"	f	class:DefaultEinViewPort
scalevec	opencl/oclNbody/src/oclBodySystemCpu.cpp	/^float3 scalevec(float3& vector, float scalar)$/;"	f
scanMode	config.h	/^} scanMode;$/;"	t	typeref:enum:__anon24
scanXdirection	ein.cpp	/^void scanXdirection(MachineState * ms, double speedOnLines, double speedBetweenLines) {$/;"	f
scanYdirection	ein.cpp	/^void scanYdirection(MachineState * ms, double speedOnLines, double speedBetweenLines) {$/;"	f
scan_group	config.h	/^  std::string scan_group = "";$/;"	m	class:EinConfig
scene	config.h	/^  shared_ptr<Scene> scene;$/;"	m	class:EinConfig
sceneCellCountThreshold	config.h	/^  int sceneCellCountThreshold = 20;$/;"	m	class:EinConfig
sceneClassificationMode	config.h	/^} sceneClassificationMode;$/;"	t	typeref:enum:__anon29
sceneDepthPatchHalfWidth	config.h	/^  int sceneDepthPatchHalfWidth = 0;$/;"	m	class:EinConfig
sceneDiscrepancySearchDepth	config.h	/^  int sceneDiscrepancySearchDepth = 3000;$/;"	m	class:EinConfig
sceneFixationMode	config.h	/^} sceneFixationMode;$/;"	t	typeref:enum:__anon32
sceneMarginalizeIntoRegisterHelper	gaussian_map.cpp	/^void sceneMarginalizeIntoRegisterHelper(MachineState * ms, shared_ptr<GaussianMap> toMin) {$/;"	f	namespace:ein_words
sceneMinIntoRegisterHelper	gaussian_map.cpp	/^void sceneMinIntoRegisterHelper(MachineState * ms, shared_ptr<GaussianMap> toMin) {$/;"	f	namespace:ein_words
sceneMinSigmaSquared	config.h	/^  double sceneMinSigmaSquared = 10;$/;"	m	class:EinConfig
sceneModelFile	ein_util.cpp	/^string sceneModelFile(MachineState * ms, string label) {$/;"	f
sceneObjectType	gaussian_map.h	/^} sceneObjectType;$/;"	t	typeref:enum:__anon36
sceneObjectTypeFromString	gaussian_map.cpp	/^sceneObjectType sceneObjectTypeFromString(string str) {$/;"	f
sceneObjectTypeToString	gaussian_map.cpp	/^string sceneObjectTypeToString(sceneObjectType sot) {$/;"	f
scene_pose	gaussian_map.h	/^  eePose scene_pose;$/;"	m	class:SceneObject
scene_score_thresh	config.h	/^  double scene_score_thresh = 0.01;$/;"	m	class:EinConfig
scoreObjectAtPose	gaussian_map.cpp	/^double Scene::scoreObjectAtPose(double x, double y, double theta, int class_idx, double threshold) {$/;"	f	class:Scene
scores	gaussian_map.h	/^  vector<SceneObjectScore> scores;$/;"	m	class:SceneObject
scrI	config.h	/^  int scrI = 0;$/;"	m	class:EinConfig
sd	cephes/fresnl.c	/^static double sd[6] = {$/;"	v	file:
sd	cephes/fresnl.c	/^static unsigned short sd[24] = {$/;"	v	file:
searchProximity	config.h	/^  int searchProximity = 23;\/\/15;\/\/10;$/;"	m	class:EinConfig
selectMaxTarget	ein.cpp	/^void selectMaxTarget(MachineState * ms, double minDepth) {$/;"	f
selectMaxTargetThompsonContinuous2	ein.cpp	/^void selectMaxTargetThompsonContinuous2(MachineState * ms, double minDepth) {$/;"	f
self	opencl/oclNbody/inc/cmd_arg_reader.h	/^    static  CmdArgReader*  self;$/;"	m	class:CmdArgReader
sendOnDogSocket	ein_aibo.cpp	/^void sendOnDogSocket(MachineState * ms, int member, char *buf, int size) {$/;"	f
sendOnDogSocket	ein_aibo.cpp	/^void sendOnDogSocket(MachineState * ms, int member, string message) {$/;"	f
sensorStreamLastActivated	config.h	/^  double sensorStreamLastActivated = 0.0;$/;"	m	class:EinConfig
sensorStreamOn	config.h	/^  int sensorStreamOn = 0;$/;"	m	class:EinConfig
sensorStreamTimeout	config.h	/^  double sensorStreamTimeout= 3600.0;$/;"	m	class:EinConfig
separation	opencl/oclNbody/inc/paramgl.h	/^          int separation;$/;"	m	class:ParamListGL
setActionProbabilities	gaussian_map.cpp	/^void TransitionTable::setActionProbabilities(std::vector<double> * actions) {$/;"	f	class:TransitionTable
setActions	gaussian_map.cpp	/^void TransitionTable::setActions(std::vector<string> * actions) {$/;"	f	class:TransitionTable
setArray	opencl/oclNbody/src/oclBodySystemCpu.cpp	/^void BodySystemCPU::setArray(BodyArray array, const float* data)$/;"	f	class:BodySystemCPU
setArray	opencl/oclNbody/src/oclBodySystemOpencl.cpp	/^void BodySystemOpenCL::setArray(BodyArray array, const float* data)$/;"	f	class:BodySystemOpenCL
setCCRotation	ein.cpp	/^void setCCRotation(MachineState * ms, int thisGraspGear) {$/;"	f
setColors	opencl/oclNbody/src/oclRenderParticles.cpp	/^void ParticleRenderer::setColors(float *color, int numParticles)$/;"	f	class:ParticleRenderer
setDamping	opencl/oclNbody/inc/oclBodySystemCpu.h	/^            virtual void setDamping(float damping)     { m_damping = damping; }$/;"	f	class:BodySystemCPU
setDamping	opencl/oclNbody/src/oclBodySystemOpencl.cpp	/^void BodySystemOpenCL::setDamping(float damping)$/;"	f	class:BodySystemOpenCL
setDescription	word.h	/^  void setDescription(string d) {$/;"	f	class:CompoundWord
setDiscrepancyDensityFromMagnitude	gaussian_map.cpp	/^void Scene::setDiscrepancyDensityFromMagnitude(double sigma) {$/;"	f	class:Scene
setGGRotation	ein.cpp	/^void setGGRotation(MachineState * ms, int thisGraspGear) {$/;"	f
setIsbIdx	ein.cpp	/^streamImage * setIsbIdx(MachineState * ms, int idx) {$/;"	f
setIsbIdxNoLoad	ein.cpp	/^streamImage * setIsbIdxNoLoad(MachineState * ms, int idx) {$/;"	f
setIsbIdxNoLoadNoKick	ein.cpp	/^streamImage * setIsbIdxNoLoadNoKick(MachineState * ms, int idx) {$/;"	f
setIsbIdxYesLoadNoKick	ein.cpp	/^streamImage * setIsbIdxYesLoadNoKick(MachineState *  ms, int idx) {$/;"	f
setMenu	qtgui/windowmanager.cpp	/^void WindowManager::setMenu(QMenu * _menu) {$/;"	f	class:WindowManager
setMouseCallBack	qtgui/einwindow.cpp	/^void EinWindow::setMouseCallBack(EinMouseCallback m, void* param) {$/;"	f	class:EinWindow
setMouseCallBack	qtgui/window_QT.cpp	/^void DefaultEinViewPort::setMouseCallBack(EinMouseCallback m, void* param)$/;"	f	class:DefaultEinViewPort
setMouseCallBack	qtgui/window_QT.cpp	/^void OpenGlEinViewPort::setMouseCallBack(EinMouseCallback callback, void* param)$/;"	f	class:OpenGlEinViewPort
setObjectMapViewMouseCallBack	qtgui/mainwindow.cpp	/^void MainWindow::setObjectMapViewMouseCallBack(EinMouseCallback m, void* param) {$/;"	f	class:MainWindow
setOpenGlDrawCallback	qtgui/window_QT.cpp	/^void OpenGlEinViewPort::setOpenGlDrawCallback(EinOpenGlDrawCallback callback, void* userdata)$/;"	f	class:OpenGlEinViewPort
setPBO	opencl/oclNbody/src/oclRenderParticles.cpp	/^void ParticleRenderer::setPBO(size_t pbo, int numParticles)$/;"	f	class:ParticleRenderer
setPerformedAction	gaussian_map.cpp	/^void TransitionTable::setPerformedAction() {$/;"	f	class:TransitionTable
setPointSize	opencl/oclNbody/inc/oclRenderParticles.h	/^            void setPointSize(float size)  { m_pointSize = size; }$/;"	f	class:ParticleRenderer
setPositions	opencl/oclNbody/src/oclRenderParticles.cpp	/^void ParticleRenderer::setPositions(float *pos, int numParticles)$/;"	f	class:ParticleRenderer
setPostscene	gaussian_map.cpp	/^void TransitionTable::setPostscene(shared_ptr<Scene> s) {$/;"	f	class:TransitionTable
setPrescene	gaussian_map.cpp	/^void TransitionTable::setPrescene(shared_ptr<Scene> s) {$/;"	f	class:TransitionTable
setRandomPositionAfterPick	config.h	/^  bool setRandomPositionAfterPick = false;$/;"	m	class:EinConfig
setRatio	qtgui/window_QT.cpp	/^void OpenGlEinViewPort::setRatio(int \/*flags*\/)$/;"	f	class:OpenGlEinViewPort
setRingImageAtTime	ein.cpp	/^void setRingImageAtTime(MachineState * ms, ros::Time t, Mat& imToSet) {$/;"	f
setRingPoseAtTime	ein.cpp	/^void setRingPoseAtTime(MachineState * ms, ros::Time t, geometry_msgs::Pose epToSet) {$/;"	f
setRingRangeAtTime	ein.cpp	/^void setRingRangeAtTime(MachineState * ms, ros::Time t, double rgToSet) {$/;"	f
setSize	qtgui/window_QT.cpp	/^void DefaultEinViewPort::setSize(QSize \/*size_*\/)$/;"	f	class:DefaultEinViewPort
setSize	qtgui/window_QT.cpp	/^void OpenGlEinViewPort::setSize(QSize size_)$/;"	f	class:OpenGlEinViewPort
setSoftening	opencl/oclNbody/inc/oclBodySystemCpu.h	/^            virtual void setSoftening(float softening) { m_softeningSquared = softening * softening; }$/;"	f	class:BodySystemCPU
setSoftening	opencl/oclNbody/src/oclBodySystemOpencl.cpp	/^void BodySystemOpenCL::setSoftening(float softening)$/;"	f	class:BodySystemOpenCL
setSpriteSize	opencl/oclNbody/inc/oclRenderParticles.h	/^            void setSpriteSize(float size) { m_spriteSize = size; }$/;"	f	class:ParticleRenderer
setStack	qtgui/stackmodel.cpp	/^void StackModel::setStack(vector<shared_ptr<Word> > _stack)$/;"	f	class:StackModel
setStateLabelsFromClassLabels	gaussian_map.cpp	/^void setStateLabelsFromClassLabels() {$/;"	f
setVanishingPointIterations	config.h	/^  int setVanishingPointIterations = 0;$/;"	m	class:EinConfig
setVanishingPointPixelThresh	config.h	/^  int setVanishingPointPixelThresh = 3;$/;"	m	class:EinConfig
setVanishingPointTimeout	config.h	/^  int setVanishingPointTimeout = 6;$/;"	m	class:EinConfig
setVisible	qtgui/einwindow.cpp	/^void EinWindow::setVisible(bool show) {$/;"	f	class:EinWindow
setWindowTitle	qtgui/einwindow.h	/^    void setWindowTitle(string s) {$/;"	f	class:EinWindow
sgngam	cephes/gamma.c	/^int sgngam = 0;$/;"	v
shichi	cephes/cephes_names.h	73;"	d
shichi	cephes/shichi.c	/^int shichi(x, si, ci)$/;"	f
shouldIDoIK	config.h	/^  int shouldIDoIK = 1;$/;"	m	class:EinConfig
shouldIImageCallback	config.h	/^  int shouldIImageCallback = 1;$/;"	m	class:EinConfig
shouldIMiscCallback	config.h	/^  int shouldIMiscCallback = 1;$/;"	m	class:EinConfig
shouldIPick	ein.cpp	/^int shouldIPick(MachineState * ms, int classToPick) {$/;"	f
shouldIRangeCallback	config.h	/^  int shouldIRangeCallback = 1;$/;"	m	class:EinConfig
shouldIRender	config.h	/^  int shouldIRender = 0;$/;"	m	class:EinConfig
shouldIRenderDefault	config.h	/^  int shouldIRenderDefault = 1;$/;"	m	class:EinConfig
shoulderCallback	ein.cpp	/^void MachineState::shoulderCallback(const baxter_core_msgs::DigitalIOState& dios) {$/;"	f	class:MachineState
shoulder_sub	config.h	/^  ros::Subscriber shoulder_sub;$/;"	m	class:EinConfig
shrBOOL	opencl/oclNbody/inc/shrUtils.h	/^enum shrBOOL$/;"	g
shrCheckCmdLineFlag	opencl/oclNbody/src/shrUtils.cpp	/^shrBOOL shrCheckCmdLineFlag( const int argc, const char** argv, const char* flag_name) $/;"	f
shrCheckError	opencl/oclNbody/inc/shrUtils.h	121;"	d
shrCheckErrorEX	opencl/oclNbody/inc/shrUtils.h	117;"	d
shrCompareL2fe	opencl/oclNbody/src/shrUtils.cpp	/^shrBOOL shrCompareL2fe( const float* reference, const float* data,$/;"	f
shrComparePGM	opencl/oclNbody/src/shrUtils.cpp	/^shrBOOL shrComparePGM( const char *src_file, const char *ref_file, const float epsilon, const float threshold)$/;"	f
shrComparePPM	opencl/oclNbody/src/shrUtils.cpp	/^shrBOOL shrComparePPM( const char *src_file, const char *ref_file, const float epsilon, const float threshold)$/;"	f
shrComparef	opencl/oclNbody/src/shrUtils.cpp	/^shrBOOL shrComparef( const float* reference, const float* data,$/;"	f
shrComparefe	opencl/oclNbody/src/shrUtils.cpp	/^shrBOOL shrComparefe( const float* reference, const float* data,$/;"	f
shrComparefet	opencl/oclNbody/src/shrUtils.cpp	/^shrBOOL shrComparefet( const float* reference, const float* data,$/;"	f
shrComparei	opencl/oclNbody/src/shrUtils.cpp	/^shrBOOL shrComparei( const int* reference, const int* data,$/;"	f
shrCompareub	opencl/oclNbody/src/shrUtils.cpp	/^shrBOOL shrCompareub( const unsigned char* reference, const unsigned char* data,$/;"	f
shrCompareube	opencl/oclNbody/src/shrUtils.cpp	/^shrBOOL shrCompareube( const unsigned char* reference, const unsigned char* data,$/;"	f
shrCompareubt	opencl/oclNbody/src/shrUtils.cpp	/^shrBOOL shrCompareubt( const unsigned char* reference, const unsigned char* data,$/;"	f
shrCompareuit	opencl/oclNbody/src/shrUtils.cpp	/^shrBOOL shrCompareuit( const unsigned int* reference, const unsigned int* data,$/;"	f
shrDeltaT	opencl/oclNbody/src/shrUtils.cpp	/^double shrDeltaT(int iCounterID = 0)$/;"	f
shrEXIT	opencl/oclNbody/inc/shrUtils.h	129;"	d
shrExitEX	opencl/oclNbody/inc/shrUtils.h	125;"	d
shrFALSE	opencl/oclNbody/inc/shrUtils.h	/^    shrFALSE = 0,$/;"	e	enum:shrBOOL
shrFillArray	opencl/oclNbody/src/shrUtils.cpp	/^void shrFillArray(float* pfData, int iSize)$/;"	f
shrFindFilePath	opencl/oclNbody/src/shrUtils.cpp	/^char* shrFindFilePath(const char* filename, const char* executable_path) $/;"	f
shrFree	opencl/oclNbody/src/shrUtils.cpp	/^void shrFree(void* ptr) $/;"	f
shrGetCmdLineArgumentf	opencl/oclNbody/src/shrUtils.cpp	/^shrBOOL shrGetCmdLineArgumentf( const int argc, const char** argv, $/;"	f
shrGetCmdLineArgumenti	opencl/oclNbody/src/shrUtils.cpp	/^shrBOOL shrGetCmdLineArgumenti( const int argc, const char** argv, $/;"	f
shrGetCmdLineArgumentstr	opencl/oclNbody/src/shrUtils.cpp	/^shrBOOL shrGetCmdLineArgumentstr( const int argc, const char** argv, $/;"	f
shrGetCmdLineArgumentu	opencl/oclNbody/src/shrUtils.cpp	/^shrBOOL shrGetCmdLineArgumentu( const int argc, const char** argv, $/;"	f
shrLoadPGMub	opencl/oclNbody/src/shrUtils.cpp	/^shrBOOL shrLoadPGMub( const char* file, unsigned char** data, $/;"	f
shrLoadPPM4ub	opencl/oclNbody/src/shrUtils.cpp	/^shrBOOL shrLoadPPM4ub( const char* file, unsigned char** OutData, $/;"	f
shrLoadRawFile	opencl/oclNbody/src/shrUtils.cpp	/^unsigned char* shrLoadRawFile(const char* filename, size_t size)$/;"	f
shrLog	opencl/oclNbody/src/shrUtils.cpp	/^int shrLog(const char* cFormatString = "", ...)$/;"	f
shrLogEx	opencl/oclNbody/src/shrUtils.cpp	/^int shrLogEx(int iLogMode = LOGCONSOLE, int iErrNum = 0, const char* cFormatString = "", ...)$/;"	f
shrLogV	opencl/oclNbody/src/shrUtils.cpp	/^static int shrLogV(int iLogMode, int iErrNum, const char* cFormatString, va_list vaArgList)$/;"	f	file:
shrPrintArray	opencl/oclNbody/src/shrUtils.cpp	/^void shrPrintArray(float* pfData, int iSize)$/;"	f
shrQAFinish	opencl/oclNbody/inc/shrQATest.h	61;"	d
shrQAFinish2	opencl/oclNbody/inc/shrQATest.h	62;"	d
shrQAFinishExit	opencl/oclNbody/inc/shrQATest.h	/^inline void shrQAFinishExit(int argc, const char **argv, int iStatus)$/;"	f
shrQAFinishExit2	opencl/oclNbody/inc/shrQATest.h	/^inline void shrQAFinishExit2(bool bQAtest, int argc, const char **argv, int iStatus)$/;"	f
shrQAStart	opencl/oclNbody/inc/shrQATest.h	60;"	d
shrReadFile	opencl/oclNbody/src/shrUtils.cpp	/^shrReadFile( const char* filename, T** data, unsigned int* len, bool verbose) $/;"	f
shrReadFileb	opencl/oclNbody/src/shrUtils.cpp	/^shrBOOL shrReadFileb( const char* filename, char** data, unsigned int* len, bool verbose) $/;"	f
shrReadFiled	opencl/oclNbody/src/shrUtils.cpp	/^shrBOOL shrReadFiled( const char* filename, double** data, unsigned int* len, bool verbose) $/;"	f
shrReadFilef	opencl/oclNbody/src/shrUtils.cpp	/^shrBOOL shrReadFilef( const char* filename, float** data, unsigned int* len, bool verbose) $/;"	f
shrReadFilei	opencl/oclNbody/src/shrUtils.cpp	/^shrBOOL shrReadFilei( const char* filename, int** data, unsigned int* len, bool verbose) $/;"	f
shrReadFileub	opencl/oclNbody/src/shrUtils.cpp	/^shrBOOL shrReadFileub( const char* filename, unsigned char** data, unsigned int* len, bool verbose) $/;"	f
shrReadFileui	opencl/oclNbody/src/shrUtils.cpp	/^shrBOOL shrReadFileui( const char* filename, unsigned int** data, unsigned int* len, bool verbose) $/;"	f
shrRoundUp	opencl/oclNbody/src/shrUtils.cpp	/^size_t shrRoundUp(int group_size, int global_size) $/;"	f
shrSavePGMub	opencl/oclNbody/src/shrUtils.cpp	/^shrBOOL shrSavePGMub( const char* file, unsigned char *data, $/;"	f
shrSavePPM4ub	opencl/oclNbody/src/shrUtils.cpp	/^shrBOOL shrSavePPM4ub( const char* file, unsigned char *data, $/;"	f
shrSetLogFileName	opencl/oclNbody/src/shrUtils.cpp	/^void shrSetLogFileName (const char* cOverRideName)$/;"	f
shrTRUE	opencl/oclNbody/inc/shrUtils.h	/^    shrTRUE = 1$/;"	e	enum:shrBOOL
shrWriteFile	opencl/oclNbody/src/shrUtils.cpp	/^shrWriteFile( const char* filename, const T* data, unsigned int len,$/;"	f
shrWriteFileb	opencl/oclNbody/src/shrUtils.cpp	/^shrBOOL shrWriteFileb( const char* filename, const char* data, unsigned int len, bool verbose) $/;"	f
shrWriteFileb	opencl/oclNbody/src/shrUtils.cpp	/^shrBOOL shrWriteFileb( const char* filename,const unsigned char* data,unsigned int len, bool verbose)$/;"	f
shrWriteFiled	opencl/oclNbody/src/shrUtils.cpp	/^shrBOOL shrWriteFiled( const char* filename, const double* data, unsigned int len,$/;"	f
shrWriteFilef	opencl/oclNbody/src/shrUtils.cpp	/^shrBOOL shrWriteFilef( const char* filename, const float* data, unsigned int len,$/;"	f
shrWriteFilei	opencl/oclNbody/src/shrUtils.cpp	/^shrBOOL shrWriteFilei( const char* filename, const int* data, unsigned int len, bool verbose) $/;"	f
shrWriteFileub	opencl/oclNbody/src/shrUtils.cpp	/^shrBOOL shrWriteFileub( const char* filename, const unsigned char* data, $/;"	f
shrWriteFileui	opencl/oclNbody/src/shrUtils.cpp	/^shrBOOL shrWriteFileui( const char* filename,const unsigned int* data,unsigned int len, bool verbose)$/;"	f
shrugPose	config.h	/^  eePose shrugPose;$/;"	m	class:EinConfig
sibCurIdx	config.h	/^  int sibCurIdx = 0;$/;"	m	class:EinConfig
sici	cephes/cephes_names.h	74;"	d
sici	cephes/sici.c	/^int sici(x, si, ci)$/;"	f
siftWindowOnDown	qtgui/window_QT.cpp	/^void DefaultEinViewPort::siftWindowOnDown()$/;"	f	class:DefaultEinViewPort
siftWindowOnLeft	qtgui/window_QT.cpp	/^void DefaultEinViewPort::siftWindowOnLeft()$/;"	f	class:DefaultEinViewPort
siftWindowOnRight	qtgui/window_QT.cpp	/^void DefaultEinViewPort::siftWindowOnRight()$/;"	f	class:DefaultEinViewPort
siftWindowOnUp	qtgui/window_QT.cpp	/^void DefaultEinViewPort::siftWindowOnUp()$/;"	f	class:DefaultEinViewPort
sigmasquared	gaussian_map.h	/^  double sigmasquared;$/;"	m	struct:_GaussianMapChannel
signalHandler	ein.cpp	/^void signalHandler( int signo )$/;"	f
simcon	cephes/simpsn.c	/^static double simcon[] = {$/;"	v	file:
simpsn	cephes/simpsn.c	/^double simpsn(f, delta)$/;"	f
simq	cephes/simq.c	/^int simq(A, B, X, n, flag, IPS)$/;"	f
simulatedObjectHalfWidthPixels	config.h	/^  int simulatedObjectHalfWidthPixels = 50;$/;"	m	class:EinConfig
simulatorCallback	ein.cpp	/^void MachineState::simulatorCallback(const ros::TimerEvent&) {$/;"	f	class:MachineState
simulatorCallbackFrequency	config.h	/^  double simulatorCallbackFrequency = 30.0;$/;"	m	class:EinConfig
simulatorCallbackTimer	config.h	/^  ros::Timer simulatorCallbackTimer;$/;"	m	class:EinConfig
sincof	cephes/sindg.c	/^static double sincof[] = {$/;"	v	file:
sincof	cephes/sindg.c	/^static unsigned short sincof[] = {$/;"	v	file:
sincos	cephes/cephes_names.h	78;"	d
sincos	cephes/sincos.c	/^void sincos(double x, double *s, double *c, int flg)$/;"	f
sindg	cephes/cephes_names.h	76;"	d
sindg	cephes/sindg.c	/^double sindg(x)$/;"	f
sintbl	cephes/sincos.c	/^static double sintbl[92] = {$/;"	v	file:
sisImage	config.h	/^  int sisImage = 0;$/;"	m	class:EinConfig
sisJoints	config.h	/^  int sisJoints= 0;$/;"	m	class:EinConfig
sisLabel	config.h	/^  int sisLabel = 0;$/;"	m	class:EinConfig
sisPose	config.h	/^  int sisPose = 0;$/;"	m	class:EinConfig
sisRange	config.h	/^  int sisRange = 0;$/;"	m	class:EinConfig
sisWord	config.h	/^  int sisWord = 0;$/;"	m	class:EinConfig
size	qtgui/window_QT.h	/^    QSize size;$/;"	m	class:OpenGlEinViewPort
size	word.cpp	/^int CompoundWord::size() {$/;"	f	class:CompoundWord
sizeHint	qtgui/window_QT.cpp	/^QSize DefaultEinViewPort::sizeHint() const$/;"	f	class:DefaultEinViewPort
sizeHint	qtgui/window_QT.cpp	/^QSize OpenGlEinViewPort::sizeHint() const$/;"	f	class:OpenGlEinViewPort
sj0	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
sj0	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
sj1	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
sj1	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
sj2	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
sj2	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
sj3	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
sj3	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
sj4	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
sj4	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
sj5	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
sj5	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
sj6	ikfast/baxter_left_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
sj6	ikfast/baxter_right_arm_ikfast_solver.cpp	/^IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;$/;"	m	class:IKFAST_NAMESPACE::IKSolver	file:
sjbCurIdx	config.h	/^  int sjbCurIdx = 0;$/;"	m	class:EinConfig
skirtedBlueBoxForPixel	ein.cpp	/^int skirtedBlueBoxForPixel(MachineState * ms, int px, int py, int skirtPixels) {$/;"	f
slbCurIdx	config.h	/^  int slbCurIdx = 0;$/;"	m	class:EinConfig
slope	slu/math2d.h	/^  double slope;$/;"	m	struct:fit_line_result
smirnov	cephes/cephes_names.h	92;"	d
smirnov	cephes/kolmogorov.c	/^double smirnov(int n, double e)$/;"	f
smirnovi	cephes/cephes_names.h	93;"	d
smirnovi	cephes/kolmogorov.c	/^double smirnovi(n, p)$/;"	f
smoothDiscrepancyDensity	gaussian_map.cpp	/^void Scene::smoothDiscrepancyDensity(double sigma) {$/;"	f	class:Scene
sn	cephes/fresnl.c	/^static double sn[6] = {$/;"	v	file:
sn	cephes/fresnl.c	/^static unsigned short sn[24] = {$/;"	v	file:
snapToFlushGrasp	config.h	/^  bool snapToFlushGrasp = true;$/;"	m	class:EinConfig
snoutCamImage	ein_aibo.h	/^  Mat snoutCamImage;$/;"	m	class:EinAiboConfig
snoutImage	ein_aibo.h	/^  Mat snoutImage;$/;"	m	class:EinAiboConfig
sobel_scale_factor	config.h	/^  double sobel_scale_factor = 1e-12;$/;"	m	class:EinConfig
sobel_sigma	config.h	/^  double sobel_sigma = 2.0;\/\/4.0;$/;"	m	class:EinConfig
softMaxGradientServoIterations	config.h	/^  int softMaxGradientServoIterations = 2;\/\/5;\/\/3;\/\/10;\/\/3;$/;"	m	class:EinConfig
solvedialyticpoly8qep	ikfast/baxter_left_arm_ikfast_solver.cpp	/^static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)$/;"	f	class:IKFAST_NAMESPACE::IKSolver
solvedialyticpoly8qep	ikfast/baxter_right_arm_ikfast_solver.cpp	/^static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)$/;"	f	class:IKFAST_NAMESPACE::IKSolver
sonarPub	config.h	/^  ros::Publisher sonarPub;$/;"	m	class:EinConfig
sonar_led_state	config.h	/^  int sonar_led_state = 0;$/;"	m	class:EinConfig
sonar_pub	config.h	/^  ros::Publisher sonar_pub;$/;"	m	class:EinConfig
sot	gaussian_map.h	/^  sceneObjectType sot;$/;"	m	class:SceneObject
spbCurIdx	config.h	/^  int spbCurIdx = 0;$/;"	m	class:EinConfig
spence	cephes/cephes_names.h	79;"	d
spence	cephes/spence.c	/^double spence(x)$/;"	f
spinForSecondsTarget	config.h	/^  ros::Time spinForSecondsTarget;$/;"	m	class:EinConfig
spinlessNodeMain	ein.cpp	/^void spinlessNodeMain(MachineState * ms) {$/;"	f
spinlessPilotMain	ein.cpp	/^void spinlessPilotMain(MachineState * ms) {$/;"	f
split	repl.cpp	/^vector<string> split(const char *str, char c = ' ')$/;"	f
split	word.cpp	/^vector<string> split(const char *str, char c = ' ')$/;"	f
sprec	cephes/setprec.c	/^int sprec(void)$/;"	f
sqpii	cephes/airy.c	/^static double sqpii = 5.64189583547756286948E-1;$/;"	v	file:
sqrt3	cephes/airy.c	/^static double sqrt3 = 1.732050807568877293527;$/;"	v	file:
squareDistance	eePose.cpp	/^double _eePose::squareDistance(eePose pose1, eePose pose2) {$/;"	f	class:_eePose
squareWave	ein_aibo.cpp	/^double squareWave(double t) {$/;"	f	namespace:ein_words
squaredcounts	gaussian_map.h	/^  double squaredcounts;$/;"	m	struct:_GaussianMapChannel
srbCurIdx	config.h	/^  int srbCurIdx = 0;$/;"	m	class:EinConfig
stack	qtgui/stackmodel.h	/^    vector<shared_ptr<Word> > stack;$/;"	m	class:StackModel
stack	repl.cpp	/^vector<ToyWord *> stack;$/;"	v
stack	word.h	/^  vector<std::shared_ptr<Word> > stack;$/;"	m	class:CompoundWord
startDisplayInfo	qtgui/window_QT.cpp	/^void DefaultEinViewPort::startDisplayInfo(QString text, int delayms)$/;"	f	class:DefaultEinViewPort
startDisplayInfo	qtgui/window_QT.cpp	/^void OpenGlEinViewPort::startDisplayInfo(QString \/*text*\/, int \/*delayms*\/)$/;"	f	class:OpenGlEinViewPort
start_i	slu/math2d.h	/^  int start_i;$/;"	m	struct:math2d_range
start_x	opencl/oclNbody/inc/paramgl.h	/^          int start_x, start_y;$/;"	m	class:ParamListGL
start_y	opencl/oclNbody/inc/paramgl.h	/^          int start_x, start_y;$/;"	m	class:ParamListGL
state_labels	gaussian_map.h	/^  std::vector<string> state_labels;$/;"	m	class:TransitionTable
stdDevView	qtgui/gaussianmapwidget.h	/^    DefaultEinViewPort stdDevView;$/;"	m	class:GaussianMapWidget
stdtr	cephes/cephes_names.h	80;"	d
stdtr	cephes/stdtr.c	/^double stdtr(k, t)$/;"	f
stdtri	cephes/cephes_names.h	81;"	d
stdtri	cephes/stdtr.c	/^double stdtri(k, p)$/;"	f
stereoBaseline	config.h	/^  double stereoBaseline = 0.01;$/;"	m	class:EinConfig
stereoDepth	config.h	/^  Mat stereoDepth;$/;"	m	class:EinConfig
stereoDisparity	config.h	/^  Mat stereoDisparity;$/;"	m	class:EinConfig
stereoFocal	config.h	/^  double stereoFocal = 1.0; \/\/ needs to be tuned$/;"	m	class:EinConfig
stereoImage1	config.h	/^  Mat stereoImage1;$/;"	m	class:EinConfig
stereoImage2	config.h	/^  Mat stereoImage2;$/;"	m	class:EinConfig
stereoMaxDisparity	config.h	/^  double stereoMaxDisparity = 128;$/;"	m	class:EinConfig
stereoViewerImage	config.h	/^  Mat stereoViewerImage;$/;"	m	class:EinConfig
stereoViewerWindow	config.h	/^  EinWindow * stereoViewerWindow;$/;"	m	class:EinConfig
stiffPub	config.h	/^  ros::Publisher stiffPub;$/;"	m	class:EinConfig
stirf	cephes/gamma.c	/^static double stirf(double x)$/;"	f	file:
stop	cephes/struve.c	/^static double stop = 1.37e-17;$/;"	v	file:
stopDisplayInfo	qtgui/window_QT.cpp	/^void DefaultEinViewPort::stopDisplayInfo()$/;"	f	class:DefaultEinViewPort
stoppedJoints	config.h	/^  EinAiboJoints stoppedJoints;$/;"	m	class:MachineState
stoppedTimeout	config.h	/^  double stoppedTimeout = 0.25;$/;"	m	class:EinConfig
straightDown	config.h	/^  eePose straightDown = eePose(0.0, 0.0, 0.0,$/;"	m	class:EinConfig
streamEePose	config.h	/^typedef struct streamEePose {$/;"	s
streamEePose	config.h	/^} streamEePose;$/;"	t	typeref:struct:streamEePose
streamImage	config.h	/^typedef struct streamImage{$/;"	s
streamImage	config.h	/^} streamImage;$/;"	t	typeref:struct:streamImage
streamImageAsClass	ein.cpp	/^void streamImageAsClass(MachineState * ms, Mat im, int classToStreamIdx, double now) {$/;"	f
streamImageBuffer	config.h	/^  std::vector<streamImage> streamImageBuffer;$/;"	m	class:EinConfig
streamImageComparator	ein.cpp	/^bool streamImageComparator (streamImage i, streamImage j) {$/;"	f
streamJointAsClass	ein.cpp	/^void streamJointAsClass(MachineState * ms, int classToStreamIdx, double now) {$/;"	f
streamJoints	config.h	/^typedef struct streamJoints{$/;"	s
streamJoints	config.h	/^} streamJoints;$/;"	t	typeref:struct:streamJoints
streamJointsBatchSize	config.h	/^  int streamJointsBatchSize = 100;$/;"	m	class:EinConfig
streamJointsBuffer	config.h	/^  std::vector<streamJoints> streamJointsBuffer;$/;"	m	class:EinConfig
streamJointsComparator	ein.cpp	/^bool streamJointsComparator(streamJoints i, streamJoints j) {$/;"	f
streamLabel	config.h	/^typedef struct streamLabel {$/;"	s
streamLabel	config.h	/^} streamLabel;$/;"	t	typeref:struct:streamLabel
streamLabelAsClass	ein.cpp	/^void streamLabelAsClass(MachineState * ms, string labelIn, int classToStreamIdx, double now) {$/;"	f
streamLabelBatchSize	config.h	/^  int streamLabelBatchSize = 5;$/;"	m	class:EinConfig
streamLabelBuffer	config.h	/^  std::vector<streamLabel> streamLabelBuffer;$/;"	m	class:EinConfig
streamLabelComparator	ein.cpp	/^bool streamLabelComparator(streamLabel i, streamLabel j) {$/;"	f
streamPicks	config.h	/^  bool streamPicks = false;$/;"	m	class:EinConfig
streamPoseAsClass	ein.cpp	/^void streamPoseAsClass(MachineState * ms, eePose poseIn, int classToStreamIdx, double now) {$/;"	f
streamPoseBatchSize	config.h	/^  int streamPoseBatchSize = 100;$/;"	m	class:EinConfig
streamPoseBuffer	config.h	/^  std::vector<streamEePose> streamPoseBuffer;$/;"	m	class:EinConfig
streamPoseComparator	ein.cpp	/^bool streamPoseComparator (streamEePose i, streamEePose j) {$/;"	f
streamRange	config.h	/^typedef struct streamRange{$/;"	s
streamRange	config.h	/^} streamRange;$/;"	t	typeref:struct:streamRange
streamRangeAsClass	ein.cpp	/^void streamRangeAsClass(MachineState * ms, double rangeIn, int classToStreamIdx, double now) {$/;"	f
streamRangeBatchSize	config.h	/^  int streamRangeBatchSize = 100;$/;"	m	class:EinConfig
streamRangeBuffer	config.h	/^  std::vector<streamRange> streamRangeBuffer;$/;"	m	class:EinConfig
streamRangeComparator	ein.cpp	/^bool streamRangeComparator (streamRange i, streamRange j) {$/;"	f
streamWord	config.h	/^typedef struct streamWord {$/;"	s
streamWord	config.h	/^} streamWord;$/;"	t	typeref:struct:streamWord
streamWordAsClass	ein.cpp	/^void streamWordAsClass(MachineState * ms, string wordIn, string commandIn, int classToStreamIdx, double now) {$/;"	f
streamWordBatchSize	config.h	/^  int streamWordBatchSize = 100;$/;"	m	class:EinConfig
streamWordBuffer	config.h	/^  std::vector<streamWord> streamWordBuffer;$/;"	m	class:EinConfig
streamWordComparator	ein.cpp	/^bool streamWordComparator(streamWord i, streamWord j) {$/;"	f
string_type	tokenizer.hpp	/^  typedef std::basic_string<Char,Traits> string_type;$/;"	t	class:escaped_forth_separator
stringer	ein.cpp	29;"	d	file:
stringer_value	ein.cpp	30;"	d	file:
struve	cephes/cephes_names.h	82;"	d
struve	cephes/struve.c	/^double struve(v, x)$/;"	f
substituteAccumulatedImageQuantities	ein.cpp	/^void substituteAccumulatedImageQuantities(MachineState * ms) {$/;"	f
substituteLatestImageQuantities	ein.cpp	/^void substituteLatestImageQuantities(MachineState * ms) {$/;"	f
substituteStreamAccumulatedImageQuantities	ein.cpp	/^void substituteStreamAccumulatedImageQuantities(MachineState * ms) {$/;"	f
substituteStreamImageQuantities	ein.cpp	/^void substituteStreamImageQuantities(MachineState * ms) {$/;"	f
successes	config.h	/^  double successes;$/;"	m	struct:Grasp
swbCurIdx	config.h	/^  int swbCurIdx = 0;$/;"	m	class:EinConfig
synKp	config.h	/^  double synKp = 0.0005;$/;"	m	class:EinConfig
synServoLockFrames	config.h	/^  int synServoLockFrames = 0;$/;"	m	class:EinConfig
synServoPixelThresh	config.h	/^  int synServoPixelThresh = 15;\/\/30;\/\/15;\/\/10;$/;"	m	class:EinConfig
synchronicServo	ein.cpp	/^void synchronicServo(MachineState * ms) {$/;"	f
synchronicTakeClosest	config.h	/^  int synchronicTakeClosest = 0;$/;"	m	class:EinConfig
synchronizeThreads	opencl/oclNbody/inc/oclBodySystem.h	/^        virtual void   synchronizeThreads() const {};$/;"	f	class:BodySystem
synchronizeThreads	opencl/oclNbody/src/oclBodySystemOpencl.cpp	/^void BodySystemOpenCL::synchronizeThreads() const$/;"	f	class:BodySystemOpenCL
szBuffBytes	opencl/ein_opencl.cpp	/^  size_t szBuffBytes;                 \/\/ Size of main image buffers$/;"	m	struct:GaussianMapGpu	file:
szKernelLength	opencl/ein_opencl.cpp	/^  size_t szKernelLength;	      \/\/ Byte size of kernel code$/;"	m	struct:EinGpuConfig	file:
t	gaussian_map.h	/^  rayType t;$/;"	m	class:OrientedRay
tARM	config.h	/^  int tARM = 100;$/;"	m	class:EinConfig
tGO	config.h	/^  int tGO = 30;$/;"	m	class:EinConfig
tableMouseButtons	qtgui/window_QT.h	/^static const int tableMouseButtons[][3]={$/;"	v
tailPan	ein_aibo.h	/^  double tailPan;$/;"	m	class:EinAiboJoints
tailTilt	ein_aibo.h	/^  double tailTilt;$/;"	m	class:EinAiboJoints
tancot	cephes/tandg.c	/^static double tancot(double xx, int cotflg)$/;"	f	file:
tandg	cephes/cephes_names.h	84;"	d
tandg	cephes/tandg.c	/^double tandg(double x)$/;"	f
target	qtgui/window_QT.h	/^    QRectF target;$/;"	m	class:DefaultEinViewPort
targetAnimationState	config.h	/^  AnimationState targetAnimationState = {"confused", 0}; $/;"	m	class:EinConfig
targetBlueBox	config.h	/^  int targetBlueBox = 0;$/;"	m	class:EinConfig
targetBoxMemory	ein_pick_place.cpp	/^void targetBoxMemory(MachineState * ms, int memoryIdx) {$/;"	f
targetCallback	ein.cpp	/^void MachineState::targetCallback(const geometry_msgs::Point& point) {$/;"	f	class:MachineState
targetClass	config.h	/^  int targetClass = -1;$/;"	m	class:EinConfig
targetInstanceSprite	config.h	/^  int targetInstanceSprite = 0;$/;"	m	class:EinConfig
targetJoints	ein_aibo.h	/^  EinAiboJoints targetJoints;$/;"	m	class:EinAiboConfig
targetMasterSprite	config.h	/^  int targetMasterSprite = 0;$/;"	m	class:EinConfig
targetWrench	config.h	/^  eePose targetWrench;$/;"	m	class:EinConfig
target_joint_actual_effort	config.h	/^  double target_joint_actual_effort[NUM_JOINTS];$/;"	m	class:EinConfig
temme_ik_series	cephes/scipy_iv.c	/^static int temme_ik_series(double v, double x, double *K, double *K1)$/;"	f	file:
temporalDensity	config.h	/^  double *temporalDensity = NULL;$/;"	m	class:EinConfig
testHeightConversion	ein.cpp	/^void testHeightConversion(MachineState * ms) {$/;"	f
testJoint	config.h	/^  int testJoint = 3;$/;"	m	class:EinConfig
text_col_selected	opencl/oclNbody/inc/paramgl.h	/^          float text_col_selected[3];$/;"	m	class:ParamListGL
text_col_shadow	opencl/oclNbody/inc/paramgl.h	/^          float text_col_shadow[3];$/;"	m	class:ParamListGL
text_col_unselected	opencl/oclNbody/inc/paramgl.h	/^          float text_col_unselected[3];$/;"	m	class:ParamListGL
text_x	opencl/oclNbody/inc/paramgl.h	/^          int text_x;$/;"	m	class:ParamListGL
tfListener	config.h	/^  tf::TransformListener* tfListener;$/;"	m	class:EinConfig
theta_r	gaussian_map.h	/^  double theta_r;$/;"	m	struct:SceneObjectScore
thisGraspPicked	config.h	/^  operationStatusType thisGraspPicked = UNKNOWN;$/;"	m	class:EinConfig
thisGraspReleased	config.h	/^  operationStatusType thisGraspReleased = UNKNOWN;$/;"	m	class:EinConfig
thisTime	config.h	/^  time_t thisTime = 0;$/;"	m	class:EinConfig
thisTimeRange	config.h	/^  time_t thisTimeRange = 0;$/;"	m	class:EinConfig
thisiX	config.h	/^  double thisiX = 0;$/;"	m	class:EinConfig
thisiY	config.h	/^  double thisiY = 0;$/;"	m	class:EinConfig
thompsonAdaptiveCutoff	config.h	/^  int thompsonAdaptiveCutoff = 1;$/;"	m	class:EinConfig
thompsonHardCutoff	config.h	/^  int thompsonHardCutoff = 0;$/;"	m	class:EinConfig
thompsonHeightHaltFlag	config.h	/^  int thompsonHeightHaltFlag = 0;$/;"	m	class:EinConfig
thompsonMinPassRate	config.h	/^  double thompsonMinPassRate = 0.80;$/;"	m	class:EinConfig
thompsonMinTryCutoff	config.h	/^  int thompsonMinTryCutoff = 5;$/;"	m	class:EinConfig
thompsonPickHaltFlag	config.h	/^  int thompsonPickHaltFlag = 0;$/;"	m	class:EinConfig
thompsonTries	config.h	/^  double thompsonTries = 50;$/;"	m	class:EinConfig
threef0	cephes/cephes_names.h	38;"	d
threef0	cephes/struve.c	/^double threef0(a, b, c, x, err)$/;"	f
threshFraction	config.h	/^  double threshFraction = 0.2;$/;"	m	class:EinConfig
threshold_zoom_img_region	qtgui/window_QT.cpp	/^static const unsigned int threshold_zoom_img_region = 30;$/;"	v	file:
time	config.h	/^  double time;$/;"	m	struct:streamEePose
time	config.h	/^  double time;$/;"	m	struct:streamImage
time	config.h	/^  double time;$/;"	m	struct:streamJoints
time	config.h	/^  double time;$/;"	m	struct:streamLabel
time	config.h	/^  double time;$/;"	m	struct:streamRange
time	config.h	/^  double time;$/;"	m	struct:streamWord
time	config.h	/^  ros::Time time;$/;"	m	struct:CollisionDetection
timeInterval	config.h	/^  double timeInterval = 30;$/;"	m	class:EinConfig
timeIntervalRange	config.h	/^  double timeIntervalRange = 30;$/;"	m	class:EinConfig
timeMass	config.h	/^  double timeMass = 0.0;$/;"	m	class:EinConfig
timeMassRange	config.h	/^  double timeMassRange = 0.0;$/;"	m	class:EinConfig
timer1	config.h	/^  ros::Timer timer1;$/;"	m	class:EinConfig
timerDisplay	qtgui/window_QT.h	/^    QPointer<QTimer> timerDisplay;$/;"	m	class:DefaultEinViewPort
timercallback1	ein.cpp	/^void MachineState::timercallback1(const ros::TimerEvent&) {$/;"	f	class:MachineState
tklib_apply_mask_lp	slu/gsl_utilities.cpp	/^void tklib_apply_mask_lp(gsl_vector * mask, gsl_vector * log_probs, gsl_vector * dest) $/;"	f
tklib_arctan2	slu/gsl_utilities.cpp	/^gsl_vector* tklib_arctan2(gsl_vector *Y, gsl_vector* X){$/;"	f
tklib_const_matrix_printf	slu/gsl_utilities.cpp	/^void tklib_const_matrix_printf(const gsl_matrix* themat){$/;"	f
tklib_cos	slu/gsl_utilities.cpp	/^gsl_vector* tklib_cos(gsl_vector *angles){$/;"	f
tklib_diag	slu/gsl_utilities.cpp	/^gsl_matrix* tklib_diag(gsl_vector* vec){$/;"	f
tklib_double_to_gsl_vector	slu/gsl_utilities.cpp	/^gsl_vector* tklib_double_to_gsl_vector(double* myarray, int length){$/;"	f
tklib_euclidean_distance	slu/gsl_utilities.h	/^inline double tklib_euclidean_distance(gsl_vector* pt1, gsl_vector* pt2){$/;"	f
tklib_exp	slu/gsl_utilities.cpp	/^gsl_matrix* tklib_exp(gsl_matrix* mat){$/;"	f
tklib_exp_float	slu/gsl_utilities.cpp	/^gsl_matrix_float* tklib_exp_float(gsl_matrix_float* mat){$/;"	f
tklib_eye	slu/gsl_utilities.cpp	/^gsl_matrix* tklib_eye(int n1, int n2){$/;"	f
tklib_get_centroid	slu/gsl_utilities.cpp	/^gsl_vector* tklib_get_centroid(gsl_vector* x_st, gsl_vector* x_end){$/;"	f
tklib_get_distance	slu/gsl_utilities.cpp	/^gsl_vector* tklib_get_distance(gsl_matrix* X, gsl_vector* pt){$/;"	f
tklib_inverse	slu/gsl_utilities.cpp	/^gsl_matrix* tklib_inverse(gsl_matrix* M){$/;"	f
tklib_linalg_cholesky_decomp	slu/gsl_utilities.cpp	/^gsl_matrix* tklib_linalg_cholesky_decomp(gsl_matrix* A){$/;"	f
tklib_linalg_det	slu/gsl_utilities.cpp	/^double tklib_linalg_det(gsl_matrix* A){$/;"	f
tklib_log	slu/gsl_utilities.cpp	/^gsl_matrix* tklib_log(gsl_matrix* mat){$/;"	f
tklib_log_float	slu/gsl_utilities.cpp	/^gsl_matrix_float* tklib_log_float(gsl_matrix_float* mat){$/;"	f
tklib_matrix_add_vec	slu/gsl_utilities.cpp	/^void tklib_matrix_add_vec(gsl_matrix* pts, gsl_vector *vec, double alpha, double beta){$/;"	f
tklib_matrix_add_vec_M	slu/gsl_utilities.cpp	/^void tklib_matrix_add_vec_M(gsl_matrix* pts, gsl_matrix *vec, double alpha, double beta){$/;"	f
tklib_matrix_argmin	slu/gsl_utilities.cpp	/^gsl_vector* tklib_matrix_argmin(gsl_matrix* A, int dimension){$/;"	f
tklib_matrix_dot	slu/gsl_utilities.cpp	/^gsl_matrix * tklib_matrix_dot(gsl_matrix * m1, gsl_matrix *m2)$/;"	f
tklib_matrix_float_get_columns	slu/gsl_utilities.cpp	/^gsl_matrix_float* tklib_matrix_float_get_columns(gsl_matrix_float* M, gsl_vector* I){$/;"	f
tklib_matrix_float_get_rows	slu/gsl_utilities.cpp	/^gsl_matrix_float* tklib_matrix_float_get_rows(gsl_matrix_float* M, gsl_vector* I){$/;"	f
tklib_matrix_float_printf	slu/gsl_utilities.cpp	/^void tklib_matrix_float_printf(gsl_matrix_float* themat){$/;"	f
tklib_matrix_get	slu/gsl_utilities.cpp	/^gsl_matrix* tklib_matrix_get(gsl_matrix* M, gsl_vector* Ir, gsl_vector* Ic){$/;"	f
tklib_matrix_get_columns	slu/gsl_utilities.cpp	/^gsl_matrix* tklib_matrix_get_columns(gsl_matrix* M, gsl_vector* I){$/;"	f
tklib_matrix_get_rows	slu/gsl_utilities.cpp	/^gsl_matrix* tklib_matrix_get_rows(gsl_matrix* M, gsl_vector* I){$/;"	f
tklib_matrix_get_vector	slu/gsl_utilities.cpp	/^gsl_vector* tklib_matrix_get_vector(gsl_matrix* M, gsl_vector* Ir, gsl_vector* Ic){$/;"	f
tklib_matrix_min	slu/gsl_utilities.cpp	/^gsl_vector* tklib_matrix_min(gsl_matrix* A, int dimension){$/;"	f
tklib_matrix_mul_vec	slu/gsl_utilities.cpp	/^gsl_matrix* tklib_matrix_mul_vec(gsl_matrix* pts, gsl_vector *vec){$/;"	f
tklib_matrix_mul_vec_inplace	slu/gsl_utilities.cpp	/^void tklib_matrix_mul_vec_inplace(gsl_matrix* pts, gsl_vector *vec){$/;"	f
tklib_matrix_printf	slu/gsl_utilities.cpp	/^void tklib_matrix_printf(gsl_matrix* themat){$/;"	f
tklib_matrix_prod	slu/gsl_utilities.cpp	/^gsl_vector* tklib_matrix_prod(gsl_matrix* A, int dimension){$/;"	f
tklib_matrix_sqrt	slu/gsl_utilities.cpp	/^void tklib_matrix_sqrt(gsl_matrix* X){$/;"	f
tklib_matrix_sum	slu/gsl_utilities.cpp	/^gsl_vector* tklib_matrix_sum(gsl_matrix* A, int dimension){$/;"	f
tklib_mean	slu/gsl_utilities.cpp	/^gsl_vector* tklib_mean(gsl_matrix *pts, int dimension){$/;"	f
tklib_normalize_theta	slu/gsl_utilities.h	/^extern inline double tklib_normalize_theta(double theta)$/;"	f
tklib_normalize_theta_array	slu/gsl_utilities.cpp	/^gsl_vector* tklib_normalize_theta_array(gsl_vector* theta){$/;"	f
tklib_ones	slu/gsl_utilities.cpp	/^gsl_matrix * tklib_ones(int d1, int d2)$/;"	f
tklib_permutation_printf	slu/gsl_utilities.cpp	/^void tklib_permutation_printf(gsl_permutation* theperm){$/;"	f
tklib_permutation_to_vector	slu/gsl_utilities.cpp	/^gsl_vector* tklib_permutation_to_vector(gsl_permutation* permutation){$/;"	f
tklib_range	slu/gsl_utilities.cpp	/^gsl_vector *tklib_range(double start, double end, double increment){$/;"	f
tklib_rtheta_to_xy	slu/gsl_utilities.cpp	/^gsl_matrix* tklib_rtheta_to_xy(gsl_vector* pose, gsl_vector* reading){$/;"	f
tklib_rtheta_to_xy_matrix	slu/gsl_utilities.cpp	/^gsl_matrix* tklib_rtheta_to_xy_matrix(gsl_vector* pose, gsl_matrix* RTh){$/;"	f
tklib_sin	slu/gsl_utilities.cpp	/^gsl_vector* tklib_sin(gsl_vector *angles){$/;"	f
tklib_sse	slu/gsl_utilities.cpp	/^double tklib_sse(gsl_matrix* mat, gsl_matrix* opts){$/;"	f
tklib_subtract_mean	slu/gsl_utilities.cpp	/^gsl_matrix* tklib_subtract_mean(gsl_matrix* pts){$/;"	f
tklib_trace	slu/gsl_utilities.cpp	/^double tklib_trace(gsl_matrix* mat){$/;"	f
tklib_transpose	slu/gsl_utilities.cpp	/^gsl_matrix * tklib_transpose(gsl_matrix * m)$/;"	f
tklib_vector_argmax	slu/gsl_utilities.cpp	/^int tklib_vector_argmax(gsl_vector * vector) $/;"	f
tklib_vector_argmin	slu/gsl_utilities.cpp	/^int tklib_vector_argmin(gsl_vector * vector) $/;"	f
tklib_vector_bisect	slu/gsl_utilities.cpp	/^int tklib_vector_bisect(gsl_vector * v, double value)$/;"	f
tklib_vector_dot	slu/gsl_utilities.cpp	/^double tklib_vector_dot(gsl_vector * v1, gsl_vector * v2)$/;"	f
tklib_vector_equal	slu/gsl_utilities.cpp	/^double tklib_vector_equal(gsl_vector * v1, gsl_vector * v2) $/;"	f
tklib_vector_exp	slu/gsl_utilities.cpp	/^gsl_vector* tklib_vector_exp(gsl_vector* vec){$/;"	f
tklib_vector_geq	slu/gsl_utilities.cpp	/^gsl_vector* tklib_vector_geq(gsl_vector* vec, double value){$/;"	f
tklib_vector_get	slu/gsl_utilities.cpp	/^gsl_vector* tklib_vector_get(gsl_vector* V, gsl_vector* I){$/;"	f
tklib_vector_intersect	slu/gsl_utilities.cpp	/^void tklib_vector_intersect(gsl_vector * mask1, gsl_vector * mask2, gsl_vector * dest)$/;"	f
tklib_vector_leq	slu/gsl_utilities.cpp	/^gsl_vector* tklib_vector_leq(gsl_vector* vec, double value){$/;"	f
tklib_vector_linspace	slu/gsl_utilities.cpp	/^gsl_vector * tklib_vector_linspace(double start, double stop, int num_units)$/;"	f
tklib_vector_log	slu/gsl_utilities.cpp	/^gsl_vector* tklib_vector_log(gsl_vector* vec){$/;"	f
tklib_vector_mean	slu/gsl_utilities.cpp	/^double tklib_vector_mean(gsl_vector * vector) $/;"	f
tklib_vector_printf	slu/gsl_utilities.cpp	/^void tklib_vector_printf(gsl_vector* thevec){$/;"	f
tklib_vector_prod	slu/gsl_utilities.cpp	/^double tklib_vector_prod(gsl_vector* vec){$/;"	f
tklib_vector_sqrt	slu/gsl_utilities.cpp	/^void tklib_vector_sqrt(gsl_vector* vec){$/;"	f
tklib_vector_stddev	slu/gsl_utilities.cpp	/^double tklib_vector_stddev(gsl_vector * vector) $/;"	f
tklib_vector_sum	slu/gsl_utilities.cpp	/^double tklib_vector_sum(gsl_vector* vec){$/;"	f
tklib_vector_union	slu/gsl_utilities.cpp	/^void tklib_vector_union(gsl_vector * mask1, gsl_vector * mask2, gsl_vector * dest)$/;"	f
tklib_vector_variance	slu/gsl_utilities.cpp	/^double tklib_vector_variance(gsl_vector * vector) $/;"	f
tklib_xy_to_rtheta	slu/gsl_utilities.cpp	/^gsl_matrix* tklib_xy_to_rtheta(gsl_vector* curr_pose, gsl_matrix* features){$/;"	f
toString	ein_aibo.cpp	/^string EinAiboJoints::toString() {$/;"	f	class:EinAiboJoints
to_bool	word.h	/^  virtual bool to_bool() {$/;"	f	class:AiboPoseWord
to_bool	word.h	/^  virtual bool to_bool() {$/;"	f	class:ArmPoseWord
to_bool	word.h	/^  virtual bool to_bool() {$/;"	f	class:DoubleWord
to_bool	word.h	/^  virtual bool to_bool() {$/;"	f	class:EePoseWord
to_bool	word.h	/^  virtual bool to_bool() {$/;"	f	class:IntegerWord
to_bool	word.h	/^  virtual bool to_bool() {$/;"	f	class:Word
to_double	word.h	/^  virtual double to_double() {$/;"	f	class:DoubleWord
to_double	word.h	/^  virtual double to_double() {$/;"	f	class:IntegerWord
to_double	word.h	/^  virtual double to_double() {$/;"	f	class:Word
to_int	word.h	/^  virtual int to_int() {$/;"	f	class:AiboPoseWord
to_int	word.h	/^  virtual int to_int() {$/;"	f	class:ArmPoseWord
to_int	word.h	/^  virtual int to_int() {$/;"	f	class:DoubleWord
to_int	word.h	/^  virtual int to_int() {$/;"	f	class:EePoseWord
to_int	word.h	/^  virtual int to_int() {$/;"	f	class:IntegerWord
to_int	word.h	/^  virtual int to_int() {$/;"	f	class:Word
to_string	repl.cpp	/^  string to_string() {$/;"	f	class:Integer
to_string	repl.cpp	/^  virtual string to_string() {$/;"	f	class:Minus
to_string	repl.cpp	/^  virtual string to_string() {$/;"	f	class:Plus
to_string	word.cpp	/^string CompoundWord::to_string() {$/;"	f	class:CompoundWord
to_string	word.h	/^  string to_string() {$/;"	f	class:CommentWord
to_string	word.h	/^  string to_string() {$/;"	f	class:StringWord
to_string	word.h	/^  string to_string() {$/;"	f	class:SymbolWord
to_string	word.h	/^  virtual string to_string() {$/;"	f	class:Word
toggleVisible	qtgui/einwindow.cpp	/^void EinWindow::toggleVisible(bool show) {$/;"	f	class:EinWindow
tokenize_basic	word.cpp	/^vector<string> tokenize_basic(const string program) {$/;"	f
tokenize_string	word.cpp	/^vector<string> tokenize_string(const string program) { $/;"	f
top	config.h	/^  eePose top;$/;"	m	struct:BoxMemory
top	config.h	/^  eePose top;$/;"	m	struct:Sprite
torsoFanCallback	ein.cpp	/^void MachineState::torsoFanCallback(const baxter_core_msgs::AnalogIOState& aios) {$/;"	f	class:MachineState
torsoFanState	config.h	/^  double torsoFanState;$/;"	m	class:EinConfig
torso_fan_sub	config.h	/^  ros::Subscriber torso_fan_sub;$/;"	m	class:EinConfig
totalGraspGears	config.h	/^  static const int totalGraspGears = 8;$/;"	m	class:EinConfig
totalRangeHistoryLength	config.h	/^  const static int totalRangeHistoryLength = 100;$/;"	m	class:EinConfig
trX	config.h	/^  double trX = 0;$/;"	m	class:EinConfig
trY	config.h	/^  double trY = 0;$/;"	m	class:EinConfig
trZ	config.h	/^  double trZ = 0;$/;"	m	class:EinConfig
trZ	config.h	/^  double trZ;$/;"	m	struct:BoxMemory
transition_table	config.h	/^  shared_ptr<TransitionTable> transition_table;$/;"	m	class:EinConfig
triangleWave	ein_aibo.cpp	/^double triangleWave(double t) {$/;"	f	namespace:ein_words
tries	config.h	/^  double tries;$/;"	m	struct:Grasp
trueCameraPose	config.h	/^  eePose trueCameraPose;$/;"	m	class:EinConfig
trueEEPose	config.h	/^  geometry_msgs::Pose trueEEPose;$/;"	m	class:EinConfig
trueEEPoseEEPose	config.h	/^  eePose trueEEPoseEEPose;$/;"	m	class:EinConfig
trueEEWrench	config.h	/^  eePose trueEEWrench;$/;"	m	class:EinConfig
trueGain	ein_aibo.h	/^  EinAiboJoints trueGain[3];$/;"	m	class:EinAiboConfig
trueIndicators	ein_aibo.h	/^  EinAiboIndicators trueIndicators;$/;"	m	class:EinAiboConfig
trueJointEfforts	config.h	/^  double trueJointEfforts[NUM_JOINTS] = {0, 0, 0, 0, 0, 0, 0};$/;"	m	class:EinConfig
trueJointPositions	config.h	/^  double trueJointPositions[NUM_JOINTS] = {0, 0, 0, 0, 0, 0, 0};$/;"	m	class:EinConfig
trueJointVelocities	config.h	/^  double trueJointVelocities[NUM_JOINTS] = {0, 0, 0, 0, 0, 0, 0};$/;"	m	class:EinConfig
trueJoints	ein_aibo.h	/^  EinAiboJoints trueJoints;$/;"	m	class:EinAiboConfig
truePose	ein_aibo.h	/^  EinAiboJoints truePose;$/;"	m	class:EinAiboConfig
trueRangePose	config.h	/^  eePose trueRangePose;$/;"	m	class:EinConfig
trueSensors	ein_aibo.h	/^  EinAiboSensors trueSensors;$/;"	m	class:EinAiboConfig
tryToAddBestObjectToScene	gaussian_map.cpp	/^void Scene::tryToAddBestObjectToScene() {$/;"	f	class:Scene
tryToAddObjectToScene	gaussian_map.cpp	/^void Scene::tryToAddObjectToScene(int class_idx) {$/;"	f	class:Scene
tryToLoadRangeMap	ein.cpp	/^void tryToLoadRangeMap(MachineState * ms, std::string classDir, const char *className, int i) {$/;"	f
tukeylambdacdf	cephes/tukey.c	/^double tukeylambdacdf(double x, double lmbda)$/;"	f
twistThresh	config.h	/^  double twistThresh = 0.01;$/;"	m	class:EinConfig
type_mouse_event	qtgui/window_QT.h	/^enum type_mouse_event { mouse_up = 0, mouse_down = 1, mouse_dbclick = 2, mouse_move = 3 };$/;"	g
ui	qtgui/armwidget.h	/^    Ui::ArmWidget *ui;$/;"	m	class:ArmWidget
ui	qtgui/einwindow.h	/^    Ui::EinWindow *ui;$/;"	m	class:EinWindow
ui	qtgui/gaussianmapwidget.h	/^    Ui::GaussianMapWidget *ui;$/;"	m	class:GaussianMapWidget
ui	qtgui/mainwindow.h	/^    Ui::MainWindow *ui;$/;"	m	class:MainWindow
uiInput	opencl/ein_opencl.cpp	/^  cl_float* uiInput = NULL;            \/\/ Mapped Pointer to pinned Host input buffer for host processing$/;"	m	struct:GaussianMapGpu	file:
uiInput	opencl/ein_opencl.cpp	/^  cl_float* uiInput = NULL;            \/\/ Mapped Pointer to pinned Host input buffer for host processing$/;"	m	struct:ImageGpu	file:
uiNumDevices	opencl/ein_opencl.cpp	/^  cl_uint uiNumDevices = 0;           \/\/ Number of OpenCL devices available$/;"	m	struct:EinGpuConfig	file:
uiNumDevices	opencl/oclNbody/src/oclNbody.cpp	/^cl_uint uiNumDevices = 0;           \/\/ Number of OpenCL devices available$/;"	v
uiNumDevsUsed	opencl/ein_opencl.cpp	/^  cl_uint uiNumDevsUsed = 1;          \/\/ Number of OpenCL devices used in this sample $/;"	m	struct:EinGpuConfig	file:
uiNumDevsUsed	opencl/oclNbody/src/oclNbody.cpp	/^cl_uint uiNumDevsUsed = 1;          \/\/ Number of OpenCL devices used in this sample $/;"	v
uiOutput	opencl/ein_opencl.cpp	/^  cl_float* uiOutput = NULL;           \/\/ Mapped Pointer to pinned Host output buffer for host processing$/;"	m	struct:GaussianMapGpu	file:
uiTargetDevice	opencl/ein_opencl.cpp	/^  cl_uint uiTargetDevice = 0;	      \/\/ OpenCL Device to compute on$/;"	m	struct:EinGpuConfig	file:
uiTargetDevice	opencl/oclNbody/src/oclNbody.cpp	/^cl_uint uiTargetDevice = 0;	        \/\/ OpenCL Device to compute on$/;"	v
un_rot_mat	config.h	/^  Mat un_rot_mat;$/;"	m	struct:pixelToGlobalCache
unprocessed	opencl/oclNbody/inc/cmd_arg_reader.h	/^    UnpMap     unprocessed;$/;"	m	class:CmdArgReader
unsignedQuaternionDistance	eigen_util.cpp	/^double unsignedQuaternionDistance(Quaternionf q1, Quaternionf q2) {$/;"	f
update	opencl/oclNbody/src/oclBodySystemCpu.cpp	/^void BodySystemCPU::update(float deltaTime)$/;"	f	class:BodySystemCPU
update	opencl/oclNbody/src/oclBodySystemOpencl.cpp	/^void BodySystemOpenCL::update(float deltaTime)$/;"	f	class:BodySystemOpenCL
update	qtgui/armwidget.cpp	/^void ArmWidget::update() {$/;"	f	class:ArmWidget
update	qtgui/mainwindow.cpp	/^void MainWindow::update() {$/;"	f	class:MainWindow
update2dRangeMaps	ein.cpp	/^void update2dRangeMaps(MachineState * ms, Vector3d castPoint) {$/;"	f
updateGl	qtgui/window_QT.cpp	/^void DefaultEinViewPort::updateGl()$/;"	f	class:DefaultEinViewPort
updateGl	qtgui/window_QT.cpp	/^void OpenGlEinViewPort::updateGl()$/;"	f	class:OpenGlEinViewPort
updateImage	qtgui/einwindow.cpp	/^void EinWindow::updateImage(const Mat image)  {$/;"	f	class:EinWindow
updateImage	qtgui/window_QT.cpp	/^void DefaultEinViewPort::updateImage(const Mat arr)$/;"	f	class:DefaultEinViewPort
updateImage	qtgui/window_QT.cpp	/^void OpenGlEinViewPort::updateImage(const Mat \/*arr*\/)$/;"	f	class:OpenGlEinViewPort
updateMap	qtgui/gaussianmapwidget.cpp	/^void GaussianMapWidget::updateMap(shared_ptr<GaussianMap> map) {$/;"	f	class:GaussianMapWidget
update_baxter	ein.cpp	/^void MachineState::update_baxter(ros::NodeHandle &n) {$/;"	f	class:MachineState
useContinuousGraspTransform	config.h	/^  int useContinuousGraspTransform = 1;$/;"	m	class:EinConfig
useFade	config.h	/^  int useFade = 1;$/;"	m	class:EinConfig
useGlow	config.h	/^  int useGlow = 0;$/;"	m	class:EinConfig
usePotentiallyCollidingIK	config.h	/^  bool usePotentiallyCollidingIK = 0;$/;"	m	class:EinConfig
vaDelta	config.h	/^  constexpr static double vaDelta = (2.0 * 3.1415926) \/ vaNumAngles;$/;"	m	class:EinConfig
vaNumAngles	config.h	/^  const static int vaNumAngles = 360;$/;"	m	class:EinConfig
vaX	config.h	/^  double vaX[vaNumAngles];$/;"	m	class:EinConfig
vaY	config.h	/^  double vaY[vaNumAngles];$/;"	m	class:EinConfig
valAtCell	gaussian_map.cpp	/^GaussianMapCell GaussianMap::valAtCell(int x, int y) {$/;"	f	class:GaussianMap
value	config.h	/^	int value; $/;"	m	struct:AnimationState
value	word.h	/^  EinAiboJoints value() {$/;"	f	class:AiboPoseWord
value	word.h	/^  armPose value() {$/;"	f	class:ArmPoseWord
value	word.h	/^  double value() {$/;"	f	class:DoubleWord
value	word.h	/^  eePose value() {$/;"	f	class:EePoseWord
value	word.h	/^  int value() {$/;"	f	class:IntegerWord
value	word.h	/^  string value() {$/;"	f	class:CommentWord
value	word.h	/^  string value() {$/;"	f	class:StringWord
value_x	opencl/oclNbody/inc/paramgl.h	/^          int value_x;$/;"	m	class:ParamListGL
vanishingPointReticle	config.h	/^  eePose vanishingPointReticle = defaultReticle;$/;"	m	class:EinConfig
variables	config.h	/^  std::map<string, std::shared_ptr<Word> > variables;$/;"	m	class:MachineState
vectorArcTan	ein.cpp	/^double vectorArcTan(MachineState * ms, double y, double x) {$/;"	f
vertexShader	opencl/oclNbody/src/oclRenderParticles.cpp	/^const char vertexShader[] = $/;"	v
visionCycleInterval	config.h	/^  double visionCycleInterval = 7.5 \/ 7.0 * (1.0\/commonFreq);$/;"	m	class:EinConfig
vmColorRangeMapAccumulator	config.h	/^  double vmColorRangeMapAccumulator[3*vmWidth*vmWidth*vmWidth];$/;"	m	class:EinConfig
vmColorRangeMapMass	config.h	/^  double vmColorRangeMapMass[vmWidth*vmWidth*vmWidth];$/;"	m	class:EinConfig
vmDelta	config.h	/^  const double vmDelta = hrmDelta;$/;"	m	class:EinConfig
vmHalfWidth	config.h	/^  const static int vmHalfWidth = hrmHalfWidth;$/;"	m	class:EinConfig
vmMarkerPublisher	config.h	/^  ros::Publisher vmMarkerPublisher;$/;"	m	class:EinConfig
vmWidth	config.h	/^  const static int vmWidth = hrmWidth;$/;"	m	class:EinConfig
vocabNumWords	config.h	/^  const int vocabNumWords = 1000;\/\/2000;$/;"	m	class:EinConfig
vocab_file	config.h	/^  std::string vocab_file = "unspecified_vf";$/;"	m	class:EinConfig
voice_buffer	ein_aibo.h	/^  double * voice_buffer = NULL;$/;"	m	class:EinAiboConfig
voice_buffer_size	ein_aibo.h	/^  int voice_buffer_size = -1;$/;"	m	class:EinAiboConfig
voidMapRegion	ein.cpp	/^void voidMapRegion(MachineState * ms, double xc, double yc) {$/;"	f
volumeMap	config.h	/^  double volumeMap[vmWidth*vmWidth*vmWidth];$/;"	m	class:EinConfig
volumeMapAccumulator	config.h	/^  double volumeMapAccumulator[vmWidth*vmWidth*vmWidth];$/;"	m	class:EinConfig
volumeMapMass	config.h	/^  double volumeMapMass[vmWidth*vmWidth*vmWidth];$/;"	m	class:EinConfig
w1AngleThresh	config.h	/^  double w1AngleThresh = 0.02; $/;"	m	class:EinConfig
w1GoThresh	config.h	/^  double w1GoThresh = 0.03;\/\/0.01;$/;"	m	class:EinConfig
waitForSecondsTarget	config.h	/^  ros::Time waitForSecondsTarget;$/;"	m	class:EinConfig
waitForTugStart	config.h	/^  ros::Time waitForTugStart;$/;"	m	class:EinConfig
waitForTugTimeout	config.h	/^  double waitForTugTimeout = 1e10;$/;"	m	class:EinConfig
waitMode	config.h	/^} waitMode;$/;"	t	typeref:enum:__anon30
waitUntilAtCurrentPositionCounter	config.h	/^  int waitUntilAtCurrentPositionCounter = 0;$/;"	m	class:EinConfig
waitUntilAtCurrentPositionCounterTimeout	config.h	/^  int waitUntilAtCurrentPositionCounterTimeout = 300;$/;"	m	class:EinConfig
waitUntilAtCurrentPositionStart	config.h	/^  ros::Time waitUntilAtCurrentPositionStart;$/;"	m	class:EinConfig
waitUntilAtCurrentPositionTimeout	config.h	/^  double  waitUntilAtCurrentPositionTimeout = 60.0;$/;"	m	class:EinConfig
waitUntilEffortCounter	config.h	/^  int waitUntilEffortCounter = 0;$/;"	m	class:EinConfig
waitUntilEffortCounterTimeout	config.h	/^  int waitUntilEffortCounterTimeout = 3000;$/;"	m	class:EinConfig
waitUntilGripperNotMovingCounter	config.h	/^  int waitUntilGripperNotMovingCounter = 0;$/;"	m	class:EinConfig
waitUntilGripperNotMovingStamp	config.h	/^  ros::Time waitUntilGripperNotMovingStamp;$/;"	m	class:EinConfig
waitUntilGripperNotMovingTimeout	config.h	/^  int waitUntilGripperNotMovingTimeout = 100;$/;"	m	class:EinConfig
wheelEvent	qtgui/window_QT.cpp	/^void DefaultEinViewPort::wheelEvent(QWheelEvent* evnt)$/;"	f	class:DefaultEinViewPort
width	gaussian_map.h	/^  int width; \/\/ or columns$/;"	m	class:GaussianMap
width	gaussian_map.h	/^  int width; \/\/ or columns$/;"	m	class:Scene
willIkResultFail	ein_ik.cpp	/^bool willIkResultFail(MachineState * ms, baxter_core_msgs::SolvePositionIK thisIkRequest, int thisIkCallResult, bool * likelyInCollision, int i) {$/;"	f
windowManager	qtgui/mainwindow.h	/^    WindowManager windowManager;$/;"	m	class:MainWindow
windows	qtgui/windowmanager.h	/^  vector<EinWindow *> windows;$/;"	m	class:WindowManager
word	config.h	/^  string word;$/;"	m	struct:streamWord
word	qtgui/wordaction.h	/^  shared_ptr<Word> word;$/;"	m	class:WordAction
words	ein_words.cpp	/^std::vector<std::shared_ptr<Word> > words;$/;"	v
wordsInNamespace	word.cpp	/^map<string, shared_ptr<Word> > MachineState::wordsInNamespace()$/;"	f	class:MachineState
worldToMapPixel	ein.cpp	/^cv::Point worldToMapPixel(Mat mapImage, double xMin, double xMax, double yMin, double yMax, double x, double y) {$/;"	f
wrenchThresh	config.h	/^  double wrenchThresh = 15.0;$/;"	m	class:EinConfig
wristCamImage	config.h	/^  Mat wristCamImage;$/;"	m	class:EinConfig
wristCamInit	config.h	/^  int wristCamInit = 0;$/;"	m	class:EinConfig
wristView	qtgui/armwidget.h	/^  DefaultEinViewPort wristView;$/;"	m	class:ArmWidget
wristViewImage	config.h	/^  Mat wristViewImage;$/;"	m	class:EinConfig
wristViewWindow	config.h	/^  EinWindow * wristViewWindow;$/;"	m	class:EinConfig
write3dGrasps	ein.cpp	/^void write3dGrasps(MachineState * ms, int idx, string this_grasp_path) {$/;"	f
writeAerialGradientsToServoCrop	ein.cpp	/^void writeAerialGradientsToServoCrop(MachineState * ms, int idx, string servoCrop_file_path) {$/;"	f
writeBinaryToYaml	ein_util.cpp	/^void writeBinaryToYaml(unsigned char * data, int length, FileStorage & fsvO) {$/;"	f
writeCells	gaussian_map.cpp	/^void GaussianMap::writeCells(FileStorage & fsvO) {$/;"	f	class:GaussianMap
writeClassToFolder	ein.cpp	/^void writeClassToFolder(MachineState * ms, int idx, string folderName) {$/;"	f
writeGraspMemory	ein.cpp	/^void writeGraspMemory(MachineState * ms, int idx, string this_grasp_path) {$/;"	f
writeIr2D	ein.cpp	/^void writeIr2D(MachineState * ms, int idx, string this_range_path) {$/;"	f
writeJointsBatchAsClass	ein.cpp	/^void writeJointsBatchAsClass(MachineState * ms, int classToStreamIdx) {$/;"	f
writeLabelBatchAsClass	ein.cpp	/^void writeLabelBatchAsClass(MachineState * ms, int classToStreamIdx) {$/;"	f
writeMatToYaml	ein_util.cpp	/^void writeMatToYaml(Mat m, FileStorage & fs) {$/;"	f
writePoseBatchAsClass	ein.cpp	/^void writePoseBatchAsClass(MachineState * ms, int classToStreamIdx) {$/;"	f
writePredictedObjects	gaussian_map.cpp	/^void Scene::writePredictedObjects(FileStorage & fsvO) {$/;"	f	class:Scene
writeRangeBatchAsClass	ein.cpp	/^void writeRangeBatchAsClass(MachineState * ms, int classToStreamIdx) {$/;"	f
writeSceneModel	ein.cpp	/^void writeSceneModel(MachineState * ms, int idx, string this_scene_path) {$/;"	f
writeSettings	qtgui/window_QT.cpp	/^void DefaultEinViewPort::writeSettings(QSettings& settings)$/;"	f	class:DefaultEinViewPort
writeSettings	qtgui/window_QT.cpp	/^void OpenGlEinViewPort::writeSettings(QSettings& \/*settings*\/)$/;"	f	class:OpenGlEinViewPort
writeSideAndSerialToFileStorage	ein.cpp	/^void writeSideAndSerialToFileStorage(MachineState * ms, FileStorage& fsvO) {$/;"	f
writeThumbnail	ein.cpp	/^void writeThumbnail(MachineState * ms, int idx, string thumbnail_file_path) {$/;"	f
writeToFileStorage	config.cpp	/^void Grasp::writeToFileStorage(FileStorage& fsvO) const {$/;"	f	class:Grasp
writeToFileStorage	eePose.cpp	/^void _armPose::writeToFileStorage(FileStorage& fsvO) const {$/;"	f	class:_armPose
writeToFileStorage	eePose.cpp	/^void _eePose::writeToFileStorage(FileStorage& fsvO) const {$/;"	f	class:_eePose
writeToFileStorage	gaussian_map.cpp	/^void GaussianMap::writeToFileStorage(FileStorage& fsvO) {$/;"	f	class:GaussianMap
writeToFileStorage	gaussian_map.cpp	/^void Scene::writeToFileStorage(FileStorage& fsvO) {$/;"	f	class:Scene
writeToFileStorage	gaussian_map.cpp	/^void SceneObject::writeToFileStorage(FileStorage& fsvO) {$/;"	f	class:SceneObject
writeToFileStorage	gaussian_map.cpp	/^void TransitionTable::writeToFileStorage(FileStorage& fsvO) {$/;"	f	class:TransitionTable
writeToFileStorage	gaussian_map.cpp	/^void _GaussianMapCell::writeToFileStorage(FileStorage& fsvO) const {$/;"	f	class:_GaussianMapCell
writeWordBatchAsClass	ein.cpp	/^void writeWordBatchAsClass(MachineState * ms, int classToStreamIdx) {$/;"	f
write_little_endian	ein_aibo.cpp	/^void write_little_endian(unsigned int word, int num_bytes, uchar *out) {$/;"	f	namespace:ein_words
x	opencl/oclNbody/src/oclBodySystemCpu.cpp	/^struct float3 { float x, y, z; };$/;"	m	struct:float3	file:
x1	config.h	/^  int x1;$/;"	m	struct:pixelToGlobalCache
x2	config.h	/^  int x2;$/;"	m	struct:pixelToGlobalCache
x3	config.h	/^  int x3;$/;"	m	struct:pixelToGlobalCache
x4	config.h	/^  int x4;$/;"	m	struct:pixelToGlobalCache
xCR	config.h	/^  int xCR[numCReticleIndeces];$/;"	m	class:EinConfig
x_c	gaussian_map.h	/^  int x_c;$/;"	m	struct:SceneObjectScore
x_center_cell	gaussian_map.h	/^  int x_center_cell;$/;"	m	class:GaussianMap
x_center_cell	gaussian_map.h	/^  int x_center_cell;$/;"	m	class:Scene
x_m	gaussian_map.h	/^  double x_m;$/;"	m	struct:SceneObjectScore
x_thisZ	config.h	/^  double x_thisZ;$/;"	m	struct:pixelToGlobalCache
xl	randomkit.h	/^    double xl;$/;"	m	struct:rk_state_
xm	randomkit.h	/^    double xm;$/;"	m	struct:rk_state_
xmlEncode	ein_util.cpp	/^string xmlEncode(const string data) {$/;"	f
xr	randomkit.h	/^    double xr;$/;"	m	struct:rk_state_
y	opencl/oclNbody/src/oclBodySystemCpu.cpp	/^struct float3 { float x, y, z; };$/;"	m	struct:float3	file:
y0	cephes/cephes_names.h	50;"	d
y0	cephes/j0.c	/^double y0(x)$/;"	f
y1	cephes/cephes_names.h	52;"	d
y1	cephes/j1.c	/^double y1(x)$/;"	f
y1	config.h	/^  int y1;$/;"	m	struct:pixelToGlobalCache
y2	config.h	/^  int y2;$/;"	m	struct:pixelToGlobalCache
y3	config.h	/^  int y3;$/;"	m	struct:pixelToGlobalCache
y4	config.h	/^  int y4;$/;"	m	struct:pixelToGlobalCache
yCR	config.h	/^  int yCR[numCReticleIndeces];$/;"	m	class:EinConfig
y_c	gaussian_map.h	/^  int y_c;$/;"	m	struct:SceneObjectScore
y_center_cell	gaussian_map.h	/^  int y_center_cell;$/;"	m	class:GaussianMap
y_center_cell	gaussian_map.h	/^  int y_center_cell;$/;"	m	class:Scene
y_m	gaussian_map.h	/^  double y_m;$/;"	m	struct:SceneObjectScore
y_thisZ	config.h	/^  double y_thisZ;$/;"	m	struct:pixelToGlobalCache
yn	cephes/cephes_names.h	89;"	d
yn	cephes/yn.c	/^double yn(n, x)$/;"	f
yv	cephes/cephes_names.h	83;"	d
yv	cephes/struve.c	/^double yv(v, x)$/;"	f
z	gaussian_map.h	/^  GaussianMapChannel z;$/;"	m	struct:_GaussianMapCell
z	opencl/oclNbody/src/oclBodySystemCpu.cpp	/^struct float3 { float x, y, z; };$/;"	m	struct:float3	file:
z1	config.h	/^  double z1;$/;"	m	struct:pixelToGlobalCache
z2	config.h	/^  double z2;$/;"	m	struct:pixelToGlobalCache
z3	config.h	/^  double z3;$/;"	m	struct:pixelToGlobalCache
z4	config.h	/^  double z4;$/;"	m	struct:pixelToGlobalCache
zCountsToMat	gaussian_map.cpp	/^void GaussianMap::zCountsToMat(Mat& out) {$/;"	f	class:GaussianMap
zMuToMat	gaussian_map.cpp	/^void GaussianMap::zMuToMat(Mat& out) {$/;"	f	class:GaussianMap
zSigmaSquaredToMat	gaussian_map.cpp	/^void GaussianMap::zSigmaSquaredToMat(Mat& out) {$/;"	f	class:GaussianMap
zWindow	config.h	/^  EinWindow * zWindow;$/;"	m	class:EinConfig
z_end	slu/math3d.h	/^  double z_end;$/;"	m	struct:__anon7
z_start	slu/math3d.h	/^  double z_start;$/;"	m	struct:__anon7
zero	eePose.cpp	/^_eePose _eePose::zero() {$/;"	f	class:_eePose
zero	gaussian_map.cpp	/^void GaussianMap::zero() {$/;"	f	class:GaussianMap
zero	gaussian_map.cpp	/^void _GaussianMapCell::zero() {$/;"	f	class:_GaussianMapCell
zero	gaussian_map.cpp	/^void _GaussianMapChannel::zero() {$/;"	f	class:_GaussianMapChannel
zeroBox	gaussian_map.cpp	/^void GaussianMap::zeroBox(int _x1, int _y1, int _x2, int _y2) {$/;"	f	class:GaussianMap
zeroClassGraspMemory	ein.cpp	/^void zeroClassGraspMemory(MachineState * ms) {$/;"	f
zeroGraspMemoryAndRangeMap	ein.cpp	/^void zeroGraspMemoryAndRangeMap(MachineState * ms) {$/;"	f
zero_g_toggle	config.h	/^  int zero_g_toggle = 1;$/;"	m	class:EinConfig
zeta	cephes/cephes_names.h	90;"	d
zeta	cephes/zeta.c	/^double zeta(x, q)$/;"	f
zetac	cephes/cephes_names.h	91;"	d
zetac	cephes/zetac.c	/^double zetac(x)$/;"	f
~BodySystem	opencl/oclNbody/inc/oclBodySystem.h	/^        virtual ~BodySystem() {}$/;"	f	class:BodySystem
~BodySystemCPU	opencl/oclNbody/src/oclBodySystemCpu.cpp	/^BodySystemCPU::~BodySystemCPU()$/;"	f	class:BodySystemCPU
~BodySystemOpenCL	opencl/oclNbody/src/oclBodySystemOpencl.cpp	/^BodySystemOpenCL::~BodySystemOpenCL()$/;"	f	class:BodySystemOpenCL
~CmdArgReader	opencl/oclNbody/src/cmd_arg_reader.cpp	/^CmdArgReader::~CmdArgReader() $/;"	f	class:CmdArgReader
~DefaultEinViewPort	qtgui/window_QT.cpp	/^DefaultEinViewPort::~DefaultEinViewPort()$/;"	f	class:DefaultEinViewPort
~EinGpuConfig	opencl/ein_opencl.cpp	/^  ~EinGpuConfig() {$/;"	f	struct:EinGpuConfig
~EinViewPort	qtgui/window_QT.h	/^    virtual ~EinViewPort() {}$/;"	f	class:EinViewPort
~EinWindow	qtgui/einwindow.cpp	/^EinWindow::~EinWindow()$/;"	f	class:EinWindow
~GaussianMap	gaussian_map.cpp	/^GaussianMap::~GaussianMap() {$/;"	f	class:GaussianMap
~GaussianMapGpu	opencl/ein_opencl.cpp	/^  ~GaussianMapGpu() { $/;"	f	struct:GaussianMapGpu
~IkFastFunctions	ikfast/ikfast.h	/^    virtual ~IkFastFunctions() {$/;"	f	class:ikfast::IkFastFunctions
~IkSolutionBase	ikfast/ikfast.h	/^    virtual ~IkSolutionBase() {$/;"	f	class:ikfast::IkSolutionBase
~IkSolutionListBase	ikfast/ikfast.h	/^    virtual ~IkSolutionListBase() {$/;"	f	class:ikfast::IkSolutionListBase
~MainWindow	qtgui/mainwindow.cpp	/^MainWindow::~MainWindow()$/;"	f	class:MainWindow
~OpenGlEinViewPort	qtgui/window_QT.cpp	/^OpenGlEinViewPort::~OpenGlEinViewPort()$/;"	f	class:OpenGlEinViewPort
~Param	opencl/oclNbody/inc/param.h	/^          virtual ~Param() { }$/;"	f	class:Param
~ParamBase	opencl/oclNbody/inc/param.h	/^          virtual ~ParamBase() { }$/;"	f	class:ParamBase
~ParamList	opencl/oclNbody/inc/param.h	/^          virtual ~ParamList() { }$/;"	f	class:ParamList
~ParticleRenderer	opencl/oclNbody/src/oclRenderParticles.cpp	/^ParticleRenderer::~ParticleRenderer()$/;"	f	class:ParticleRenderer
